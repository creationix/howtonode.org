<rss version="2.0" xmlns:content="https://purl.org/rss/1.0/modules/content/" xmlns:wfw="https://wellformedweb.org/CommentAPI/" xmlns:dc="https://purl.org/dc/elements/1.1/" xmlns:atom="https://www.w3.org/2005/Atom"><channel><title>How To Node</title><atom:link href="https://howtonode.org/feed.xml" rel="self" type="application/rss+xml" /><link>https://howtonode.org</link><description>How To Node is a blog featuring projects and tutorials relating to the Node.js project.</description><pubDate>Tue, 13 Jul 2021 08:54:48 -0500</pubDate><generator>https://github.com/creationix/wheat</generator><language>en</language><item><title>Store data with CloudBoost's CloudObjects</title><link>https://howtonode.org/cloudboost-cloudobjects</link><comments>https://howtonode.org/cloudboost-cloudobjects#disqus_thread</comments><pubDate>Tue, 22 Mar 2016 10:53:58 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/cloudboost-cloudobjects</guid><description>&lt;p&gt;CloudBoost is a Database Service with storage, search and real-time capabilities. Think of CloudBoost as Parse + Firebase + Algolia all combined into one. CloudBoost has SDK's in multiple platforms which helps you build web, mobile and IoT apps without dealing with the backend and database infrastructure. &lt;/p&gt;

&lt;h2&gt;Pre-Requisites&lt;/h2&gt;

&lt;h3&gt;CloudBoost&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cloudboost.io&quot;&gt;CloudBoost&lt;/a&gt; is a Cloud Application Platform designed to make it easier for NodeJS developers to build apps. CloudBoost features include a Database Service, Queues, Cache and more built into one simple API. &lt;/p&gt;

&lt;p&gt;CloudBoost is in the npm registry. To install CloudBoost, you need to : &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install cloudboost
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;What will our application do?&lt;/h2&gt;

&lt;p&gt;To keep things simple, we're going to only tackle very basic functionality. We're going to build a course management system which registers, retrieves and deletes courses. Our application will support the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register a course (POST /course/:name)&lt;/li&gt;
&lt;li&gt;Retrieve a course (GET /course/:name)&lt;/li&gt;
&lt;li&gt;Deleting a course (DELETE /course/:name)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Let's get started!&lt;/h2&gt;

&lt;p&gt;You need to create a new app &lt;a href=&quot;https://www.cloudboost.io&quot;&gt;here&lt;/a&gt; before you get started. Create a new account and create a new app to get started. &lt;/p&gt;

&lt;p&gt;Once your app is created. You'll have your client key and a master key. Please make sure you use master key when you're writing NodeJS applications. &lt;/p&gt;

&lt;p&gt;You need to initialize your new application. To initialize your app, &lt;/p&gt;

&lt;p&gt;&lt;cloudboost-cloudobjects/init.js&gt;&lt;/p&gt;

&lt;p&gt;CloudBoost NodeJS module initializes your app with your App ID and Master Key. &lt;/p&gt;

&lt;h2&gt;Creating the package.json file&lt;/h2&gt;

&lt;p&gt;In order to manage dependencies, it is useful to create a &lt;code&gt;package.json&lt;/code&gt; file. This file
provides details on the packages you depend on so that you can more easily use &lt;code&gt;npm&lt;/code&gt; to manage
these dependencies.&lt;/p&gt;

&lt;p&gt;Create a file named &lt;code&gt;package.json&lt;/code&gt; in your application directory.&lt;/p&gt;

&lt;p&gt;&lt;cloudboost-cloudobjects/package.json&gt;&lt;/p&gt;

&lt;p&gt;The most important field in this JSON file is the &lt;code&gt;dependencies&lt;/code&gt; field. This field will allow
you to execute &lt;code&gt;npm install&lt;/code&gt; to install the dependencies for your project.&lt;/p&gt;

&lt;h2&gt;Create a course table&lt;/h2&gt;

&lt;p&gt;After you have created your app. Got to CloudBoost Dashboard. click on &lt;code&gt;Manage App&lt;/code&gt; button to got o tables page where you can cretae a course table in CloudBoost. Add a new column called &lt;code&gt;name&lt;/code&gt; of type &lt;code&gt;text&lt;/code&gt;. Once you're done,  you can switch back to your NodeJS app and begin writing code. &lt;/p&gt;

&lt;h2&gt;Inserting an object in CloudBoost&lt;/h2&gt;

&lt;p&gt;There is one route that we will need in order to register a course in your app. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POST /course/:name -&gt; Adds an course to the database and returns 200.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The NodeJS script to register a course is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You need to create a new CloudObject &lt;/li&gt;
&lt;li&gt;Set object params by using &lt;code&gt;set()&lt;/code&gt; function of CloudObject&lt;/li&gt;
&lt;li&gt;Save CloudObject using &lt;code&gt;save()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;cloudboost-cloudobjects/addItem.js&gt;&lt;/p&gt;

&lt;p&gt;The response will be : &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  status: 200,
  body: {
            message : &quot;Course Registered.&quot;
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Retrieving an object in CloudBoost.&lt;/h2&gt;

&lt;p&gt;To retrieve a course, You need to write one more route. You need call the get function of the CloudQuery instance with the name of the course.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET /course/:name -&gt; Gets a course from CloudBoost Database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The NodeJS script to get item from CloudBoost is as follows : &lt;/p&gt;

&lt;p&gt;&lt;cloudboost-cloudobjects/getItem.js&gt;&lt;/p&gt;

&lt;p&gt;Response will be : &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  status: 200,
  body: {
            course : {
              _id : &quot;XXXXX&quot;,
                name: &quot;Name_of_course&quot;
            }
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Deleting an object from CloudBoost&lt;/h2&gt;

&lt;p&gt;To delete a course from CloudBoost, You need to write the DELETE route. You need call the &lt;code&gt;delete&lt;/code&gt; function of the &lt;code&gt;CloudObject&lt;/code&gt; instance with the key and value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DELETE /course/:name -&gt; Delete an item from the cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The NodeJS script to delete an item from CloudBoost is as follows : &lt;/p&gt;

&lt;p&gt;&lt;cloudboost-cloudobjects/deleteItem.js&gt;&lt;/p&gt;

&lt;p&gt;The response is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  status: 200,
  body: {
            message : &quot;Success&quot;
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Summing it up&lt;/h2&gt;

&lt;p&gt;As you can see, getting started with CloudBoost and NodeJS with Modulus is fairly simple. To learn more about the CloudBoost, you can check the documentation &lt;a href=&quot;https://tutorials.cloudboost.io&quot;&gt;here&lt;/a&gt;, and if you want to quickly get started with CloudBoost you can check the quickstart here  &lt;a href=&quot;https://www.cloudboost.io/quickstart&quot;&gt;https://www.cloudboost.io/quickstart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The full source code of the finished &lt;code&gt;app.js&lt;/code&gt; is below:&lt;/p&gt;

&lt;p&gt;&lt;cloudboost-cloudobjects/app.js&gt;&lt;/p&gt;</description><author>nawazdhandala@outlook.com  (Nawaz Dhandala)</author></item><item><title>Turbo Charge your NodeJS app with Cache</title><link>https://howtonode.org/cloudboost-cache</link><comments>https://howtonode.org/cloudboost-cache#disqus_thread</comments><pubDate>Tue, 24 Nov 2015 09:53:58 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/cloudboost-cache</guid><description>&lt;p&gt;Caching is great for your apps because it helps you to access data much faster when compared to the database. On the downside, querying is limited and it is very expensive (money-wise) because all the data is on the memory (which is expensive) instead of being on a disk. It is recommended that you use cache only for frequently accessed data.&lt;/p&gt;

&lt;h2&gt;Pre-Requisites&lt;/h2&gt;

&lt;h3&gt;CloudBoost&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cloudboost.io&quot;&gt;CloudBoost&lt;/a&gt; is a Platform as a Service designed to make it easier for NodeJS developers to build apps. It has a Database Service, Queues, Cache and more built into one simple API. &lt;/p&gt;

&lt;p&gt;CloudBoost is in the npm registry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install cloudboost
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;What will our application do?&lt;/h2&gt;

&lt;p&gt;To keep things simple, we're going to only tackle basic functionality. Our
application will support the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding an item to the cache (POST /item/:key)&lt;/li&gt;
&lt;li&gt;Getting an item from a cache (GET /item/:key)&lt;/li&gt;
&lt;li&gt;Deleting an item from the cache (DELETE /item/:key)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Lets get started!&lt;/h2&gt;

&lt;p&gt;You need to create a new app &lt;a href=&quot;https://www.cloudboost.io&quot;&gt;here&lt;/a&gt; before you get started. Create a new account and create a new app to get started. &lt;/p&gt;

&lt;p&gt;Once your app is created. You'll have your client key and a master key. Please make sure you use master key on the server. &lt;/p&gt;

&lt;p&gt;You need to initialize your new application. To initialize your app, &lt;/p&gt;

&lt;p&gt;&lt;cloudboost-cache/init.js&gt;&lt;/p&gt;

&lt;p&gt;This JavaScript program initializes your app with your App ID and Master Key. &lt;/p&gt;

&lt;h2&gt;Creating the package.json file&lt;/h2&gt;

&lt;p&gt;In order to manage dependencies, it is useful to create a &lt;code&gt;package.json&lt;/code&gt; file. This file
provides details on the packages you depend on so that you can more easily use &lt;code&gt;npm&lt;/code&gt; to manage
these dependencies.&lt;/p&gt;

&lt;p&gt;Create a file named &lt;code&gt;package.json&lt;/code&gt; in your &lt;code&gt;cloudboost-cache&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;cloudboost-cache/package.json&gt;&lt;/p&gt;

&lt;p&gt;The most important field in this JSON file is the &lt;code&gt;dependencies&lt;/code&gt; field. This field will allow
you to execute &lt;code&gt;npm install&lt;/code&gt; to install the dependencies for your project.&lt;/p&gt;

&lt;h2&gt;What is a Cache?&lt;/h2&gt;

&lt;p&gt;Cache is basically a key-value pair in memory. Every value has a key associated with it and the key is used to retrieve or delete an item. Data resides in memory and this is why it is really fast when compared to a traditional disk based database. CloudBoost Cache is distributed which means you can scale it to store any amount of data you want.&lt;/p&gt;

&lt;h2&gt;Adding an item to the cache&lt;/h2&gt;

&lt;p&gt;There is one route that we will need in order to add an item to the cache. You need call the set function of the CloudCache instance with the key and value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POST /item/:key -&gt; Adds an item to the cache and returns 200.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The NodeJS script to add an item to the cache is as follows:&lt;/p&gt;

&lt;p&gt;&lt;cloudboost-cache/addItem.js&gt;&lt;/p&gt;

&lt;p&gt;When an item is added to the cache, it stays in the cache until you delete it. It is important that you don’t rely on cache as your primary data store and use it to compliment your existing infrastructure because sometimes machine goes down and when it does all the data in the cache is deleted. &lt;/p&gt;

&lt;p&gt;You can use a primary database like MySQL or MongoDB to repopulate the cache. &lt;/p&gt;

&lt;p&gt;If I request with key as &quot;YourKey&quot; and item with &quot;YourItem&quot; then the response will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  status: 200,
  body: {
            key : 'YourKey', 
            item : 'YourItem'
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Retrieving an item from the cache.&lt;/h2&gt;

&lt;p&gt;To retrieve an item from the cache, You need to write one more route. You need call the get function of the CloudCache instance with the key and value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET /item/:key -&gt; Gets an item from the cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The NodeJS script to add an item to the cache is as follows:&lt;/p&gt;

&lt;p&gt;&lt;cloudboost-cache/getItem.js&gt;&lt;/p&gt;

&lt;p&gt;Remember : Querying an item from the cache will NOT delete it. It stays in the cache until you request it for deletion (which we'll see in the next section). &lt;/p&gt;

&lt;p&gt;If I request the item with key as &quot;YourKey&quot; then the response will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  status: 200,
  body: {
            key : 'YourKey', 
            item : 'YourItem'
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Deleting an item from the cache.&lt;/h2&gt;

&lt;p&gt;To delete an item from the cache, You need to write the DELETE route. You need call the deleteItem function of the CloudCache instance with the key and value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DELETE /item/:key -&gt; Delete an item from the cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The NodeJS script to add an item to the cache is as follows:&lt;/p&gt;

&lt;p&gt;&lt;cloudboost-cache/deleteItem.js&gt;&lt;/p&gt;

&lt;p&gt;The response is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  status: 200,
  body: {
            key : 'YourKey', 
            item : 'YourItem'
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Summing it up&lt;/h2&gt;

&lt;p&gt;As you can see, getting started with CloudBoost Cache and NodeJS is simple. To learn more about the cache, you can check the documentation &lt;a href=&quot;https://tutorials.cloudboost.io/?lang=en&amp;amp;category=cache&amp;amp;subcategory=basiccache&quot;&gt;here&lt;/a&gt;, and if you want to learn more about the CloudBoost API, you can check here &lt;a href=&quot;https://www.cloudboost.io/quickstart&quot;&gt;https://www.cloudboost.io/quickstart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The full source code of the finished &lt;code&gt;app.js&lt;/code&gt; is below:&lt;/p&gt;

&lt;p&gt;&lt;cloudboost-cache/app.js&gt;&lt;/p&gt;</description><author>nawazdhandala@outlook.com  (Nawaz Dhandala)</author></item><item><title>Node.js For Beginners. Deploy Your Blog to Heroku</title><link>https://howtonode.org/deploy-blog-to-heroku</link><comments>https://howtonode.org/deploy-blog-to-heroku#disqus_thread</comments><pubDate>Fri, 17 Apr 2015 05:53:35 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/deploy-blog-to-heroku</guid><description>&lt;p&gt;Error pages are not what typically appear on your screen when you're surfing the web, but when it happens it's so annoying! To see how servers work from within, we will build a simple web server by ourselves. We will use Node.js as a server part technology for that task. Then we'll use Heroku cloud application platform to turn this local server into a world wide server.&lt;/p&gt;

&lt;h2&gt;Why should I?&lt;/h2&gt;

&lt;p&gt;Hi, everyone! Don't know how about you, but my weekend was great!&lt;/p&gt;

&lt;p&gt;Friday evening. I came home from work, fed my cat, grabbed some pizza, and wanted to have some fun. What could be funnier than good old movies? Nothing, right? So, I went to &quot;IMDB Top 500&quot; to choose one. Then this happened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ItxlQvm.png&quot; alt=&quot;IMDB is down&quot; title=&quot;IMDB is down&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And I had to choose my evening movie randomly. It was &quot;Sharknado&quot;. Should I say that my Friday was ruined?&lt;/p&gt;

&lt;p&gt;To be honest, this is not what typically happens when you are surfing the web. But when it does... Man, it's so annoying! It's annoying, but we're curious, aren't we? And, for our curiosity to be satisfied, we will build a simple web server by ourselves. It will help us to see how it works (or how it won’t work) from within.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;How can I?&lt;/h2&gt;

&lt;p&gt;We will use &lt;a href=&quot;http://nodejs.org/&quot; title=&quot;Node.js home page&quot;&gt;Node.js&lt;/a&gt; for our project. Node.js is an open source, cross-platform runtime environment, which allows you to build server-side and networking applications. It's written in JavaScript and can be run within the Node.js runtime on any platform. First of all, of course, you need to install it. You'd better check the &lt;a href=&quot;http://nodejs.org/download/&quot; title=&quot;Node.js download page&quot;&gt;download page&lt;/a&gt; for more details. I'll wait until you finish, so don't worry. Is it done? Great! Now you can create your first web server. And it will be one of the easiest tasks in your life.&lt;/p&gt;

&lt;h3&gt;Pretty simple, but it's a server!&lt;/h3&gt;

&lt;p&gt;First of all, we need to create a JavaScript file. Let's name it server.js:&lt;/p&gt;

&lt;p&gt;&lt;deploy-blog-to-heroku/server.js&gt;&lt;/p&gt;

&lt;p&gt;It's simple. It's tiny. But it's a server! Let's make sure it's working. Run at your terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then check it in your browser. Your new server's address, as you may guess, is http://localhost:3000/
Mine is working. How about yours? Hope, it's working too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/idykoj7.png&quot; alt=&quot;localhost server&quot; title=&quot;Local server running&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, to be sure it's a web server and not just a piece of code that returns a single line of text, we'll use it as a server! You can check it with your smartphone. Let's suppose, your laptop's IP address within your local network is  192.168.1.101. You can connect to your server through the 3000th port (for this particular example) by typing http://192.168.1.101:3000/ in your browser. Works well in my case:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/emlOrX0.png&quot; alt=&quot;Server via smartphone&quot; title=&quot;Accesing server via smartphone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, it is a server! And we have evidence. What you got here is your own client-server model, which can fit in your bag! Take it any place you want! It will be a good idea to deploy our server online, so everyone could see it. &lt;/p&gt;

&lt;p&gt;But you should notice something, before we go further. Let's look more closely at our first Node server. This is an example of how Node provides you with non-blocking and event-driven behavior. Let me explain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.post('/some_requested_resource', function(data) {
  console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code performs a request for some resource. When the response comes back, an anonymous function is called. It contains the argument  &lt;code&gt;data&lt;/code&gt;, which is the data received from that request.&lt;/p&gt;

&lt;p&gt;So, Node allows you to use the so-called event loop, which works faster because of non-blocking behavior. For example, &lt;a href=&quot;http://nginx.org/&quot; title=&quot;ngnix home page&quot;&gt;nginx&lt;/a&gt; uses an event loop with asynchronous I/O. That's why it's fast as hell!&lt;/p&gt;

&lt;p&gt;This is not so hard to understand this conception in outline, so let's move along.&lt;/p&gt;

&lt;h3&gt;Make it worldwide&lt;/h3&gt;

&lt;p&gt;Works fine. But it works locally. WWW is for &quot;World Wide Web&quot; and we will turn your local server into a world wide server. We'll use &lt;a href=&quot;https://www.heroku.com&quot; title=&quot;Heroku&quot;&gt;Heroku&lt;/a&gt; cloud application platform for this. Heroku is a cloud platform as a service (cool long-bearded programmer guys call such type of things &quot;PaaS&quot;). It allows you to deploy your web server, so everyone could see how awesome you are as a web developer. First of all, you need to create an account on developer's site and install Heroku. This is not so hard. Just follow the instructions. There is also instruction on Heroku's site that can explain you how to run your first simple web server, which returns you the &quot;Hello, World!&quot; string. You can try it, but I think that it will be more interesting if we build our own web server from scratch. Sounds exciting, huh?&lt;/p&gt;

&lt;h3&gt;Look, mom! I'm developing!&lt;/h3&gt;

&lt;p&gt;First step after Heroku installation is to log in to the system from your computer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will leave Heroku for now. But we'll need it soon after we build our server. &lt;/p&gt;

&lt;p&gt;Now, the creation. It will be a simple blog with basic functionality. It will show you requested web pages and the error page in case of an error.&lt;/p&gt;

&lt;p&gt;Create your project directory. And then create the &lt;code&gt;server.js&lt;/code&gt; file inside of it.&lt;/p&gt;

&lt;p&gt;First of all, let's declare some variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var http = require(&quot;http&quot;);
var fs = require(&quot;fs&quot;);
var path = require(&quot;path&quot;);
var mime = require(&quot;mime&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first one will give you the key to Node's HTTP functionality.  The second one is for possibility to interact with the file system. The third one allows you to handle file paths. The last one allows you to determine a file's MIME-type. And it's not a part of Node.js, so we need to install third-party dependencies before using it. We need to create the &lt;code&gt;package.json&lt;/code&gt; file for that purpose. It will contain project related information, such as name, version, description, and so on. For our project we will use MIME-types recognition, because it's not enough to just send the contents of a file when you use HTTP. You also need to set the &lt;code&gt;Content-Type&lt;/code&gt; header with proper MIME-type. That's why we need this plug-in. &lt;/p&gt;

&lt;p&gt;Create the &lt;code&gt;package.json&lt;/code&gt; file  and fill it with proper information. Here's mine:&lt;/p&gt;

&lt;p&gt;&lt;deploy-blog-to-heroku/package.json&gt;&lt;/p&gt;

&lt;p&gt;There are &quot;name&quot;, &quot;version&quot;, &quot;description&quot;, and &quot;dependencies&quot; fields in it. The syntax is simple, as you can see. We added our &quot;mime&quot; plug-in and now it's time to download it. We'll use built-in Node Package Manager. Just run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will create &lt;code&gt;node_modules&lt;/code&gt; folder and place all the files inside of it. So, we resolve our dependencies and can return to our code. &lt;/p&gt;

&lt;p&gt;We will now create &lt;code&gt;send404()&lt;/code&gt; function. It will handle the sending of 404 error, which usually appears when requested file doesn't exist:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function send404(response) {
  response.writeHead(404, {&quot;Content-type&quot; : &quot;text/plain&quot;});
  response.write(&quot;Error 404: resource not found&quot;);
  response.end();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing sophisticated with this one. It returns plain text when server can't find a page.&lt;/p&gt;

&lt;p&gt;Now we will define &lt;code&gt;sendPage()&lt;/code&gt; function. It first writes the header and then sends the contents of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sendPage(response, filePath, fileContents) {
  response.writeHead(200, {&quot;Content-type&quot; : mime.lookup(path.basename(filePath))});
  response.end(fileContents);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the way we handle the MIME-types. &lt;/p&gt;

&lt;p&gt;Now we'll define how our server will handle responses. This function will return the content of the requested file or the 404 error otherwise: &lt;/p&gt;

&lt;p&gt;&lt;deploy-blog-to-heroku/handler.js&gt;&lt;/p&gt;

&lt;p&gt;And now it's time to create the HTTP server:&lt;/p&gt;

&lt;p&gt;&lt;deploy-blog-to-heroku/create-server.js&gt;&lt;/p&gt;

&lt;p&gt;Now we need to start our server. And here's the tricky part. Do you remember how we told the server to listen to the 3000th port in our first example? No? I'll remind you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http.createServer(&amp;lt;some code here&amp;gt;).listen(3000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can do it when we run our server locally. But Heroku sets a dynamically assigned port number to your app. That's why we need to handle all this mess with ports as it’s shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var port_number = server.listen(process.env.PORT || 3000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the &lt;code&gt;port_number&lt;/code&gt; variable later. For example, in &lt;code&gt;console.log()&lt;/code&gt; function to tell the user, which port is used. This is your homework for tomorrow.&lt;/p&gt;

&lt;p&gt;That's all we need to run our simple web server. Now it's time to create some content. We'll create the &lt;code&gt;public&lt;/code&gt; folder and two folders inside of it: &lt;code&gt;stylesheets&lt;/code&gt; and &lt;code&gt;images&lt;/code&gt;. We'll put all our HTML files into the &lt;code&gt;public&lt;/code&gt; folder.The  &lt;code&gt;stylesheets&lt;/code&gt; folder is for CSS files. And the &lt;code&gt;images&lt;/code&gt; one is for pictures.&lt;/p&gt;

&lt;p&gt;We need to create the &lt;code&gt;index.html&lt;/code&gt; file. It will determine our blog's exterior. Here's the code:&lt;/p&gt;

&lt;p&gt;&lt;deploy-blog-to-heroku/index.html&gt;&lt;/p&gt;

&lt;p&gt;Here you can see how the main page looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/3pSODQH.png&quot; alt=&quot;My simple blog&quot; title=&quot;My simple blog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You are free to create your own CSS file if you don't like our design.&lt;/p&gt;

&lt;p&gt;What we are interested in for now is how our server handles the 404 error. That's why we created two &quot;Read more&quot; links. The first one is connected with the actual HTML file within the &lt;code&gt;public&lt;/code&gt; folder. The second one is broken. Let's test how it works.&lt;/p&gt;

&lt;p&gt;To start your server locally run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then click the first link:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/6Z9OxuV.png&quot; alt=&quot;It works&quot; title=&quot;It works&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then return to the main page and check the second one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/iQBQKdM.png&quot; alt=&quot;enter image description here&quot; title=&quot;It's broken&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here's our 404 page.&lt;/p&gt;

&lt;p&gt;We tested our simple server locally and now is time to deploy it.&lt;/p&gt;

&lt;h3&gt;It's Heroku time!&lt;/h3&gt;

&lt;p&gt;Open your terminal within your project folder. For my Linux it's:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /path/to/my/project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Empty Git repository will be initialized in .git/ folder.&lt;/p&gt;

&lt;p&gt;Then run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command allows Git to track your files changes. &lt;/p&gt;

&lt;p&gt;Now commit your files to the initialized Git repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m &quot;Simple server functionality added&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We'll create our first Heroku application now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku create
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Heroku will generate a random name for your application. In my case it's enigmatic-citadel-9298. Don't worry. You can change it later.&lt;/p&gt;

&lt;p&gt;Now we can deploy our project. Every Heroku app starts with no branches and no code.  So, the first time we deploy our project, we need to specify a remote branch to push to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The application is now deployed. Ensure that at least one instance of the app is running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku ps:scale web=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, before we open it, it's time to choose a proper name for our first creation. I called it &lt;code&gt;myfirstserver&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku apps:rename myfirstserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything is done. You can try it now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroku open
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will open your Heroku project in your web browser. In this particular case, server address is https://myfirstserver.herokuapp.com/. Now you can share your first web application with any person you want.&lt;/p&gt;

&lt;h2&gt;Looking back&lt;/h2&gt;

&lt;p&gt;We've built our own web server using less than 50 lines of code. Not so hard, if you ask me. It's pretty simple, yes. But you can see, how average server works. It was a simple task. But you can combine Node.js with different technologies, such as CSS3 and HTML5, then spice it with some JavaScript functionality. There is really a lot of &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_JavaScript_libraries&quot;&gt;libraries and frameworks&lt;/a&gt; to take a look at.
Personally I started to dig into Webix, it's a relatively new library and is developed by a small software company from Eastern Europe. Samples of apps made with the library and Node.js: &lt;a href=&quot;http://xbsoftware.com/products/webix-crm&quot;&gt;CRM&lt;/a&gt; and &lt;a href=&quot;http://xbsoftware.com/products/ganttpro/&quot;&gt;task planner&lt;/a&gt;. Seems like you can create anything with the right client-side framework and Node.js.&lt;/p&gt;

&lt;p&gt;And, talking about Node.js as a technology...&lt;/p&gt;

&lt;h3&gt;...it will make your DIRTy job for you.&lt;/h3&gt;

&lt;p&gt;There is an acronym created to describe such type of applications Node.js was created for. It's DIRT. It means Data-Intensive Real-Time applications. Node allows a server to handle a lot of connections and work with a number of requests at the same time. And you don't need much memory for that. It's designed to be responsive and fast. Just like your web browser! So, it's useful when you need to create an application that will be able to respond instantly to a large number of users. And Node was built from scratch to provide you with such a functionality.&lt;/p&gt;

&lt;p&gt;Well, that's enough for today. Hope you liked it. See ya!&lt;/p&gt;</description><author>dhx.products@gmail.com (Lenny Witman)</author></item><item><title>Solving Coding Challenges with Streams</title><link>https://howtonode.org/coding-challenges-with-streams</link><comments>https://howtonode.org/coding-challenges-with-streams#disqus_thread</comments><pubDate>Sun, 22 Jun 2014 18:33:52 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/coding-challenges-with-streams</guid><description>&lt;p&gt;My first experience using Node.js for a programming challenge was agonizing. I devised a viable solution, but I couldn’t figure out an effective way to parse the input. The format was painfully simple: text piped via stdin. No problem, right? I burned over half my time on what should have been a minor detail, and I ended up with a fragile, zip-tie and duct tape hack that still makes me shudder.&lt;/p&gt;

&lt;p&gt;The experience inspired me to find an idiomatic approach to programming challenges. After working through more problems, I arrived at a pattern I hope others will find useful.&lt;/p&gt;

&lt;h2&gt;The pattern&lt;/h2&gt;

&lt;p&gt;The main idea is this: create a stream of problems, and transform each problem into a solution. The process consists of four steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Break the input into a stream of lines.&lt;/li&gt;
&lt;li&gt;Transform these lines into problem-specific data structures.&lt;/li&gt;
&lt;li&gt;Solve the problems.&lt;/li&gt;
&lt;li&gt;Format the solutions for output.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For those familiar with streams, the pattern looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var split = require(&quot;split&quot;); // dominictarr’s helpful line-splitting module

process.stdin
    .pipe(split()) // split input into lines
    .pipe(new ProblemStream()) // transform lines into problem data structures
    .pipe(new SolutionStream()) // solve each problem
    .pipe(new FormatStream()) // format the solutions for output
    .pipe(process.stdout); // write solution to stdout
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Our problem&lt;/h2&gt;

&lt;p&gt;To keep this tutorial grounded, let's solve a &lt;a href=&quot;https://code.google.com/codejam/contest/2929486/dashboard&quot;&gt;Google Code Jam challenge&lt;/a&gt;. The problem asks us to verify solutions to &lt;a href=&quot;http://en.wikipedia.org/wiki/Sudoku&quot;&gt;sudoku puzzles&lt;/a&gt;. The input looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2                  // number of puzzles to verify
3                  // dimensions of first puzzle (3 * 3 = 9)
7 6 5 1 9 8 4 3 2  // first puzzle
8 1 9 2 4 3 5 7 6
3 2 4 6 5 7 9 8 1
1 9 8 4 3 2 7 6 5
2 4 3 5 7 6 8 1 9
6 5 7 9 8 1 3 2 4
4 3 2 7 6 5 1 9 8
5 7 6 8 1 9 2 4 3
9 8 1 3 2 4 6 5 7
3                  // dimensions of second puzzle
7 9 5 1 3 8 4 6 2  // second puzzle
2 1 3 5 4 6 8 7 9
6 8 4 9 2 7 4 5 1
1 3 8 4 6 2 7 9 5
5 4 6 8 7 9 2 1 3
9 2 7 3 5 1 6 8 4
4 6 2 7 9 5 1 3 8
8 7 9 2 1 3 5 4 6
3 5 1 6 8 4 9 2 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The format of our output should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Case #1: Yes
Case #2: No
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &quot;Yes&quot; means that the puzzle has been solved correctly.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;p&gt;Our first step is to retrieve the input from stdin. In Node, stdin is a readable stream. Essentially, a readable stream sends data as soon as that data can be read (for a more thorough explanation, check out the &lt;a href=&quot;http://nodejs.org/api/stream.html#stream_class_stream_readable&quot;&gt;readable stream docs&lt;/a&gt;). The code below will echo whatever's written to stdin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;process.stdin.pipe(process.stdout);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;pipe&lt;/code&gt; method takes all data from a readable stream and writes it to a writable stream.&lt;/p&gt;

&lt;p&gt;It may not be evident from this code, but &lt;code&gt;process.stdin&lt;/code&gt; pipes data in large chunks of bytes; we’re interested in lines of text. To break these chunks into lines, we can pipe &lt;code&gt;process.stdin&lt;/code&gt; into dominictarr’s handy &lt;code&gt;split&lt;/code&gt; module.  &lt;code&gt;npm install split&lt;/code&gt;, then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var split = require(&quot;split&quot;);

process.stdin.setEncoding(&quot;utf8&quot;); // convert bytes to utf8 characters

process.stdin
     .pipe(split())
     .pipe(process.stdout);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Creating problems with transform streams&lt;/h2&gt;

&lt;p&gt;Now that we have a sequence of lines, we're ready to begin the real work. We're going to transform these lines into a series of 2D arrays representing sudoku puzzles. Then, we'll pipe each puzzle into another stream that will check if it's solved.&lt;/p&gt;

&lt;p&gt;Node core's transform streams provide exactly the abstraction we need. Unsurprisingly, a transform stream transforms data written to it and makes the result available as a readable stream. Confused? It'll become clearer as we continue.&lt;/p&gt;

&lt;p&gt;To create a transform stream, inherit &lt;code&gt;stream.Transform&lt;/code&gt; and invoke its constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Transform = require(&quot;stream&quot;).Transform;
var util = require(&quot;util&quot;);

util.inherits(ProblemStream, Transform); // inherit Transform

function ProblemStream () {
    Transform.call(this, { &quot;objectMode&quot;: true }); // invoke Transform's constructor
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll notice we're passing the &lt;code&gt;objectMode&lt;/code&gt; flag to the &lt;code&gt;Transform&lt;/code&gt; constructor. Streams normally accept only strings and buffers. We'd like ours to output a 2D array, so we need to enable object mode.&lt;/p&gt;

&lt;p&gt;Transform streams have two important methods &lt;code&gt;_transform&lt;/code&gt; and &lt;code&gt;_flush&lt;/code&gt;. &lt;code&gt;_transform&lt;/code&gt; is invoked whenever data is written to the stream. We’ll use this to transform a sequence of lines into a sudoku puzzle. &lt;code&gt;_flush&lt;/code&gt; is invoked when the transform stream has been notified that nothing else will be written to it. This function is helpful for completing any unfinished tasks.&lt;/p&gt;

&lt;p&gt;Let's block in our transform function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ProblemStream.prototype._transform = function (line, encoding, processed) {
     // TODO
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;_transform&lt;/code&gt; accepts three arguments. The first is the data written to the stream. In our case, it's a line of text. The second argument is the stream encoding, which we set to utf8. The final argument is a no argument callback used to signal that we've finished processing the input. &lt;/p&gt;

&lt;p&gt;There are two important things to keep in mind when implementing your &lt;code&gt;_transform&lt;/code&gt; function:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Invoking the &lt;code&gt;processed&lt;/code&gt; callback does not add anything to the output stream. It merely signals that we've finished processing the value passed to &lt;code&gt;_transform&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To output a value, use &lt;code&gt;this.push(value)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this in mind, let's return to the input.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2
3
7 6 5 1 9 8 4 3 2
8 1 9 2 4 3 5 7 6
3 2 4 6 5 7 9 8 1
1 9 8 4 3 2 7 6 5
2 4 3 5 7 6 8 1 9
6 5 7 9 8 1 3 2 4
4 3 2 7 6 5 1 9 8
5 7 6 8 1 9 2 4 3
9 8 1 3 2 4 6 5 7
3
7 9 5 1 3 8 4 6 2
2 1 3 5 4 6 8 7 9
6 8 4 9 2 7 4 5 1
1 3 8 4 6 2 7 9 5
5 4 6 8 7 9 2 1 3
9 2 7 3 5 1 6 8 4
4 6 2 7 9 5 1 3 8
8 7 9 2 1 3 5 4 6
3 5 1 6 8 4 9 2 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We immediately encounter a problem: our &lt;code&gt;_transform&lt;/code&gt; function is invoked once per line, but each of the first three lines has a different meaning. The first line describes the number of problems to solve, the second is how many lines constitute the next puzzle, and the next lines are the puzzle itself. Our stream needs to handle each of these lines differently.&lt;/p&gt;

&lt;p&gt;Fortunately, we can store state in transform streams:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Transform = require(&quot;stream&quot;).Transform;
var util = require(&quot;util&quot;);

util.inherits(ProblemStream, Transform);

function ProblemStream () {
    Transform.call(this, { &quot;objectMode&quot;: true });

    this.numProblemsToSolve = null;
    this.puzzleSize = null;
    this.currentPuzzle = null;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With these variables, we can track where we are in the sequence of lines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ProblemStream.prototype._transform = function (line, encoding, processed) {
    if (this.numProblemsToSolve === null) { // handle first line
        this.numProblemsToSolve = +line;
    }
    else if (this.puzzleSize === null) { // start a new puzzle
        this.puzzleSize = (+line) * (+line); // a size of 3 means the puzzle will be 9 lines long
        this.currentPuzzle = [];
    }
    else {
        var numbers = line.match(/\d+/g); // break line into an array of numbers
        this.currentPuzzle.push(numbers); // add a new row to the puzzle
        this.puzzleSize--; // decrement number of remaining lines to parse for puzzle

        if (this.puzzleSize === 0) {
            this.push(this.currentPuzzle); // we've parsed the full puzzle; add it to the output stream
            this.puzzleSize = null; // reset; ready for next puzzle
        }
    }
    processed(); // we're done processing the current line
};

process.stdin
    .pipe(split())
    .pipe(new ProblemStream())
    .pipe(new SolutionStream()) // TODO
    .pipe(new FormatStream()) // TODO
    .pipe(process.stdout); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a moment to review the code. Remember, &lt;code&gt;_transform&lt;/code&gt; is called for each line. The first line &lt;code&gt;_transform&lt;/code&gt; receives corresponds to the number of problems to solve. Since &lt;code&gt;numProblemsToSolve&lt;/code&gt; is null, that branch of the conditional will execute. The second line passed to &lt;code&gt;_transform&lt;/code&gt; is the size of the puzzle. We use that to set up the array that will contain our sudoku puzzle. Now that we know the size of the puzzle, the third line passed to &lt;code&gt;_transform&lt;/code&gt; starts the process of creating the data structure. Once the puzzle is built, we push the completed puzzle into the output end of the transform stream and prepare to create a new puzzle. This continues until we're out of lines to read.&lt;/p&gt;

&lt;h2&gt;Solve all the problems!&lt;/h2&gt;

&lt;p&gt;Having parsed and created our sudoku puzzle data structure, we can finally being solving the problem. &lt;/p&gt;

&lt;p&gt;The task of &quot;solving a problem&quot; can be reformulated to &quot;transforming a problem into a solution.&quot; That's exactly what our next stream will do.&lt;/p&gt;

&lt;p&gt;As before, we'll inherit &lt;code&gt;stream.Transform&lt;/code&gt; and enable object mode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;util.inherits(SolutionStream, Transform);

function SolutionStream () {
    Transform.call(this, { &quot;objectMode&quot;: true });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we'll define a &lt;code&gt;_transform&lt;/code&gt; method, which accepts a problem and produces a boolean:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SolutionStream.prototype._transform = function (problem, encoding, processed) {
    var solution = solve(problem);
    this.push(solution);
    processed();

    function solve (problem) {
        // TODO
        return false;
    }
};

process.stdin
    .pipe(split())
    .pipe(new ProblemStream())
    .pipe(new SolutionStream())
    .pipe(new FormatStream()) // TODO
    .pipe(process.stdout);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike the &lt;code&gt;ProblemStream&lt;/code&gt;, this stream produces an output for each input; &lt;code&gt;_transform&lt;/code&gt; executes once for every problem, and we need to solve every problem.&lt;/p&gt;

&lt;p&gt;All we need to do is write a function that determines whether or not a sudoku problem is solved. I leave that to you.&lt;/p&gt;

&lt;h2&gt;Prettify the output&lt;/h2&gt;

&lt;p&gt;Now that we've solved the problem, our last step is to format the output. And, you guessed it, we'll use yet another transform stream. &lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;FormatStream&lt;/code&gt; accepts a solution and transforms it into a string to pipe to &lt;code&gt;process.stdout&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Remember the output format?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Case #1: Yes
Case #2: No
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to track the problem number and transform the boolean solution into &quot;Yes&quot; or &quot;No.&quot;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;util.inherits(FormatStream, Transform);
function FormatStream () {
    Transform.call(this, { &quot;objectMode&quot;: true });

    this.caseNumber = 0;
}

FormatStream.prototype._transform = function (solution, encoding, processed) {
    this.caseNumber++;

    var result = solution ? &quot;Yes&quot; : &quot;No&quot;;

    var formatted = &quot;Case #&quot; + this.caseNumber + &quot;: &quot; + result + &quot;\n&quot;;

    this.push(formatted);
    processed();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, connect the &lt;code&gt;FormatStream&lt;/code&gt; to our pipeline, and we're done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;process.stdin
    .pipe(split())
    .pipe(new ProblemStream())
    .pipe(new SolutionStream())
    .pipe(new FormatStream())
    .pipe(process.stdout);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nimbus154/node-coding-challenge-pattern&quot;&gt;Check out the complete code on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;One final note&lt;/h2&gt;

&lt;p&gt;The biggest win of using &lt;code&gt;pipe&lt;/code&gt; is that you can reuse your code with any readable and writable stream. If your problem source is over the network, as in the DEF CON qualifier, replace &lt;code&gt;process.stdin&lt;/code&gt; and &lt;code&gt;process.stdout&lt;/code&gt; with network streams, and everything should &quot;just work.&quot;&lt;/p&gt;

&lt;p&gt;You'll need to tune this approach slightly for each problem, but I hope it provides a good starting point. &lt;/p&gt;</description><author>nimbus154@gmail.com (Chad Wyszynski)</author></item><item><title>Mocking Dependencies using [rewire]</title><link>https://howtonode.org/mocking-private-dependencies-using-rewire</link><comments>https://howtonode.org/mocking-private-dependencies-using-rewire#disqus_thread</comments><pubDate>Tue, 18 Feb 2014 01:05:41 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/mocking-private-dependencies-using-rewire</guid><description>&lt;p&gt;Despite all my efforts to try to encapsulate some of my code into my modules, I was always founding myself exposing too much just for unit testing purpose. And even thought, it was often very complex to mock out some of the external libraries I was using.
That was before I found the &lt;a href=&quot;https://npmjs.org/package/rewire/&quot;&gt;rewire&lt;/a&gt; library.
As they say, it only: &quot;adds a special setter and getter to modules so you can modify their behaviour for better unit testing&quot;.&lt;/p&gt;

&lt;p&gt;This is all you need!&lt;/p&gt;

&lt;h3&gt;Let's see an example&lt;/h3&gt;

&lt;p&gt;I have a very simple controller like this:&lt;/p&gt;

&lt;p&gt;&lt;mocking-private-dependencies-using-rewire/user-controller.js&gt;&lt;/p&gt;

&lt;p&gt;In my test driven development all I want to test is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;this method will call &lt;code&gt;getUsers&lt;/code&gt; on &lt;code&gt;userService&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if the callback receive an error then it will call &lt;code&gt;next&lt;/code&gt; passing the error&lt;/li&gt;
&lt;li&gt;else &lt;code&gt;json&lt;/code&gt; is called on the response with the users as arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Setting up a mock is easy&lt;/strong&gt; (I use &lt;a href=&quot;https://npmjs.org/package/sinon/&quot;&gt;sinon&lt;/a&gt; but any mocking will do it):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// given
var userController = require('./user-controller'),
    userServiceMock = {};

// and
userServiceMock.getUser = sinon.stub().callsArgWith(1, null, [{id: 'user1'}, {id: 'user2'}]);

// when
userController.allUsers();

// then
userServiceMock.getUser.calledOnce.should.equal(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But how can I &lt;strong&gt;inject the mock instead of the real user service&lt;/strong&gt; ?&lt;/p&gt;

&lt;p&gt;=&gt; &lt;strong&gt;Rewire&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Instead of require the user-controller I'm using rewire:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var userController = rewire('./user-controller')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I can get and set any properties on the module. So I can do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;before(function(){
    userController.__set__({
        'userService': userServiceMock
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et voila!&lt;/p&gt;

&lt;p&gt;Here is the full test for the previous controller:&lt;/p&gt;

&lt;p&gt;&lt;mocking-private-dependencies-using-rewire/user-controller.spec.js&gt;&lt;/p&gt;</description><author>caroline.bourdeu@gmail.com (Caroline BDA)</author></item><item><title>Generators vs Fibers</title><link>https://howtonode.org/generators-vs-fibers</link><comments>https://howtonode.org/generators-vs-fibers#disqus_thread</comments><pubDate>Mon, 02 Sep 2013 17:08:56 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/generators-vs-fibers</guid><description>&lt;p&gt;Both ES6 generators and &lt;a href=&quot;https://github.com/laverdet/node-fibers&quot;&gt;node-fibers&lt;/a&gt; can be used to block a coroutine while waiting on some I/O without blocking the entire process.&lt;/p&gt;

&lt;p&gt;This means that you can wait for an I/O result within your code but still have the performance benefits of the single-threaded,  non-blocking I/O model you all know and love.&lt;/p&gt;

&lt;p&gt;Both can do this for arbitrarily deep call stacks. The main difference between the capabilities of the two is how explicit the syntax is.  It's the classic battle between wanting to be safe while wanting to be flexible.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Generators - Safe, but Annoyingly Explicit&lt;/h2&gt;

&lt;p&gt;In code that uses generators there is a technique whereby a library will yield continuables or promises and the generator runner will pass in the callback, suspend the generator body, and resume when the callback gets called.&lt;/p&gt;

&lt;p&gt;I will use my library, &lt;a href=&quot;https://github.com/creationix/gen-run&quot;&gt;gen-run&lt;/a&gt;, in these examples because it's very simple and is the one I know best.  There are many others I link to in the gen-run &lt;a href=&quot;https://github.com/creationix/gen-run/blob/master/README.md#credits&quot;&gt;credits&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;The Server&lt;/h3&gt;

&lt;p&gt;We'll start out by writing a simple HTTP server that uses generators to power the request handling logic.  It could look something like this.&lt;/p&gt;

&lt;p&gt;&lt;generators-vs-fibers/generator-server.js#server&gt;&lt;/p&gt;

&lt;h3&gt;The Handler&lt;/h3&gt;

&lt;p&gt;Initially when we write our programs, we often use canned data or otherwise have less I/O to perform to accomplish the given task.  In this example, we're using a simple module that returns the result directly.&lt;/p&gt;

&lt;p&gt;&lt;generators-vs-fibers/query.js&gt;&lt;/p&gt;

&lt;p&gt;Now our main app logic can be written.  Remember that the server expects us to be in a generator so let's write the logic as a generator.&lt;/p&gt;

&lt;p&gt;We want each result to be tagged with the request count as it came into the server.  A simple shared variable that gets incremented at the beginning of each request should do the trick.&lt;/p&gt;

&lt;p&gt;&lt;generators-vs-fibers/generator-server.js#handler&gt;&lt;/p&gt;

&lt;p&gt;You can call this with as many concurrent requests as you want.  Each will have the correct &lt;code&gt;requestCount&lt;/code&gt; because of run-to-finish semantics of JavaScript.  Even inside the bodies of generators, arbitrary function calls can't suspend your code.&lt;/p&gt;

&lt;h3&gt;Modified Handler&lt;/h3&gt;

&lt;p&gt;Now suppose that down the line, our query function needed to actually do things and perform some I/O.&lt;/p&gt;

&lt;p&gt;First we'll change the &lt;code&gt;query&lt;/code&gt; function to return a continuable and/or accept a callback.  This is a common pattern for many node libraries that need to perform I/O.&lt;/p&gt;

&lt;p&gt;&lt;generators-vs-fibers/continuable-query.js&gt;&lt;/p&gt;

&lt;p&gt;We thought ahead and put the body of our handler in a generator to ease the transition, but that function call needs to change.  The query function now returns a continuable or expects a callback last.  Our handler function can now look like this.&lt;/p&gt;

&lt;p&gt;&lt;generators-vs-fibers/generator-server.js#continuable-handler&gt;&lt;/p&gt;

&lt;p&gt;Now we have that big bright &lt;code&gt;yield&lt;/code&gt; keyword in there.  We can see plainly that our &lt;code&gt;requestCount&lt;/code&gt; variable is in danger of a race condition.  What happens if a second request comes in while we're still waiting on the query from the first request?  They will clobber each other and both requests will be marked as #3, that's what!&lt;/p&gt;

&lt;p&gt;Good thing we were forced to change our calling syntax to help us see the danger.&lt;/p&gt;

&lt;h3&gt;Modified Again&lt;/h3&gt;

&lt;p&gt;Another transform we could have done is re-write &lt;code&gt;query&lt;/code&gt; as a generator itself allowing for deep coroutines with &lt;code&gt;function*&lt;/code&gt; at every definition and &lt;code&gt;yield*&lt;/code&gt; at every call.&lt;/p&gt;

&lt;p&gt;&lt;generators-vs-fibers/generator-query.js&gt;&lt;/p&gt;

&lt;p&gt;In this case we insert a delegating &lt;code&gt;yield*&lt;/code&gt; instead of a plain &lt;code&gt;yield&lt;/code&gt; and it works the same as the previous change.&lt;/p&gt;

&lt;p&gt;&lt;generators-vs-fibers/generator-server.js#generator-handler&gt;&lt;/p&gt;

&lt;p&gt;In summary, generators allow for all kinds of nice tricks where you can block on I/O without actually blocking the process, however these require invasive changes to your code (much the same as callbacks act today).&lt;/p&gt;

&lt;h2&gt;Fibers - Powerful, but Flexible&lt;/h2&gt;

&lt;p&gt;Long before generators landed in V8 and node.js, Marcel released a library known as &lt;a href=&quot;https://github.com/laverdet/node-fibers&quot;&gt;node-fibers&lt;/a&gt;.  This clever little library allows you to use full coroutines in any version of node that the addon compiles against.&lt;/p&gt;

&lt;p&gt;I'll repeat the same examples here, but using fibers instead of generators for easy comparison.&lt;/p&gt;

&lt;h3&gt;The Server&lt;/h3&gt;

&lt;p&gt;Our server is slightly different because the fiber API is quite different than the gen-run and generator APIs.&lt;/p&gt;

&lt;p&gt;&lt;generators-vs-fibers/fiber-server.js#server&gt;&lt;/p&gt;

&lt;p&gt;We create a fiber for our code to run in.  With fibers there is no distinction between generators, iterators, or normal functions.  They are all just vanilla functions.  Also this means there is no &lt;code&gt;yield&lt;/code&gt; or &lt;code&gt;yield*&lt;/code&gt;.  Only normal function calls.&lt;/p&gt;

&lt;p&gt;Also within the body of the fiber, &lt;code&gt;try..catch&lt;/code&gt; works just like it does with sync code because the code &lt;em&gt;is&lt;/em&gt; blocking within this fiber.&lt;/p&gt;

&lt;h3&gt;The Handler&lt;/h3&gt;

&lt;p&gt;We'll start out again with a simple handler.  We'll use the same exact &lt;code&gt;query&lt;/code&gt; function from before and the same &lt;code&gt;handleRequest&lt;/code&gt; except this one is a plain function.&lt;/p&gt;

&lt;p&gt;&lt;generators-vs-fibers/fiber-server.js#handler&gt;&lt;/p&gt;

&lt;p&gt;The world is great, everything works and there is no race condition because nobody actually ever suspends the fiber.&lt;/p&gt;

&lt;h3&gt;The Change&lt;/h3&gt;

&lt;p&gt;Now again, imagine that some time down the line, the authors of the query function need to perform some I/O to accomplish its task.  Well in this case they know they are running inside a fiber. (And even if they didn't know this, they could detect it).&lt;/p&gt;

&lt;p&gt;So the only code change required to make query block on I/O is local to the query function.&lt;/p&gt;

&lt;p&gt;&lt;generators-vs-fibers/fiber-query.js&gt;&lt;/p&gt;

&lt;p&gt;That's it.  The rest of the code will continue to work as before.  You test it locally and everything works great.  You didn't have to change the signature of any other function that consumed this library.&lt;/p&gt;

&lt;p&gt;Then you push this code to production where the server hits a higher concurrency load and people start complaining that their &lt;code&gt;requestCount&lt;/code&gt;s aren't always accurate.  The problem you discover after many hours of painful debugging is that the &lt;code&gt;query&lt;/code&gt; function back in &lt;code&gt;handleRequest&lt;/code&gt; that didn't need to be changed syntacticly did change behavior.  It suspended the fiber and let other concurrent requests clobber the shared &lt;code&gt;requestCount&lt;/code&gt; variable.&lt;/p&gt;

&lt;h2&gt;Lesson Learned&lt;/h2&gt;

&lt;p&gt;Next time you complain that adding an async feature to a library causes all consumers of this API to be changed as well, remember that along with that pain is protection.  You can't have the protection without the pain.&lt;/p&gt;

&lt;p&gt;Both styles of coroutines are powerful with unique strengths and weaknesses.&lt;/p&gt;

&lt;p&gt;Safety or flexibility, choose one.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Simplifying Chores with Grunt</title><link>https://howtonode.org/simplifying-chores-with-grunt</link><comments>https://howtonode.org/simplifying-chores-with-grunt#disqus_thread</comments><pubDate>Mon, 05 Aug 2013 08:54:00 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/simplifying-chores-with-grunt</guid><description>&lt;p&gt;Often in various stages of development we perform repetitive tasks e.g minification, compilation, unit testing, linting and we would definitely want to automate them. But each of these task require different configurations or installations. What if there is a system where in we can easily configure and run these tasks from a single place. Also it would be really nice if it gels well with Node.js system. Meet &lt;a href=&quot;http://gruntjs.com&quot;&gt;Grunt&lt;/a&gt; a task runner for simplifying chores. Apart from being simple Grunt ecosystem is huge and it's growing every day with literally hundreds of plugins to choose from.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that I will be using grunt task/plugin interchangeably which means the same.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;In order to get started first we need to install &lt;strong&gt;grunt-cli&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g grunt-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install &lt;strong&gt;grunt&lt;/strong&gt; command in your system. Note that this is different from the grunt task runner. Notice that we are installing grunt-cli in global scope. After this install grunt in your package.json directory using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install grunt --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install grunt task runner and add it to &lt;a href=&quot;https://npmjs.org/doc/json.html#devDependencies&quot;&gt;devDependencies&lt;/a&gt; section of your package.json.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can also install grunt by adding it to devDependency of package.json manually and run npm install&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Why is grunt-cli required&lt;/h2&gt;

&lt;p&gt;grunt-cli is used to run the local grunt task runner using node.js require() system. This helps us in running grunt task runner from any sub-directory of your project. The job of the grunt-cli is simple: run the version of grunt which has been installed next to a &lt;strong&gt;Gruntfile&lt;/strong&gt; i.e under the &lt;strong&gt;node_modules&lt;/strong&gt; directory.&lt;/p&gt;

&lt;h2&gt;What is a Gruntfile&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Gruntfile&lt;/strong&gt; is where we define configurations for the task which we are planning to run. Think of it as what package.json is for npm. Gruntfile is always placed at the top level of project along with package.json. Below is a directory structure showing the Gruntfile for project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/simplifying-chores-with-grunt/grunt.png&quot; alt=&quot;Gruntfile&quot; title=&quot;Directory structure showing Gruntfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please note that though we call it Gruntfile name of the file will be &lt;strong&gt;Gruntfile.js&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Installing a grunt task&lt;/h2&gt;

&lt;p&gt;Best way to learn something is by example. Lets take a very common task of minifying set of css files and then combine them to a single file.&lt;/p&gt;

&lt;p&gt;As I have mentioned earlier grunt has an excellent repository of plugins to perform these tasks, which can be found on &lt;a href=&quot;http://gruntjs.com/plugins&quot;&gt;http://gruntjs.com/plugins&lt;/a&gt;. Doing a quick search on this page gives &lt;a href=&quot;https://npmjs.org/package/grunt-contrib-cssmin&quot;&gt;cssmin&lt;/a&gt; as one of the best plugin for it. To see installation and configuration instructions, head over to the plugins &lt;a href=&quot;https://npmjs.org/package/grunt-contrib-cssmin&quot;&gt;npm page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As given in the npm page of &lt;a href=&quot;https://npmjs.org/package/grunt-contrib-cssmin&quot;&gt;cssmin&lt;/a&gt; install it with the given below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install grunt-contrib-cssmin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have successfully installed a grunt task, its time to use it in Gruntfile.&lt;/p&gt;

&lt;h2&gt;Using a task in Gruntfile&lt;/h2&gt;

&lt;p&gt;Since we have installed our task into our project its time to dive into Gruntfile and use the task in it. Below is the Gruntfile for our task. Most of the parts could be understood with the comments given.&lt;/p&gt;

&lt;p&gt;&lt;simplifying-chores-with-grunt/Gruntfile.js&gt;&lt;/p&gt;

&lt;p&gt;Note that we have to wrap your Gruntfile in &lt;code&gt;module.exports&lt;/code&gt;. Lets understand the various important parts of this Gruntfile.&lt;/p&gt;

&lt;h2&gt;Understanding parts of Gruntfile&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;grunt.initConfig&lt;/strong&gt;&lt;/code&gt; - Block where we define configurations specific to a plugin. In the example above i have shown configuration for 1 plugin but there could be more than 1 in it. e.g&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cssmin: {
  // task/plugin 1
},
uglify: {
  // task/plugin 2
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;grunt.loadNpmTasks&lt;/strong&gt;&lt;/code&gt; - This is where we load the task/plugin.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;grunt.registerTask&lt;/strong&gt;&lt;/code&gt; - This is where we register the task. I am going to explain this part a bit more in the next section where we will learn to run this task of ours.&lt;/p&gt;

&lt;h2&gt;Running a grunt task&lt;/h2&gt;

&lt;p&gt;Before diving into how to run a grunt task lets understand &lt;code&gt;grunt.registerTask&lt;/code&gt; in depth. Recall from our Gruntfile below block of code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Default task(s).
// This is the task which runs if we just execute grunt command
  grunt.registerTask('default', ['cssmin']);
  // cssmin task
  // This is a custom task which runs if we execute grunt buildcss command
  grunt.registerTask('buildcss', ['cssmin']);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A Gruntfile is executed either by running &lt;code&gt;&lt;strong&gt;grunt&lt;/strong&gt;&lt;/code&gt; command or &lt;code&gt;&lt;strong&gt;grunt task-name&lt;/strong&gt;&lt;/code&gt;. In our Gruntfile when we say &lt;code&gt;grunt.registerTask('default', ['cssmin'])&lt;/code&gt;, this is what is going to run when we only type &lt;code&gt;&lt;strong&gt;grunt&lt;/strong&gt;&lt;/code&gt; command and that's why name of the task is &lt;strong&gt;default&lt;/strong&gt; . Also note that second argument to &lt;code&gt;grunt.registerTask&lt;/code&gt; is an array of tasks to be run.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grunt.registerTask('buildcss', ['cssmin']) &lt;/code&gt; defines a new custom task and perform cssmin. We can also add some other task to it. This is what is going to run when we type &lt;code&gt;&lt;strong&gt;grunt buildcss&lt;/strong&gt;&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;To summarize&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grunt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Runs default grunt task defined with &lt;code&gt;grunt.registerTask('default', ['cssmin'])&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grunt buildcss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Runs custom grunt task defined with &lt;code&gt;grunt.registerTask('buildcss', ['cssmin'])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running any of these commands should generate our minified file with the following output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/simplifying-chores-with-grunt/output.png&quot; alt=&quot;Output&quot; title=&quot;Output on running Gruntfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In both the cases, second argument to &lt;code&gt;grunt.registerTask&lt;/code&gt; can have more than one task. For example if we have JavaScript minification task &lt;a href=&quot;https://npmjs.org/package/grunt-contrib-uglify&quot;&gt;uglify&lt;/a&gt; in our Gruntfile with default &lt;code&gt;grunt.registerTask&lt;/code&gt; as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grunt.registerTask('default', ['cssmin','uglify'])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tutorial has just touched base on Grunt but there are in-numerous things which we can do using it. I use Grunt for css/js minification, templates compilation, appending cache busting param, string replacements etc. Grunt community has built tasks for almost everything we do. So &lt;a href=&quot;http://gruntjs.com/plugins&quot;&gt;check them out&lt;/a&gt; and use them to automate your chores.&lt;/p&gt;</description><author>swapmis1084@gmail.com (Swapnil Mishra)</author></item><item><title>Daddy, what's a stream?</title><link>https://howtonode.org/streams-explained</link><comments>https://howtonode.org/streams-explained#disqus_thread</comments><pubDate>Sat, 27 Apr 2013 20:33:31 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/streams-explained</guid><description>&lt;p&gt;At dinner tonight, I was discussing that I've been thinking about streams and how to simplify them in JavaScript.  My 7-year-old perked up and asked me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Daddy, what's a stream?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I explained that a stream is like a line of water along the ground.  If you dig a trench on a hill and fill up the high end using a water hose the water will run down the hill along the trench.  This is one of his favorite hobbies in the back yard, so he understood completely.  I explained that when new water is added to the top, it eventually makes its way to the bottom of the stream.  The end where water comes from is called the &lt;strong&gt;upstream&lt;/strong&gt; and the other end is the &lt;strong&gt;downstream&lt;/strong&gt;.  Gravity pulls water down.&lt;/p&gt;

&lt;h2&gt;Back Pressure&lt;/h2&gt;

&lt;p&gt;Satisfied that I explained the concept, I continued by saying that I've been thinking a lot about how back pressure should work.  Then he asked:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Daddy, what's back pressure?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I thought for a moment and thought of a water hose.  I explained to him that in a water hose, if you kink the end of the hose while the water is on, eventually it will fill up and once the pressure is high enough, the house will stop putting more water into the hose.  The tap will feel the &lt;strong&gt;pressure&lt;/strong&gt; all the way from the kink &lt;strong&gt;back&lt;/strong&gt; to the source.&lt;/p&gt;

&lt;p&gt;Now imagine back to the original example of a trench in the ground.  If you build a large dam at the end, the source won't feel &lt;strong&gt;back pressure&lt;/strong&gt;.  Rather when the trench fills up, the water will spill out flooding the nearby plains.  This is usually a bad thing.&lt;/p&gt;

&lt;h2&gt;Pull Streams&lt;/h2&gt;

&lt;p&gt;I then resumed explaining to my wife about my work.  I explained that &lt;strong&gt;pull streams&lt;/strong&gt; are much easier to implement back pressure for than &lt;strong&gt;push streams&lt;/strong&gt;.  Then my son asked:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What's that mean?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I could see that I would have to explain everything I talked about.  He was in that mood where he wanted to understand everything adults talk about.&lt;/p&gt;

&lt;p&gt;I said that the example with the water hose and the trench in the ground are &lt;strong&gt;push streams&lt;/strong&gt;.  The water is pushed into the upstream side and flows downstream because of the positive pressure.  A &lt;strong&gt;pull stream&lt;/strong&gt; is more like a straw.  With a straw, you don't have to worry about flooding because the bottom of the straw will normally not push water up the straw on its own.  When the person sucks on the top of the straw it creates a vacuum that pulls water from the bottom of the straw.  New water only enters the straw when it's asked for by the top of the straw.&lt;/p&gt;

&lt;p&gt;I then went on to explain how different straw lengths and thicknesses affect how the straw works.  With a larger straw it takes longer to get at the initial bit of drink because all the space needs to be filled first.  When you do finally get drink, it's not the liquid that just entered the bottom you're drinking, but the water that was first buffered into the straw.&lt;/p&gt;

&lt;h2&gt;Codecs&lt;/h2&gt;

&lt;p&gt;The tricky part of what I've been working on today is how to express codecs simply while still preserving back pressure.  I looked over to Jack and he was still listening intently so I tried to explain what a &lt;strong&gt;codec&lt;/strong&gt; is.&lt;/p&gt;

&lt;p&gt;It stands for encode and decode.  It converts a stream from one type to another.  I could see I had lost the 7-year-old, so I decided to explain it to my wife instead.&lt;/p&gt;

&lt;p&gt;My favorite part of physics was dimensional analysis.  If you knew the units that the answer expected and knew the units you started with, then pick the formula that had the difference in units.  If you have the proper units when you were done, it was probably correct. (This is probably how users of strictly typed programming languages feel about their compiler.)&lt;/p&gt;

&lt;p&gt;But my second favorite part of physics was the actual conversion process between units.  You would start out in one unit, apply a transformation and end up with another representation of the same thing.&lt;/p&gt;

&lt;p&gt;Here is an example converting 100 meters per second to miles per hour using several conversion constants:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          3.28084 feet    1 mile     60 seconds   60 minutes
100 m/s x ------------ x --------- x ---------- x ---------- = 223.7 Mph
            1 meter      5280 feet    1 minute      1 hour
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stream codecs are just like the unit conversions, except they work on streams of data instead of scalar values.  The new stream after running through the codec is the same data, just represented a different way.&lt;/p&gt;

&lt;p&gt;My son is learning how to read, so I decided to explain codecs using reading. A sentence is composed of many words.  The sentence can be viewed as a stream of words where each event is a word.  Now suppose I want a new stream that is a list of all the letters in the sentence.  This codec would consume word events and emit letter events.  The problem I quickly saw with this was that the reverse conversion didn't work.  I would have to emit a space after each word to know how to re-form the words out of the stream of letters.&lt;/p&gt;

&lt;p&gt;Then I realized that this could be a nested stream.  Instead of creating a new flat stream of letters, I could convert each word into a new stream of letters.  In fact, it's nested streams all the way up.  Letters contain strokes, words contain letters, sentences contain words, paragraphs contain sentences, sections contain paragraphs, chapters contain sections, etc...&lt;/p&gt;

&lt;p&gt;Obviously I had gone off the theoretical deep end here.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But what does this have to do with computers?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In computers we have streams of data.  For example, if you want to stream a movie from a server to your smart phone, the movie is the stream.  Now usually, the server can read from the local disk much faster than the phone can download the data over its 3G connection.  If you don't program a way for the disk source to feel the &lt;strong&gt;back pressure&lt;/strong&gt; from the slow mobile connection, it will read the data full-speed and flood the server's memory by buffering everything.  This is bad for servers with lots of clients and/or large media files.&lt;/p&gt;

&lt;p&gt;One way for the media server to feel the &lt;strong&gt;back pressure&lt;/strong&gt; is to use a &lt;strong&gt;pull stream&lt;/strong&gt;.  But care needs to be taken to keep things running smoothly.  The stream needs to have an appropriate level of buffering along the path so that just like the straw you don't have to wait the full length of the straw to get a single chunk.  If the stream is constantly full, then the phone gets the chunks as fast as it asks for them with no latency other than the initial buffering.&lt;/p&gt;

&lt;p&gt;We have codecs every time we convert a network or file stream from one format to another.  On the network there is IP, TCP, HTTP, JSON, and other codecs layered on top of each other.  Sometimes there are nested streams.  For example, this week I was prototyping a new HTTP codec for node.js and hit a snag because the TCP connection stream emits request events, but within the request event is a body stream with its own data events.  Preserving proper &lt;strong&gt;back pressure&lt;/strong&gt; inside that nested stream is tricky and my nice little prototype APIs didn't work anymore.&lt;/p&gt;

&lt;p&gt;I eventually figured out what works for me, but that's content for another more concrete post.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Content Syndication with Node.js</title><link>https://howtonode.org/content-syndication-with-node</link><comments>https://howtonode.org/content-syndication-with-node#disqus_thread</comments><pubDate>Thu, 28 Feb 2013 22:30:00 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/content-syndication-with-node</guid><description>&lt;p&gt;Web syndication is a must for any Website wishing to share some entries easily to other systems. Better known under their format name like &lt;a href=&quot;http://en.wikipedia.org/wiki/RSS_(file_format&quot;&gt;RSS&lt;/a&gt;) or &lt;a href=&quot;http://en.wikipedia.org/wiki/Atom_(standard&quot;&gt;Atom&lt;/a&gt;), they can be quite time consuming to generate without a module handling all their formating. Thanks to the power of Node's package manager &lt;a href=&quot;https://npmjs.org/&quot;&gt;NPM&lt;/a&gt;, you can generate yours in no time.&lt;/p&gt;

&lt;h2&gt;Installing the feed wrapper&lt;/h2&gt;

&lt;p&gt;Before we start, head to your project folder and install the latest version of the module &lt;a href=&quot;https://github.com/jpmonette/feed&quot;&gt;feed&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install feed
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Building the feed&lt;/h2&gt;

&lt;p&gt;First, we need to initialize a new &lt;code&gt;Feed&lt;/code&gt; object. When you initialize the object, you must provide general information related to your Web syndication feed. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Require module
var Feed = require('feed');

// Initializing feed object
var feed = new Feed({
    title:          'My Feed Title',
    description:    'This is my personnal feed!',
    link:           'http://example.com/',
    image:          'http://example.com/logo.png',
    copyright:      'Copyright © 2013 John Doe. All rights reserved',

    author: {
        name:       'John Doe',
        email:      'john.doe@example.com',
        link:       'https://example.com/john-doe'
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, you might want to identify your feed thematic. Both &lt;a href=&quot;http://en.wikipedia.org/wiki/RSS_(file_format&quot;&gt;RSS&lt;/a&gt;) and &lt;a href=&quot;http://en.wikipedia.org/wiki/Atom_(standard&quot;&gt;Atom&lt;/a&gt;) formats offer the possibility to identify one or multiple categories. Again, this is super simple to add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;feed.category('Node.js');
feed.category('JavaScript');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Third, every feed require at least one item (better known as an entry). To do so, you have to use the function &lt;code&gt;item&lt;/code&gt; and provide the proper object. Of course, if you are running a content Website (like a blog!), chances are that you have multiple items. To populate your feed, use a &lt;code&gt;for&lt;/code&gt; loop as followed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(var key in posts) {
    feed.item({
        title:          posts[key].title,
        link:           posts[key].url,
        description:    posts[key].description,
        date:           posts[key].date
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, everything is ready to generate your &lt;a href=&quot;http://en.wikipedia.org/wiki/RSS_(file_format&quot;&gt;RSS&lt;/a&gt;) or Atom feed. Use the function &lt;code&gt;render&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var output = feed.render();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the implicit way of calling the &lt;code&gt;render&lt;/code&gt; request. By default, it will render a &lt;a href=&quot;http://en.wikipedia.org/wiki/RSS_(file_format&quot;&gt;RSS&lt;/a&gt;) feed. You an also use the explicit way, allowing you to select between &lt;a href=&quot;http://en.wikipedia.org/wiki/RSS_(file_format&quot;&gt;RSS&lt;/a&gt;) or &lt;a href=&quot;http://en.wikipedia.org/wiki/Atom_(standard&quot;&gt;Atom&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Rendering a RSS 2.0 valid feed
feed.render('rss-2.0');

// Rendering an Atom 1.0 valid feed
feed.render('atom-1.0');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, it's that simple!&lt;/p&gt;

&lt;h2&gt;Using with Express.js&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;feed&lt;/code&gt; with &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express.js&lt;/a&gt; is super easy. Let's say you have an &lt;code&gt;app.get()&lt;/code&gt; method routing the path &lt;code&gt;/rss&lt;/code&gt;. To send your feed, render your feed like we mentionned previously. After, send the result by setting the proper &lt;code&gt;Content-Type&lt;/code&gt; to &lt;code&gt;text/xml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.get('/rss', function(req, res) {

    // Initializing feed object
    var feed = new Feed({
        title:          'My Feed Title',
        description:    'This is my personnal feed!',
        link:           'http://example.com/',
        image:          'http://example.com/logo.png',
        copyright:      'Copyright © 2013 John Doe. All rights reserved',

        author: {
            name:       'John Doe',
            email:      'john.doe@example.com',
            link:       'https://example.com/john-doe'
        }
    });

    // Function requesting the last 5 posts to a database. This is just an
    // example, use the way you prefer to get your posts.
    Post.findPosts(function(posts, err) {
        if(err)
            res.send('404 Not found', 404);
        else {
            for(var key in posts) {
                feed.item({
                    title:          posts[key].title,
                    link:           posts[key].url,
                    description:    posts[key].description,
                    date:           posts[key].date
                });
            }
            // Setting the appropriate Content-Type
            res.set('Content-Type', 'text/xml');

            // Sending the feed as a response
            res.send(feed.render('rss-2.0'));
        }
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There you go, it was super duper easy :)! Now, people can finally read your entries feeded from your Node.js application!&lt;/p&gt;</description><author>contact@jpmonette.net (Jean-Philippe Monette)</author></item><item><title>Session-based Authorization with Socket.IO</title><link>https://howtonode.org/socket-io-auth</link><comments>https://howtonode.org/socket-io-auth#disqus_thread</comments><pubDate>Wed, 12 Dec 2012 09:44:00 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/socket-io-auth</guid><description>&lt;p&gt;Finding a decent article about session based authorization in socket.io is more difficult than one expected. This article will show how you can take advantage of Express session middleware and socket.io authorization middleware to create a very simple authorization mechanism when establishing new socket.io connections.&lt;/p&gt;

&lt;h2&gt;Prolog&lt;/h2&gt;

&lt;p&gt;I decided to write this article after getting a bit frustrated from searching the Internet for a decent example on how to use session based authorization with socket.io. To be honest, socket.io wiki page on &lt;a href=&quot;https://github.com/LearnBoost/socket.io/wiki/Authorizing&quot;&gt;authorization&lt;/a&gt; was quite simple to follow and understand, but when it came to &lt;strong&gt;session based&lt;/strong&gt; authorization, I got a bit lost (especially considering the fact that it's my third day using Node...). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: the original concept was published in Daniel Baulig's &lt;a href=&quot;http://www.danielbaulig.de/socket-ioexpress/&quot;&gt;blog&lt;/a&gt;. I mainly adapted it to work with Express 3.x.x.&lt;/p&gt;

&lt;h2&gt;Reading Suggestions&lt;/h2&gt;

&lt;p&gt;Before reading this article, I strongly suggest you get familiar with Express and Socket.IO. I kept things as simple and minimal as possible, so you really don't need more than a couple of hours to learn what needs to be learned if you're a complete newbie.&lt;/p&gt;

&lt;p&gt;I also suggest reading the Authorization wiki page referenced in the prolog.&lt;/p&gt;

&lt;h2&gt;Global Authorization vs Namespace Authorization&lt;/h2&gt;

&lt;p&gt;First I would like to distinguish between two authorization scopes that are currently supported by socket.io, namely - Global and Namespace. &lt;em&gt;Global&lt;/em&gt; authorization will be used to authorize any attempt to open a (socket.io) connection against our Node application. &lt;em&gt;Namespace&lt;/em&gt; authorization, on the other hand, allows you to use different authorization rules when accepting connections to a specific socket.io namespace (more on namespaces can be found &lt;a href=&quot;http://socket.io/#how-to-use&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In this article I will exemplify only how to enable Global authorization, although from the looks of things, namespace authorization is quite straightforward once you understand global authorization.&lt;/p&gt;

&lt;h2&gt;A Few Words about Timing&lt;/h2&gt;

&lt;p&gt;It's important to understand that the authorization process takes place during handshake. This means that, prior to authorization, no socket connection is established. As a matter of fact, because the handshakes in socket.io are implemented as HTTP calls, one can use the HTTP context to get relevant information on the user who's trying to connect. As you'll see next, I will be using cookie data to authorize any user that tried to establish a socket connection to the server.&lt;/p&gt;

&lt;h2&gt;Session-based Authorization&lt;/h2&gt;

&lt;p&gt;As I said, I will be using cookie data to authorize our John Dow. Specifically, I will be using the user's session id to make sure that indeed this user went through the system. The trick here is to use Express' session middleware to assign a &lt;strong&gt;signed&lt;/strong&gt; session id to the user, so the next time he sends a request (in our case that would be during socket.io handshake) it will be possible to ascertain that this user is a valid user and not a scoundrel. Theoretically, I could also fetch more information about the user using his session id, but I felt that it's out of scope for this article. I admit that this kind of authorization method is naive, but it's good enough to get you started.&lt;/p&gt;

&lt;h2&gt;Time to Code!&lt;/h2&gt;

&lt;p&gt;I believe I said more than enough on the subject at hand, and now would be the right time to start looking at code. The complete &lt;a href=&quot;/socket-io-auth/server.js&quot;&gt;source code&lt;/a&gt; takes less then 70 lines (including elaborate comments) and should be enough for anyone with some experience with Express and Socket.IO. Nonetheless I will guide you through the code so there are no complaints.&lt;/p&gt;

&lt;h2&gt;Client side: index.html&lt;/h2&gt;

&lt;p&gt;We begin by creating an HTML file called (surprisingly) index.html:&lt;/p&gt;

&lt;p&gt;&lt;socket-io-auth/index.html&gt;&lt;/p&gt;

&lt;p&gt;As you can see, our client side is nothing more then several lines of javascript establishing a socket.io connection with our local server. Once connection is established, you will be able to see time slipping away between your fingertips (millisecond ticks) inside your browser console. &lt;/p&gt;

&lt;p&gt;Notice that I'm also listening to the &lt;em&gt;error&lt;/em&gt; event, in case the connection cannot be established, or access is denied by the authorization process.&lt;/p&gt;

&lt;h2&gt;Configuring Express&lt;/h2&gt;

&lt;p&gt;Now let's create and configure Express:&lt;/p&gt;

&lt;p&gt;&lt;socket-io-auth/express-snippet.js&gt;&lt;/p&gt;

&lt;p&gt;Pay special notice to the the fact that we're using the session middleware that ships with Express to support sessions. This middleware is responsible for generating session ids for new users when they first login to the system.&lt;/p&gt;

&lt;p&gt;The session middleware uses a &lt;em&gt;secret&lt;/em&gt; value to sign the session id. We will use this mechanism to our advantage when we try to authorize an incoming socket.io connection.&lt;/p&gt;

&lt;p&gt;The lines following the Express configuration code are responsible for serving our precious index.html when a user connects to the server.&lt;/p&gt;

&lt;p&gt;The last two lines construct an HTTP server over the Express application, and binding it port 3000. Feel free to run &lt;code&gt;node server.js&lt;/code&gt; and open your browser at &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt;. You should be seeing a single line saying: &lt;em&gt;Open the browser console to see tick-tocks!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Configuring Socket.IO&lt;/h2&gt;

&lt;p&gt;Next we need to configure socket.io:&lt;/p&gt;

&lt;p&gt;&lt;socket-io-auth/socket-io-snippet.js&gt;&lt;/p&gt;

&lt;p&gt;Now we're getting to the tricky part. First we need to bind socket.io to our HTTP server. That would be the first line of code - piece of cake.&lt;/p&gt;

&lt;p&gt;The next block is the reason we're all here - by calling &lt;code&gt;io.set('authorization', function (handshakeData, accept)&lt;/code&gt; we instruct socket.io to run our authorization code when performing a handshake.&lt;/p&gt;

&lt;p&gt;The logic goes as follows: first we check if there's a cookie associated with the handshake request. In case the user already logged into our system there should be a cookie containing his session id. If no cookie is found the user is rejected.&lt;/p&gt;

&lt;p&gt;If a cookie is found, we try to parse it. The crucial line here is &lt;code&gt;connect.utils.parseSignedCookie(handshakeData.cookie['express.sid'], 'secret')&lt;/code&gt;, which tries to unsign the session id cookie value using the same secret key used for signing. If the cookie was indeed signed by our server than the reverse operation should give us the real session id. This is actually our way of making sure that the user trying to connect is someone we &quot;know&quot; and not some fake user trying to hack into our system. Notice that in case we did not succeed in unsigning the value, the return value should equal to the original value, indicating a problem.&lt;/p&gt;

&lt;p&gt;The next couple of lines in the full source code are standard socket.io and I won't go into details explaining them.&lt;/p&gt;

&lt;h2&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;That's it! You're ready to implement whatever authorization algorithm you want. Enjoy socket.io!&lt;/p&gt;</description><author>shahar@gmail.com (Shahar Kedar)</author></item><item><title>Make Your Tests Deterministic</title><link>https://howtonode.org/make-your-tests-deterministic</link><comments>https://howtonode.org/make-your-tests-deterministic#disqus_thread</comments><pubDate>Mon, 13 Aug 2012 04:12:01 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/make-your-tests-deterministic</guid><description>&lt;p&gt;Non-deterministic issues like &lt;a href=&quot;http://en.wikipedia.org/wiki/Race_condition&quot;&gt;race conditions&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Deadlock&quot;&gt;thread deadlocks&lt;/a&gt; are very difficult to test, because they are by nature hard to reproduce. Fortunately, in the JavaScript world, we only have a single thread, so we are safe, right? Well, not really because...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Execution order of callbacks can cause the same race condition issues that plague multi-threaded environments.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Example&lt;/h2&gt;

&lt;p&gt;Let's say we need a function that will return an array of timestamps representing the last modification time of a set of files.&lt;/p&gt;

&lt;p&gt;&lt;make-your-tests-deterministic/get-last-modified.js&gt;&lt;/p&gt;

&lt;p&gt;To unit test this code, we need to mock out &lt;code&gt;fs&lt;/code&gt; module (using real file system would require setting up some initial state, cleaning up afterwards and would make the test slow). That's pretty easy with &lt;a href=&quot;https://github.com/vojtajina/node-mocks&quot;&gt;node-mocks&lt;/a&gt; - we can use a fake in-memory file system.&lt;/p&gt;

&lt;p&gt;&lt;make-your-tests-deterministic/get-last-modified.spec.js&gt;&lt;/p&gt;

&lt;p&gt;This unit test passes, but the production code is broken. Even worse, it sometimes works, sometimes it does not... The problem is that this code relies on the order of &lt;code&gt;fs.stat&lt;/code&gt; callbacks, which is preserved in the mock version of &lt;code&gt;fs&lt;/code&gt;, but can't be guaranteed on real fs - it's non-deterministic.&lt;/p&gt;

&lt;h2&gt;Solution&lt;/h2&gt;

&lt;p&gt;Our solution needs to simulate the problematic behavior during the test.&lt;/p&gt;

&lt;p&gt;We could make the fake &lt;code&gt;fs&lt;/code&gt; to fire callbacks in a random order, which would be very similar to the real &lt;code&gt;fs&lt;/code&gt; behavior. However, that would result in a flaky tests that sometimes pass, sometimes not - just like our production code. Yep, we could do &quot;stress&quot; testing - execute the test multiple times, to make the probability of failing bigger, but that's still flaky.&lt;/p&gt;

&lt;p&gt;What we really want is our tests to be always deterministic - reliable, not flaky. So we need to simulate this behavior in a predictable - controlled way.
That's why the &lt;code&gt;fs&lt;/code&gt; mock uses something called &lt;code&gt;predictableNextTick&lt;/code&gt;, which behaves similar to &lt;a href=&quot;http://nodejs.org/api/process.html#process_process_nexttick_callback&quot;&gt;process.nextTick&lt;/a&gt;, but fires callbacks in a specific order.&lt;/p&gt;

&lt;p&gt;Let's add this line into our unit test:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mocks.predictableNextTick.pattern = [1, 0];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suddenly, the test is failing, because now the &lt;code&gt;fs.stat&lt;/code&gt; callbacks are fired in different order than they were registered. They are fired in order specified by the pattern - second callback first, then first, then fourth, then third, etc...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The important thing is, they are ALWAYS fired in THIS order. It's predictable, deterministic !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This was very simple example of an issue, that can easily happen when dealing with asynchronous APIs. The same type of issues can happen in web applications as well, for instance by sending multiple xhr requests.
&lt;strong&gt;In production, this behavior is out of our control. However, in order to guarantee correct behavior of our code, we need to be sure that it handles correctly all these different situations. The best way to do that is by simulating these situations in a fully controlled - a deterministic way.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The full source code of &lt;code&gt;predictableNextTick&lt;/code&gt; implementation can be found on &lt;a href=&quot;https://github.com/vojtajina/node-mocks/blob/master/lib/util.js&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The full source code of this example is on &lt;a href=&quot;https://gist.github.com/3283670&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;</description><author>vojta.jina@gmail.com (Vojta Jina)</author></item><item><title>Sending e-mails with Node and NodeMailer</title><link>https://howtonode.org/sending-e-mails-with-node-and-nodemailer</link><comments>https://howtonode.org/sending-e-mails-with-node-and-nodemailer#disqus_thread</comments><pubDate>Mon, 18 Jun 2012 11:49:38 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/sending-e-mails-with-node-and-nodemailer</guid><description>&lt;p&gt;Sending e-mails with &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; is almost a breeze. Almost. First, you have to plug-in the &lt;a href=&quot;https://github.com/andris9/Nodemailer&quot;&gt;NodeMailer&lt;/a&gt; module than set up a transport type, load the templates, add attachments and finally send...&lt;/p&gt;

&lt;h2&gt;The Code&lt;/h2&gt;

&lt;p&gt;The first thing you tend to do is to create a wrapper class to manage all this tasks. So, I wrapped it in an Eamiler class to centralize the mail sending in my app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# /lib/emailer.coffee

emailer = require(&quot;nodemailer&quot;)
fs      = require(&quot;fs&quot;)
_       = require(&quot;underscore&quot;)

class Emailer

  options: {}

  data: {}

  # Define attachments here
  attachments: [
    fileName: &quot;logo.png&quot;
    filePath: &quot;./public/images/email/logo.png&quot;
    cid: &quot;logo@myapp&quot;
  ]

  constructor: (@options, @data)-&amp;gt;

  send: (callback)-&amp;gt;
    html = @getHtml(@options.template, @data)
    attachments = @getAttachments(html)
    messageData =
      to: &quot;'#{@options.to.name} #{@options.to.surname}' &amp;lt;#{@options.to.email}&amp;gt;&quot;
      from: &quot;'Myapp.com'&quot;
      subject: @options.subject
      html: html
      generateTextFromHTML: true
      attachments: attachments
    transport = @getTransport()
    transport.sendMail messageData, callback

  getTransport: ()-&amp;gt;
    emailer.createTransport &quot;SMTP&quot;,
      service: &quot;Gmail&quot;
      auth:
        user: &quot;myappemail@gmail.com&quot;
        pass: &quot;secretpass&quot;

  getHtml: (templateName, data)-&amp;gt;
    templatePath = &quot;./views/emails/#{templateName}.html&quot;
    templateContent = fs.readFileSync(templatePath, encoding=&quot;utf8&quot;)
    _.template templateContent, data, {interpolate: /\{\{(.+?)\}\}/g}

  getAttachments: (html)-&amp;gt;
    attachments = []
    for attachment in @attachments
      attachments.push(attachment) if html.search(&quot;cid:#{attachment.cid}&quot;) &amp;gt; -1
    attachments

exports = module.exports = Emailer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a standard &lt;a href=&quot;http://expressjs.com/&quot;&gt;ExpressJS&lt;/a&gt; project structure you'll store this file in &lt;code&gt;/lib/emailer.coffee&lt;/code&gt;.
You'll need to have the email templates stored in &lt;code&gt;/views/emails/&lt;/code&gt; as HTML files and the attachments in &lt;code&gt;/public/images/email/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A potential email view will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- invite.html --&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Invite from Myapp&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;
    Hi {{name}} {{surname}},
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    Myapp would like you to join it's network on &amp;lt;a href=&quot;http://myapp.com&quot;&amp;gt;Myapp.com&amp;lt;/a&amp;gt;.
    &amp;lt;br /&amp;gt;
    Please follow the link bellow to register:
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;a href=&quot;http://myapp.com/register?invite={{id}}&quot;&amp;gt;http://myapp.com/register?invite={{id}}&amp;lt;/a&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    Thank you,
    &amp;lt;br /&amp;gt;
    Myapp Team
  &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;a href=&quot;http://myapp.com&quot;&amp;gt;&amp;lt;img src=&quot;cid:logo@myapp&quot; /&amp;gt;&amp;lt;/a&amp;gt;
  &amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://underscorejs.org/&quot;&gt;UnderscoreJS&lt;/a&gt; template will take care about your variables in the template and the &lt;code&gt;getAttachments()&lt;/code&gt; function will automatically attache the files you need by the &lt;code&gt;cid&lt;/code&gt; from the template.&lt;/p&gt;

&lt;p&gt;To use the class in your code you have to instantiate a new Emailer object with the desired options, the template data and send the email:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;options =
  to:
    email: &quot;username@domain.com&quot;
    name: &quot;Rick&quot;
    surname: &quot;Roll&quot;
    subject: &quot;Invite from Myapp&quot;
    template: &quot;invite&quot;

data =
  name: &quot;Rick&quot;
  surname &quot;Roll&quot;
  id: &quot;3434_invite_id&quot;

Emailer = require &quot;../lib/emailer&quot;
emailer = new Emailer options, data
emailer.send (err, result)-&amp;gt;
  if err
    console.log err
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a &lt;a href=&quot;http://mongoosejs.com/&quot;&gt;MongooseJS&lt;/a&gt;: http://mongoosejs.com/ model for the invites you would have something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;InviteSchema = new Schema
  email:
    type: String
  name:
    type: String
  surname:
    type: String
  status:
    type: String
    enum: [&quot;pending&quot;, &quot;accepted&quot;]
    default: &quot;pending&quot;
  clicks:
    type: Number
    default: 0
  created_at:
    type: Date
    default: Date.now

InviteSchema.methods.send = ()-&amp;gt;
  options =
    to:
      email: @email
      name: @name
      surname: @surname
    subject: &quot;Invite from Myapp&quot;
    template: &quot;invite&quot;
  Emailer = require &quot;../lib/emailer&quot;
  emailer = new Emailer options, @
  emailer.send (err, result)-&amp;gt;
    if err
      console.log err

Invite = mongoose.model(&quot;Invite&quot;, InviteSchema)
exports = module.exports = Invite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you'll call it from an ExpressJS router:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Invite = require('../models/invite')

module.exports = (app)-&amp;gt;

  app.post '/invites', (req, res)-&amp;gt;
    data = req.body
    invite = new Invite data
    invite.save ()-&amp;gt;
      invite.send()
    res.writeHead(303, {'Location': &quot;/invites&quot;})
    res.end()

  app.get '/invites', (req, res)-&amp;gt;
    Invite.find().desc(&quot;created_at&quot;).run (err, invites)-&amp;gt;
      res.render 'invites/invites', {title: &quot;Invites&quot;, invites: invites}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all about it.&lt;/p&gt;

&lt;p&gt;Your feedback is highly appreciated. Thanks.&lt;/p&gt;</description><author>me@dumitruglavan.com (Dumitru Glavan)</author></item><item><title>Node.js and MongoDB - Getting started with MongoJS</title><link>https://howtonode.org/node-js-and-mongodb-getting-started-with-mongojs</link><comments>https://howtonode.org/node-js-and-mongodb-getting-started-with-mongojs#disqus_thread</comments><pubDate>Mon, 06 Feb 2012 09:45:00 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/node-js-and-mongodb-getting-started-with-mongojs</guid><description>&lt;p&gt;It won't be an exaggeration if one claims that in the past few months Node.js and MongoDB have literally taken the 
software and web industries by storm.&lt;/p&gt;

&lt;p&gt;Not just bleeding-edge startups but even medium and large enterprises are leveraging these two technologies to deliver 
a better experience to their users by build more capable, performant and scalable apps.&lt;/p&gt;

&lt;p&gt;So what is Node.js?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. 
  Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for 
  data-intensive real-time applications that run across distributed devices.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;..and what is MongoDB?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MongoDB is a scalable, high-performance, open source NoSQL database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post will cover the basics and get you started with your Node.js + MongoDB app. Make sure you have Node.js 
installed and MongoDB setup on your developer machine.&lt;/p&gt;

&lt;p&gt;Let's verify your Node.js installation and start the MongoDB server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node -v
$ mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Introducing MongoJS&lt;/h2&gt;

&lt;p&gt;MongoJS is a brilliant little Node.js package that lets you access MongoDB using an API that is extremely similar to
MongoDB's JavaScript shell.&lt;/p&gt;

&lt;h2&gt;Installing MongoJS&lt;/h2&gt;

&lt;p&gt;Once Node.js has been setup correctly on your machine, you can use its internal package manager NPM to install MongoJS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install mongojs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now start building our JavaScript application and connect to our MongoDB server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// app.js
var databaseUrl = &quot;mydb&quot;; // &quot;username:password@example.com/mydb&quot;
var collections = [&quot;users&quot;, &quot;reports&quot;]
var db = require(&quot;mongojs&quot;).connect(databaseUrl, collections);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The databaseUrl can contain the database server host and port along with the database name to connect to. By default
the host is “localhost” and the port is “27017“. If you're using the default, which is likely on a developer
environment, the databaseUrl can contain just the actual database name for our app.&lt;/p&gt;

&lt;p&gt;The collections is a set (array) of collections our application uses. It isn't mandatory but is preferred as it allows
us to emulate a MongoDB JavaScript client like API within our Node.js app.&lt;/p&gt;

&lt;p&gt;Here's an example for finding documents within a collection specifically in this case to find all female users.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// app.js
db.users.find({sex: &quot;female&quot;}, function(err, users) {
  if( err || !users) console.log(&quot;No female users found&quot;);
  else users.forEach( function(femaleUser) {
    console.log(femaleUser);
  } );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how our initial query is a near duplication of the corresponding query in MongoDB's console. In addition to the
query, in our Node.js source code (i.e. app.js) we pass a callback function to handle the results of the query.&lt;/p&gt;

&lt;p&gt;Node.js implements an event based concurrency paradigm and almost everything is always a callback. This allows your
Node.js app to be non-blocking and high performing.&lt;/p&gt;

&lt;p&gt;What happens in our specific callback is self-explanatory — we check for errors and results, and if the query returns
female users they are logged to the console.&lt;/p&gt;

&lt;p&gt;Okay, how do I save a new user in my collection? Exactly how you would do it in the console, your code will look like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// app.js
db.users.save({email: &quot;srirangan@gmail.com&quot;, password: &quot;iLoveMongo&quot;, sex: &quot;male&quot;}, function(err, saved) {
  if( err || !saved ) console.log(&quot;User not saved&quot;);
  else console.log(&quot;User saved&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here's an example for updating a record / document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// app.js
db.users.update({email: &quot;srirangan@gmail.com&quot;}, {$set: {password: &quot;iReallyLoveMongo&quot;}}, function(err, updated) {
  if( err || !updated ) console.log(&quot;User not updated&quot;);
  else console.log(&quot;User updated&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, now we run this app in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there we have it, an incredibly simple quick start for Node.js + MongoDB enthusiasts. Happy coding!&lt;/p&gt;</description><author>srirangan@gmail.com (Srirangan)</author></item><item><title>Really simple file uploads with Express</title><link>https://howtonode.org/really-simple-file-uploads</link><comments>https://howtonode.org/really-simple-file-uploads#disqus_thread</comments><pubDate>Sat, 04 Feb 2012 23:30:00 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/really-simple-file-uploads</guid><description>&lt;p&gt;Few days ago I was working on a fairly typical web application and I faced the challenge of implementing a fairly
typical web application feature - file uploads. It was the first time I was implementing file uploads with Node (and
Express) and I did what anyone else would do - I googled it.&lt;/p&gt;

&lt;p&gt;Unfortunately all the articles / posts out there are either outdated, too complex or plain wrong. So I did the next
most obvious thing - post a question on the mailing list. As always Mr. Holowaychuk was incredibly quick to respond.
His answer lead me to do what I should have done in the first place - read the docs.&lt;/p&gt;

&lt;h2&gt;The upload form&lt;/h2&gt;

&lt;p&gt;This is the most obvious part of the challenge. You're probably familiar with this already. Anyway, for the sake of
completeness of this article, here it is.&lt;/p&gt;

&lt;p&gt;You will need a form in your browser for the file upload. I use Jade to generate my HTML and here how it looks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;form(action=&quot;...&quot;, method=&quot;post&quot;, enctype=&quot;multipart/form-data&quot;)
  input(type=&quot;file&quot;, name=&quot;displayImage&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;form.action&lt;/em&gt; will point to a route that handles the file upload. More below.&lt;/p&gt;

&lt;h2&gt;Accessing the uploaded file&lt;/h2&gt;

&lt;p&gt;If you're using recents versions of Node and Express, file uploads are a piece of cake. And I'll back this claim but
before we go any further make sure you're familiar with &lt;a href=&quot;http://expressjs.com/guide.html&quot;&gt;routes, requests and responses in Express&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Okay, now let's justify the &quot;piece of cake&quot; claim. In our file upload route, the &lt;em&gt;req&lt;/em&gt; parameter has &lt;em&gt;req.files&lt;/em&gt;
available. Here's an example of what the &lt;em&gt;req.files&lt;/em&gt; would contain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  displayImage: {
    size: 11885,
    path: '/tmp/1574bb60b4f7e0211fd9ab48f932f3ab',
    name: 'avatar.png',
    type: 'image/png',
    lastModifiedDate: Sun, 05 Feb 2012 05:31:09 GMT,
    _writeStream: {
      path: '/tmp/1574bb60b4f7e0211fd9ab48f932f3ab',
      fd: 14,
      writable: false,
      flags: 'w',
      encoding: 'binary',
      mode: 438,
      bytesWritten: 11885,
      busy: false,
      _queue: [],
      drainable: true
    },
    length: [Getter],
    filename: [Getter],
    mime: [Getter]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;em&gt;req.files&lt;/em&gt; object above, the property &lt;em&gt;displayImage&lt;/em&gt; is the name of the file field in your HTML form and
&lt;em&gt;req.files&lt;/em&gt; will contain one property each for every valid HTML file form field.&lt;/p&gt;

&lt;p&gt;The file object contains the &lt;em&gt;type&lt;/em&gt;, &lt;em&gt;size&lt;/em&gt; and &lt;em&gt;name&lt;/em&gt; properties for your server side validations.&lt;/p&gt;

&lt;h2&gt;Saving the uploaded file&lt;/h2&gt;

&lt;p&gt;Assuming the file is valid, you use the &lt;em&gt;path&lt;/em&gt; property for the next step. The &lt;em&gt;path&lt;/em&gt; would typically contain a location
in the &lt;em&gt;tmp&lt;/em&gt; folder. Your application logic could either require you to access the contents of the file or simply move
the uploaded file to another location.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fs.readFile(req.files.displayImage.path, function (err, data) {
  // ...
  var newPath = __dirname + &quot;/uploads/uploadedFileName&quot;;
  fs.writeFile(newPath, data, function (err) {
    res.redirect(&quot;back&quot;);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;em&gt;fs.readFile&lt;/em&gt; callback, we have the &lt;em&gt;data&lt;/em&gt; parameter through which we can access the contents of the file. The
example above is taken from an application that needed to modify the file and save it in a new location. Thus
&lt;em&gt;fs.writeFile&lt;/em&gt; is used to write &lt;em&gt;data&lt;/em&gt; to the &lt;em&gt;newPath&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If your app needs to simply move the uploaded file without modifying the contents &lt;em&gt;fs.rename&lt;/em&gt; can be used as more
simpler option.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That's all there is to it. I've done file uploads in many server side languages including Python, Java, Scala and PHP
and I don't think its ever been this simple. So much for JavaScript being labeled as an inferior server side language.&lt;/p&gt;</description><author>srirangan@gmail.com (Srirangan)</author></item><item><title>Understanding process.nextTick()</title><link>https://howtonode.org/understanding-process-next-tick</link><comments>https://howtonode.org/understanding-process-next-tick#disqus_thread</comments><pubDate>Tue, 24 Jan 2012 13:07:00 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/understanding-process-next-tick</guid><description>&lt;p&gt;I have seen quite a few people being confused about &lt;code&gt;process.nextTick()&lt;/code&gt;. Let's take a look at what &lt;code&gt;process.nextTick()&lt;/code&gt; does, and when to use it.&lt;/p&gt;

&lt;p&gt;As you might already know, every Node application runs on a single thread. What this means is that &lt;strong&gt;apart from I/O&lt;/strong&gt; - at any time, only one task/event is processed by Node's event loop. You can imagine this event loop to be a queue of callbacks that are processed by Node on every &lt;strong&gt;tick&lt;/strong&gt; of the event loop. So, even if you are running Node on a multi-core machine, you will not get any parallelism in terms of actual processing - all events will be processed only one at a time. This is why Node is a great fit for I/O bound tasks, and definitely not for CPU intensive tasks. For every I/O bound task, you can simply define a callback that will get added to the event queue. The callback will fire when the I/O operation is done, and in the mean time, the application can continue to process other I/O bound requests. &lt;/p&gt;

&lt;p&gt;Given this model, what &lt;code&gt;process.nextTick()&lt;/code&gt; actually does is defer the execution of an action till the next pass around the event loop. Let's take a simple example. If we had a function &lt;code&gt;foo()&lt;/code&gt; which we wanted to invoke in the next tick, this is how we do it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function foo() {
    console.error('foo');
}

process.nextTick(foo);
console.error('bar');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you ran the above snippet, you will notice that &lt;code&gt;bar&lt;/code&gt; will be printed in your console before &lt;code&gt;foo&lt;/code&gt;, as we have delayed the invokation of &lt;code&gt;foo()&lt;/code&gt; till the next tick of the event loop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bar
foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, you can get the same result by using &lt;code&gt;setTimeout()&lt;/code&gt; this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setTimeout(foo, 0);
console.log('bar');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, &lt;code&gt;process.nextTick()&lt;/code&gt; is not just a simple alias to &lt;code&gt;setTimeout(fn, 0)&lt;/code&gt; - it's &lt;a href=&quot;https://gist.github.com/1257394&quot;&gt;far more efficient&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More precisely, &lt;code&gt;process.nextTick()&lt;/code&gt; defers the function until a completely new stack.  You can call as many functions as you want in the current stack.  The function that called nextTick has to return, as well as its parent, all the way up to the root of the stack.  Then when the event loop is looking for a new event to execute, your &lt;code&gt;nextTick&lt;/code&gt;'ed function will be there in the event queue and execute on a whole new stack.&lt;/p&gt;

&lt;p&gt;Let's see where we can use &lt;code&gt;process.nextTick()&lt;/code&gt;:&lt;/p&gt;

&lt;h2&gt;Interleaving execution of a CPU intensive task with other events&lt;/h2&gt;

&lt;p&gt;Let's say we have a task &lt;code&gt;compute()&lt;/code&gt; which needs to run almost continuously, and does some CPU intensive calculations. If we wanted to also handle other events, like serving HTTP requests in the same Node process, we can use &lt;code&gt;process.nextTick()&lt;/code&gt; to interleave the execution of &lt;code&gt;compute()&lt;/code&gt; with the processing of requests this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var http = require('http');

function compute() {
    // performs complicated calculations continuously
    // ...
    process.nextTick(compute);
}

http.createServer(function(req, res) {
     res.writeHead(200, {'Content-Type': 'text/plain'});
     res.end('Hello World');
}).listen(5000, '127.0.0.1');

compute();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this model, instead of calling &lt;code&gt;compute()&lt;/code&gt; recursively, we use &lt;code&gt;process.nextTick()&lt;/code&gt; to delay the execution of &lt;code&gt;compute()&lt;/code&gt; till the next tick of the event loop. By doing so, we ensure that if any other HTTP requests are queued in the event loop, they will be processed before the next time &lt;code&gt;compute()&lt;/code&gt; gets invoked. If we had not used &lt;code&gt;process.nextTick()&lt;/code&gt; and had simply called &lt;code&gt;compute()&lt;/code&gt; recursively, the program would not have been able to process any incoming HTTP requests. Try it for yourself!&lt;/p&gt;

&lt;p&gt;So, alas, we don't really get any magical multi-core parallelism benefits by using &lt;code&gt;process.nextTick()&lt;/code&gt;, but we can still use it to share CPU usage between different parts of our application.&lt;/p&gt;

&lt;h2&gt;Keeping callbacks truly asynchronous&lt;/h2&gt;

&lt;p&gt;When you are writing a function that takes a callback, you should always ensure that this callback is fired asynchronously. Let's look at an example &lt;strong&gt;which violates&lt;/strong&gt; this convention:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function asyncFake(data, callback) {        
    if(data === 'foo') callback(true);
    else callback(false);
}

asyncFake('bar', function(result) {
    // this callback is actually called synchronously!
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why is this inconsistency bad? Let's consider this example taken from Node's &lt;a href=&quot;http://nodejs.org/docs/latest/api/net.html#net.createConnection&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var client = net.connect(8124, function() { 
    console.log('client connected');
    client.write('world!\r\n');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above case, if for some reason, &lt;code&gt;net.connect()&lt;/code&gt; were to become synchronous, the callback would be called immediately, and hence the &lt;code&gt;client&lt;/code&gt; variable will not be initialized when the it's accessed by the callback to write to the client! &lt;/p&gt;

&lt;p&gt;We can correct &lt;code&gt;asyncFake()&lt;/code&gt; to be always asynchronous this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function asyncReal(data, callback) {
    process.nextTick(function() {
        callback(data === 'foo');       
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;When emitting events&lt;/h2&gt;

&lt;p&gt;Let's say you are writing a library that reads from a source and emits events that contains the chunks that are read. Such a library might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var EventEmitter = require('events').EventEmitter;

function StreamLibrary(resourceName) { 
    this.emit('start');

    // read from the file, and for every chunk read, do:        
    this.emit('data', chunkRead);       
}
StreamLibrary.prototype.__proto__ = EventEmitter.prototype;   // inherit from EventEmitter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's say that somewhere else, someone is listening to these events:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var stream = new StreamLibrary('fooResource');

stream.on('start', function() {
    console.log('Reading has started');
});

stream.on('data', function(chunk) {
    console.log('Received: ' + chunk);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, the listener will never get the &lt;code&gt;start&lt;/code&gt; event as that event would be emitted by &lt;code&gt;StreamLibrary&lt;/code&gt; immediately during the constructor call. At that time, we have not yet assigned a callback to the &lt;code&gt;start&lt;/code&gt; event yet. Therefore, we would never catch this event! Once again, we can use &lt;code&gt;process.nextTick()&lt;/code&gt; to defer the &lt;code&gt;emit&lt;/code&gt; till the listener has had the chance to listen for the event.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function StreamLibrary(resourceName) {      
    var self = this;

    process.nextTick(function() {
        self.emit('start');
    });

    // read from the file, and for every chunk read, do:        
    this.emit('data', chunkRead);       
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope that demystifies &lt;code&gt;process.nextTick()&lt;/code&gt;. If I have missed out something, please do share in the comments.&lt;/p&gt;</description><author>kishore@kishorelive.com (Kishore Nallan)</author></item><item><title>Testing Private State and Mocking Dependencies</title><link>https://howtonode.org/testing-private-state-and-mocking-deps</link><comments>https://howtonode.org/testing-private-state-and-mocking-deps#disqus_thread</comments><pubDate>Sun, 08 Jan 2012 02:11:06 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/testing-private-state-and-mocking-deps</guid><description>&lt;p&gt;During Christmas I've been working on &lt;a href=&quot;http://github.com/vojtajina/testacular/&quot;&gt;Testacular&lt;/a&gt; and found some tricks how to make my testing life
easier. It's nothing special at all, just a simple way &lt;strong&gt;how to access private state of a module&lt;/strong&gt;
and &lt;strong&gt;how to mock out some dependencies&lt;/strong&gt;. I've found these two techniques pretty usefull, so I
believe it might help someone else as well...&lt;/p&gt;

&lt;h3&gt;Why would you need to access private state of a module?&lt;/h3&gt;

&lt;p&gt;Private should be private, right? Yes, for sure. But during unit tests, it can be very helpful to
have access to private state of a module - I always try to cover functionality or bug at the lowest
possible level, because it's simply cheaper:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;faster test execution&lt;/li&gt;
&lt;li&gt;less code is required to bootstrap the test&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's say we are building very simple static web server, the skeleton might look something like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var http = require('http');

var handleRequest = function(request, response) {
  // read file from fs and send response
};

exports.createServer = function() {
  return http.createServer(handleRequest);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This module has only one public method &lt;code&gt;createServer&lt;/code&gt;, so unless we make it public, we can't get
hold of anything else but this method. That sucks, because &lt;code&gt;HttpServer&lt;/code&gt; doesn't have any public
method to call the handler, so we would have to send some data through socket to test it. That's way
too much effort, especially when you realize that the only code we really need to test is the
&lt;code&gt;handleRequest&lt;/code&gt; function - everything else is just Node and we trust Node, because it's awesome. We
need to test &lt;strong&gt;our&lt;/strong&gt; code - that's where all the bugs are.&lt;/p&gt;

&lt;h3&gt;Why would you need to mock out dependencies?&lt;/h3&gt;

&lt;p&gt;Some dependencies are cheap, some not. When our code uses modules like &lt;code&gt;util&lt;/code&gt; or &lt;code&gt;path&lt;/code&gt;, we are
fine. Nothing bad happens there. But when it comes to some other modules like &lt;code&gt;fs&lt;/code&gt;, &lt;code&gt;net&lt;/code&gt; or &lt;code&gt;http&lt;/code&gt;,
it's totally different story. We simply don't want to deal with real filesystem in unit tests. There
are many reasons for that, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;accessing file system is slow&lt;/li&gt;
&lt;li&gt;it requires seting up some state of filesystem&lt;/li&gt;
&lt;li&gt;there is only one instance of filesystem, so conflicts between different unit tests might happen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we want our module to use something different - we call these objects test doubles (I actually
like using mock/stub/dummy definition from &lt;a href=&quot;http://xunitpatterns.com/Test%20Double.html&quot;&gt;G.Meszaros&lt;/a&gt;). The question is, how can we persuade our
awesome module, to use &lt;strong&gt;a different instance during testing and different instance in production&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt; is great for this - it wires all the pieces together (yep, it saves us lot
of work) - and more than that, it does allow us to use different instances during testing. Yep, DI is
just awesome! I actually think, that new languages such as &lt;a href=&quot;http://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt; should support DI natively - in the
same way as they do support memory management.&lt;/p&gt;

&lt;p&gt;Unfortunately, there is no DI in Node, at least I haven't found any sufficient implementation.
Writing a Dependency Injection framework is definitely a solution, but I was looking for something
faster...&lt;/p&gt;

&lt;h2&gt;Let's do it !&lt;/h2&gt;

&lt;h3&gt;Module Loader&lt;/h3&gt;

&lt;p&gt;&lt;testing-private-state-and-mocking-deps/module-loader.js&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is actually the code this post is all about :-D&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instead of using Node's &lt;code&gt;require&lt;/code&gt;, we use &lt;code&gt;loadModule&lt;/code&gt; function, which reads the content of
requested module (javascript source file) and executes it on the &lt;code&gt;context&lt;/code&gt; object. So all the
private state of the module is dumped into the &lt;code&gt;context&lt;/code&gt; object and yay, we can access everything!
See &lt;a href=&quot;http://nodejs.org/docs/latest/api/vm.html#vm.runInNewContext&quot;&gt;vm.runInNewContext&lt;/a&gt; for more info.&lt;/p&gt;

&lt;p&gt;Inside this &lt;code&gt;context&lt;/code&gt; object, we defined our own &lt;code&gt;require&lt;/code&gt; function, which means whenever the module
asks for a dependency, our &lt;code&gt;loadModule&lt;/code&gt; will be called intead of Node's &lt;code&gt;require&lt;/code&gt;. That's pretty
cool, because &lt;strong&gt;we can decide, whether we want to return a mock or real module&lt;/strong&gt;, in which case we
delegate the request to Node's &lt;code&gt;require&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Very simple web server example&lt;/h3&gt;

&lt;p&gt;&lt;testing-private-state-and-mocking-deps/web-server.js&gt;&lt;/p&gt;

&lt;h3&gt;Let's use it in test now&lt;/h3&gt;

&lt;p&gt;&lt;testing-private-state-and-mocking-deps/web-server.test.js&gt;&lt;/p&gt;

&lt;p&gt;This is very simple example of unit testing &lt;code&gt;web-server&lt;/code&gt; module, using &lt;code&gt;loadModule&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;We can access both private functions as properties of &lt;code&gt;module&lt;/code&gt; now, which is great, because we can
add more tests very easily. For example, you might have noticed, that &lt;code&gt;extensionFromUrl&lt;/code&gt; won't
return correct extension when requested url contains query param. Piece of cake, just add a test
that covers this bug:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;it('extensionFromUrl() should ignore query params', function() {
  expect(module.extensionFromUrl('/some.html?param=ignored')).toBe('html');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second test only asserts whether we set proper status code for existing file. We should assert
status code for non existing file as well as caching headers, content type header and many other
stuff. The important point here is, that &lt;strong&gt;it's fast, because it doesn't touch the real filesystem
and still does test what needs to be tested - our code&lt;/strong&gt;.&lt;/p&gt;</description><author>vojta.jina@gmail.com (Vojta Jina)</author></item><item><title>Asynchronous Control Flow with Promises</title><link>https://howtonode.org/promises</link><comments>https://howtonode.org/promises#disqus_thread</comments><pubDate>Tue, 20 Dec 2011 09:00:00 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/promises</guid><description>&lt;p&gt;A Promise is an object that represents the result of an asynchronous function call. Promises are also
called futures and deferreds in some communities.&lt;/p&gt;

&lt;h2&gt;Goal of this Article&lt;/h2&gt;

&lt;p&gt;The goal of this article is to introduce CommonJS promises as they exist in NodeJS user-land.
With jQuery popularizing a variant of CommonJS promises for AJAX operations, promises will likely gain
a broader user-base in the browser and on the server.&lt;/p&gt;

&lt;h2&gt;Brief History of Promises in Node&lt;/h2&gt;

&lt;p&gt;Promises based on EventEmitters were originally a part of Node.  They looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var promise = fs.stat(&quot;foo&quot;);
promise.addListener(&quot;success&quot;, function (value) {
    // ok
})
promise.addListener(&quot;error&quot;, function (error) {
    // error
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The style required more allocations than necessary.
There were also political issues because these &quot;promises&quot; did not fulfill all of
the contracts that advocates for promises insisted they must.  Between
aesthetics, politics, and reductionism, Ryan removed promises in the v0.2
era and settled on the present callback style, leaving promises as an
exercise for user-land.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fs.stat(&quot;foo&quot;, function (error, value) {
    if (error) {
        // error
    } else {
        // ok
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Promise Terminology&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fulfillment: When a successful promise is fulfilled, all of the pending callbacks are called with the value. If more callbacks are registered in the future, they will be called with the same value. Fulfilment is the asynchronous analog for returning a value.&lt;/li&gt;
&lt;li&gt;Rejection: When a promise cannot be fulfilled, a promise is 'rejected' which invokes the errbacks that are waiting and remembers the error that was rejected for future errbacks that are attached. Rejection is the asynchronous analog for throwing an exception.&lt;/li&gt;
&lt;li&gt;Resolution: A promise is resolved when it makes progress toward fulfillment or rejection.  A promise can only be resolved once, and it can be resolved with a promise instead of a fulfillment or rejection.&lt;/li&gt;
&lt;li&gt;Callback: A function executed if a a promise is fulfilled with a value.&lt;/li&gt;
&lt;li&gt;Errback: A function executed if a promise is rejected, with an exception.&lt;/li&gt;
&lt;li&gt;Progressback: A function executed to show that progress has been made toward resolution of a promise.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Promise Libraries&lt;/h2&gt;

&lt;h3&gt;Server Side&lt;/h3&gt;

&lt;p&gt;There are two primary implementations of CommonJS promises for Node:&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Q library&lt;/a&gt; by Kris Kowal.&lt;/h4&gt;

&lt;p&gt;Install with NPM: &lt;code&gt;npm install q&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var q = require('q');
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;&lt;a href=&quot;https://github.com/kriszyp/promised-io&quot;&gt;Promised-IO&lt;/a&gt; by Kris Zyp.&lt;/h4&gt;

&lt;p&gt;Install with NPM: &lt;code&gt;npm install promised-io&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var q = require('promised-io/lib/promise'); // &amp;lt;=v2.3

var q = require('promised-io/promise'); // &amp;gt;=v2.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They are compatible and even capable of consuming each others promises, so which you use
is a matter of preference. These libraries do different helper functions outside 
of the basic functions necessary to consume and create promises.&lt;/p&gt;

&lt;p&gt;The rest of the server-side examples will assume that a &lt;code&gt;q&lt;/code&gt; variable referencing
a promise module is in scope.&lt;/p&gt;

&lt;h3&gt;Client Side&lt;/h3&gt;

&lt;p&gt;jQuery implemented Promises in version 1.5.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.when($.get(...))
.then(function(value) {
    console.log('success!')
}, function(error) {
    console.log('rejection');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The Promise Contract&lt;/h2&gt;

&lt;h3&gt;There is &lt;em&gt;one&lt;/em&gt; Resolution or Rejection&lt;/h3&gt;

&lt;p&gt;A promise is resolved one time. It will never be fulfilled if it has been rejected
or rejected if it has been fulfilled.&lt;/p&gt;

&lt;h3&gt;Listeners are executed &lt;em&gt;one&lt;/em&gt; time&lt;/h3&gt;

&lt;p&gt;An individual callback or errback will be executed once and only once. This follows
from the first rule of the contract.&lt;/p&gt;

&lt;h3&gt;Promises remember their state&lt;/h3&gt;

&lt;p&gt;A promise that is resolved with a value remembers the fulfillment. If a
callback is attached in the future to this promise, it will be executed
with the previously resolved value. The same is true of errbacks. If a
promise is rejected and an errback is attached after the rejection, it will
be executed with the rejected value.  Promises behave the same way regardless
of whether they are already resolved or resolved in the future.&lt;/p&gt;

&lt;h2&gt;Thenables&lt;/h2&gt;

&lt;p&gt;CommonJS promises are sometimes referred to as thenables. This term derives from the &lt;code&gt;then&lt;/code&gt; method available on a promise.
The &lt;code&gt;then&lt;/code&gt; method is the gateway to attaching callbacks, errbacks, and progressbacks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myPromise.then(function() {
  // callback, executed on successful promise resolution
}, function() {
  // errback, executed on rejection
}, function() {
  // progressback, executed if the promise has progress to report
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;When&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;when&lt;/code&gt; function is a helper to attach listeners to an object that you are
not sure is a promise. This is useful because it is often helpful for methods
to be able to return a promise or a direct value. If a direct value is returned,it will not
have a &lt;code&gt;then&lt;/code&gt; method.  Also, if the promise does not implement &lt;code&gt;then&lt;/code&gt; properly,
the &lt;code&gt;when&lt;/code&gt; function makes sure that it behaves properly by ensuring your callbacks
are called in separate events and never more than once.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;when(maybePromise, function() {
  // callback, executed on successful promise resolution or if maybePromise is not a promise but a value
}, function() {
  // errback, executed on rejection
}, function() {
  // progressback, executed if the promise has progress to report
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Bubbling&lt;/h2&gt;

&lt;p&gt;The value returned by a callback is bubbled up the chain of promises. The same is true of rejections.
This allows for rejections to be handled at a higher level than the function that called the promise-returning
function that is rejected. This also allows promise-based APIs to compose responses for rejections and successes
by changing the value or error as it is bubbled.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doSomethingAsync() {
  return asyncHelper().then(function(val) {
    // do some extra processing on val
    return val; &amp;lt;-- becomes the resolution of the promise returned by doSomethingAsync
  });
}

doSomethingAsync().then(function(val) {
  console.log('resolved', val);
}, function(err) {
  // Will receive rejections from doSomethingAsync or bubbled from asyncHelper
  console.log('error', err);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Creating Promises using the Deferred helper&lt;/h2&gt;

&lt;p&gt;A Deferred is an object that helps create and manipulate promises. A Deferred
has a &lt;code&gt;promise&lt;/code&gt; property that references the promise that it manages. It also
has &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; methods that are responsible for resolving / rejecting
the promise.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;resolve&lt;/code&gt; is a function that may be passed a value or a promise.
If it is passed a value, the promise is fulfilled.
If it is passed a promise, that promise’s resolution will eventually
be forwarded to this one.&lt;/p&gt;

&lt;p&gt;Both Kris Kowal's Q and Kris Zyp's Promised-IO libraries enforce the rule
that a promise can only be resolved once.  Kris Kowal’s Q library allows multiple
agents to “race” to be the first to resolve the promise. Kris Zyp’s Promised-IO
throws an exception if you attempt to resolve a promise a second time.&lt;/p&gt;

&lt;p&gt;Reject is a function that accepts a reason for rejection. The rejection may be of any type but
is commonly a string. The Deferred rejects its promise with the rejection reason.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doSomethingAsync() {
  var deferred = q.defer();
  setTimeout(function() {
    deferred.resolve('hello world');
  }, 500);

  return deferred.promise;
}

doSomethingAsync().then(function(val) {
  console.log('Promise Resolved!', val);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Wrapping a function that takes a Node-style callback&lt;/h2&gt;

&lt;p&gt;The majority of functions that take Node-style callbacks are suitable for wrapping in a Promise.
Any Node-style callback function that only calls its callback one time may be wrapped.&lt;/p&gt;

&lt;p&gt;The following function is taken from &lt;a href=&quot;https://github.com/nrstott/bogart&quot;&gt;Bogart&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function promisify(nodeAsyncFn, context) {
  return function() {
    var defer = q.defer()
      , args = Array.prototype.slice.call(arguments);

    args.push(function(err, val) {
      if (err !== null) {
        return defer.reject(err);
      }

      return defer.resolve(val);
    });

    nodeAsyncFn.apply(context || {}, args);

    return defer.promise;
  };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function can be used with node functions like &lt;code&gt;fs.readFile&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var readFile = promisify(fs.readFile);
readFile('test.txt').then(function(data) {
  console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both Q and PromisedIO provide utilities for wrapping or calling Node-style
functions.&lt;/p&gt;

&lt;p&gt;With Kris Zyp’s PromisedIO:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var readFile = q.convertNodeAsyncFunction(fs.readFile);
readFile('test.txt')
.then(function (data) { });

// or

q.execute(fs.readFile, 'test.txt')
.then(function (data) { });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Kris Kowal’s Q:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var readFile = q.node(fs.readFile);
readFile('test.txt')
.then(function (data) { });

// or

q.ncall(fs.readFile, fs, 'test.txt')
.then(function (data) { });

// or

var deferred = q.defer();
fs.readFile('test.txt', deferred.node());
return deferred.promise;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Promises are a valuable tool for managing asynchronous control flow. With jQuery adopting
Promises, more JavaScript programmers will see them as the preferred method of managing
asynchronous state. If you have any questions, please leave them in the comments section.&lt;/p&gt;</description><author>nrstott@gmail.com (Nathan Stott)</author></item><item><title>Easy HTTP Mock Testing with Nock and node-tap</title><link>https://howtonode.org/http-mock-testing</link><comments>https://howtonode.org/http-mock-testing#disqus_thread</comments><pubDate>Tue, 06 Dec 2011 04:15:00 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/http-mock-testing</guid><description>&lt;p&gt;One of my first node.js libraries was &lt;a href=&quot;https://github.com/dscape/nano&quot;&gt;nano&lt;/a&gt;: A no fuss CouchDB client based on the super pervasive &lt;a href=&quot;https://github.com/mikeal/request&quot;&gt;request&lt;/a&gt;. In foresight that was a good idea, even though there's a ton of clients for CouchDB none of them is as simple as &lt;code&gt;nano&lt;/code&gt;, and the fact that its based on &lt;code&gt;request&lt;/code&gt; is great.&lt;/p&gt;

&lt;p&gt;When you are writing a HTTP client you need to test with one (or several) HTTP endpoints. I was lazy about it so I choose to point nano to &lt;a href=&quot;http://iriscouch.com&quot;&gt;iriscouch&lt;/a&gt; and run the tests on real HTTP requests. This was a problematic but overall ok approach.&lt;/p&gt;

&lt;p&gt;Then some weeks ago I started automating the tests using &lt;a href=&quot;http://travis-ci.org/#!/dscape/nano&quot;&gt;travis&lt;/a&gt;. And builds started to fail. To make this work and fix all the shortcomings of a direct connection to &lt;code&gt;iriscouch&lt;/code&gt;. I needed a HTTP Mocking module.&lt;/p&gt;

&lt;p&gt;By the way Travis is super cool. You should test all your node.js libraries with it. All you need to do is go to the site, sign in with github and place a &lt;code&gt;.travis.yml&lt;/code&gt; file like this one in the root of your lib:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  language: &quot;node_js&quot;
  node_js:
    - 0.4
    - 0.6
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Enter Nock&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://nodetuts.com&quot;&gt;Pedro Teixeira&lt;/a&gt;'s &lt;a href=&quot;https://github.com/pgte/nock&quot;&gt;nock&lt;/a&gt; allows you do HTTP Mock Testing while preserving the possibility to run the tests against a real http endpoint.&lt;/p&gt;

&lt;p&gt;Let's start on this small &lt;a href=&quot;https://github.com/isaacs/node-tap&quot;&gt;tap&lt;/a&gt; test &lt;code&gt;sudo npm install tap nano nock&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var nano = require('nano')('http://nodejsbug.iriscouch.com') 
  var test = require('tap').test;
  var db   = nano.use('testing_nock');

  test('Insert a Document Into CouchDB', function(t) {
    t.plan(4);
    nano.db.create('testing_nock', function () {
      db.insert({foo: &quot;bar&quot;},
        function ensure_insert_worked_cb(err, doc) {
          t.notOk(err, 'No errors');
          t.ok(doc.ok, 'Contains ok');
          t.ok(doc.rev, 'Rev exists');
          t.ok(doc.id, 'Id exists');
        });
    });
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we save this in a file &lt;code&gt;test.js&lt;/code&gt; we can run the tests and see they all work. We can even invoke the script with debugging turned on and inspect the HTTP requests/response flow &lt;code&gt;NANO_ENV=testing node test.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  { url: 'http://nodejsbug.iriscouch.com' }
  &amp;gt;&amp;gt;
  { method: 'PUT',
    headers: 
     { 'content-type': 'application/json',
       accept: 'application/json' },
    uri: 'http://nodejsbug.iriscouch.com/testing_nock' }
  &amp;lt;&amp;lt;
  { err: null,
    body: { ok: true },
    headers: 
     { location: 'http://nodejsbug.iriscouch.com/testing_nock',
       date: 'Thu, 01 Dec 2011 16:42:21 GMT',
       'content-type': 'application/json',
       'cache-control': 'must-revalidate',
       'status-code': 201 } }
  &amp;gt;&amp;gt;
  { method: 'POST',
    headers: 
     { 'content-type': 'application/json',
       accept: 'application/json' },
    uri: 'http://nodejsbug.iriscouch.com/testing_nock',
    body: '{&quot;foo&quot;:&quot;bar&quot;}' }
  &amp;lt;&amp;lt;
  { err: null,
    body: 
     { ok: true,
       id: 'f191a858a66828d8de66b3c974005346',
       rev: '1-4c6114c65e295552ab1019e2b046b10e' },
    headers: 
     { location: 'http://nodejsbug.iriscouch.com/testing_nock/f191a858a66828d8de66b3c974005346',
       date: 'Thu, 01 Dec 2011 16:42:22 GMT',
       'content-type': 'application/json',
       'cache-control': 'must-revalidate',
       'status-code': 201 } }
  # Insert a Document Into CouchDB
  ok 1 No errors
  ok 2 Contains ok
  ok 3 Rev exists
  ok 4 Id exists

  1..4
  # tests 4
  # pass  4

  # ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;code&gt;nano&lt;/code&gt; gives you a way to actually see all the HTTP traffic that it creates and receives. This is great but I still need to write code to support these interactions.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;nock&lt;/code&gt; this is super simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var nano = require('nano')('http://nodejsbug.iriscouch.com') 
  var nock = require('nock'); // we require nock
  var test = require('tap').test;
  var db   = nano.use('testing_nock');

  // tell nock to record the http interactions
  nock.recorder.rec();

  test('Insert a Document Into CouchDB', function(t) {
    t.plan(4);
    nano.db.create('testing_nock', function () {
      db.insert({foo: &quot;bar&quot;},
        function ensure_insert_worked_cb(err, doc) {
          t.notOk(err, 'No errors');
          t.ok(doc.ok, 'Contains ok');
          t.ok(doc.rev, 'Rev exists');
          t.ok(doc.id, 'Id exists');
        });
    });
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the tests returns:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ node test.js 

  &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;-- cut here --&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;

  nock('nodejsbug.iriscouch.com')
    .put('/testing_nock')
    .reply(412, &quot;{\&quot;error\&quot;:\&quot;file_exists\&quot;,\&quot;reason\&quot;:\&quot;The database could not be created, the file already exists.\&quot;}\n&quot;, { server: 'CouchDB/1.1.1 (Erlang OTP/R14B04)',
    date: 'Thu, 01 Dec 2011 17:43:30 GMT',
    'content-type': 'application/json',
    'content-length': '95',
    'cache-control': 'must-revalidate' });

  &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;-- cut here --&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;

  &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;-- cut here --&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;

  nock('nodejsbug.iriscouch.com')
    .post('/testing_nock', &quot;{\&quot;foo\&quot;:\&quot;bar\&quot;}&quot;)
    .reply(201, &quot;{\&quot;ok\&quot;:true,\&quot;id\&quot;:\&quot;8b787a6a1c2476ef9a2eed069e000ff0\&quot;,\&quot;rev\&quot;:\&quot;1-4c6114c65e295552ab1019e2b046b10e\&quot;}\n&quot;, { server: 'CouchDB/1.1.1 (Erlang OTP/R14B04)',
    location: 'http://nodejsbug.iriscouch.com/testing_nock/8b787a6a1c2476ef9a2eed069e000ff0',
    date: 'Thu, 01 Dec 2011 17:43:31 GMT',
    'content-type': 'application/json',
    'content-length': '95',
    'cache-control': 'must-revalidate' });

  &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;-- cut here --&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;

  # Insert a Document Into CouchDB
  ok 1 No errors
  ok 2 Contains ok
  ok 3 Rev exists
  ok 4 Id exists

  1..4
  # tests 4
  # pass  4

  # ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now all we need to do is add these nock http mocks and we are done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var nano = require('nano')('http://nodejsbug.iriscouch.com') 
  var nock = require('nock'); // we require nock
  var test = require('tap').test;
  var db   = nano.use('testing_nock');

  var couch = nock('nodejsbug.iriscouch.com')
    .put('/testing_nock')
    .reply( 412
     , &quot;{ \&quot;error\&quot;:\&quot;file_exists\&quot;&quot;+
        &quot;, \&quot;reason\&quot;:\&quot;The database could not be created, the file&quot; +
        &quot; already exists.\&quot;}\n&quot;
     , { server: 'CouchDB/1.1.1 (Erlang OTP/R14B04)'
     , date: 'Thu, 01 Dec 2011 17:43:30 GMT'
     , 'content-type': 'application/json'
     , 'content-length': '95'
     , 'cache-control': 'must-revalidate' })
    .post('/testing_nock', &quot;{\&quot;foo\&quot;:\&quot;bar\&quot;}&quot;)
    .reply(201
     , &quot;{ \&quot;ok\&quot;:true&quot; +
       &quot;, \&quot;id\&quot;:\&quot;8b787a6a1c2476ef9a2eed069e000ff0\&quot;&quot; +
       &quot;, \&quot;rev\&quot;:\&quot;1-4c6114c65e295552ab1019e2b046b10e\&quot;}\n&quot;
     , { server: 'CouchDB/1.1.1 (Erlang OTP/R14B04)'
     , location: 'http://nodejsbug.iriscouch.com/testing_nock/'
       + '8b787a6a1c2476ef9a2eed069e000ff0'
     , date: 'Thu, 01 Dec 2011 17:43:31 GMT'
     , 'content-type': 'application/json'
     , 'content-length': '95'
     , 'cache-control': 'must-revalidate' });

  test('Insert a Document Into CouchDB', function(t) {
    t.plan(4);
    nano.db.create('testing_nock', function () {
      db.insert({foo: &quot;bar&quot;},
        function ensure_insert_worked_cb(err, doc) {
          t.notOk(err, 'No errors');
          t.ok(doc.ok, 'Contains ok');
          t.ok(doc.rev, 'Rev exists');
          t.ok(doc.id, 'Id exists');
        });
    });
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All working, happy nocking! :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ node test.js 
  # Insert a Document Into CouchDB
  ok 1 No errors
  ok 2 Contains ok
  ok 3 Rev exists
  ok 4 Id exists

  1..4
  # tests 4
  # pass  4

  # ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the inquisitive types this is how nock intercepts the http requests: Nock uses the the fact that &lt;code&gt;node&lt;/code&gt; caches modules that you &lt;code&gt;require&lt;/code&gt; and overrides the behavior of the default HTTP request in node. So any request you do will be filtered by Nock. Check out the &lt;a href=&quot;https://github.com/pgte/nock/blob/master/lib/intercept.js&quot;&gt;source code&lt;/a&gt; if you want to see more details.&lt;/p&gt;</description><author>nunojobpinto@gmail.com (Nuno Job)</author></item><item><title>Managing module dependencies</title><link>https://howtonode.org/managing-module-dependencies</link><comments>https://howtonode.org/managing-module-dependencies#disqus_thread</comments><pubDate>Mon, 05 Dec 2011 10:30:20 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/managing-module-dependencies</guid><description>&lt;p&gt;Following &lt;a href=&quot;http://groups.google.com/group/nodejs/browse_thread/thread/9aa563f1fe3b3ff5&quot;&gt;this discussion&lt;/a&gt; on the node.js mailing list about managing module dependencies, I thought it's worth sharing some pointers on that here.&lt;/p&gt;

&lt;h2&gt;Using NPM to bundle your module dependencies&lt;/h2&gt;

&lt;p&gt;If you're building an application that is dependent on a number of NPM modules, you can specify them in your &lt;code&gt;package.json&lt;/code&gt; file this way: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;dependencies&quot;: {
  &quot;express&quot;: &quot;2.3.12&quot;,
  &quot;jade&quot;: &quot;&amp;gt;= 0.0.1&quot;,
  &quot;redis&quot;:   &quot;0.6.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By doing so, every time you checkout your project fresh, all you need to do to get your dependencies sorted out is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you can either require a specific version of a module, or a minimum version by prefixing the version number with &lt;code&gt;&amp;gt;=&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Managing development dependencies&lt;/h2&gt;

&lt;p&gt;If you have development related dependencies (e.g. testing framework) which you do not wish to install in production, specify them using the &lt;code&gt;devDependencies&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;devDependencies&quot;: {
  &quot;vows&quot;: &quot;&amp;gt;= 0.4.x&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On production, using &lt;code&gt;npm install --production&lt;/code&gt; will ensure that the development dependencies are not installed. &lt;/p&gt;

&lt;h2&gt;Managing private NPM modules&lt;/h2&gt;

&lt;p&gt;If you're working on a private module, you can also add &lt;code&gt;&quot;private&quot;: true&lt;/code&gt; to the &lt;code&gt;package.json&lt;/code&gt; file to prevent yourself from accidentally publishing your module to the NPM registry. &lt;/p&gt;

&lt;h2&gt;Specifying a git repo as a dependency&lt;/h2&gt;

&lt;p&gt;Finally, if you want to host your module in a private git repository, but still want to bundle it as a dependency to a project, you can do that too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;dependencies&quot;: {
    &quot;secret-module&quot;: &quot;git+ssh://git@github.com:username/secret-repo.git#v2.3&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last part of the URL (&lt;code&gt;v2.3&lt;/code&gt;) specifies which tag should be used. You can also specify a commit hash or a branch name. &lt;/p&gt;

&lt;p&gt;This feature was added to the NPM only around mid August, so you will need a recent version of NPM for this to work. There are a lot more such &lt;a href=&quot;https://github.com/isaacs/npm/issues?labels=nice+to+have&amp;amp;sort=created&amp;amp;direction=desc&amp;amp;state=open&amp;amp;page=1&quot;&gt;nifty feature requests&lt;/a&gt; in the pipeline, so keep a watch out for them on NPM's Github repo.&lt;/p&gt;</description><author>kishore@kishorelive.com (Kishore Nallan)</author></item><item><title>A Simple Blog with CouchDB, Bogart, and Node.js</title><link>https://howtonode.org/bogart-couchdb</link><comments>https://howtonode.org/bogart-couchdb#disqus_thread</comments><pubDate>Mon, 19 Sep 2011 10:53:58 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/bogart-couchdb</guid><description>&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; By request I have posted a &lt;a href=&quot;https://gist.github.com/1232272&quot;&gt;gist of the app.js&lt;/a&gt;
using &lt;em&gt;MongoDB&lt;/em&gt; instead of &lt;em&gt;CouchDB&lt;/em&gt;.  This gist also serves as a beginning example
for how to use non-promise-based APIs with bogart.&lt;/p&gt;

&lt;p&gt;In this article, you will learn how to use Bogart and CouchDB to create a minimal
blogging engine. The Express with MongoDB article was a huge hit. This article has
similar goals but shows a different way of using Node.JS.&lt;/p&gt;

&lt;h2&gt;Pre-Requisites&lt;/h2&gt;

&lt;h3&gt;npm&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/isaacs/npm&quot;&gt;npm&lt;/a&gt; is the most popular package manager for Node.js.
Installing npm is easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://npmjs.org/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A note for windows users: npm does not currently work on windows. It will in the future.&lt;/p&gt;

&lt;h3&gt;Bogart&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/nrstott/bogart&quot;&gt;Bogart&lt;/a&gt; is a Sinatra-like framework designed 
to make it easy to create JSGI compliant web applications for node.js.&lt;/p&gt;

&lt;p&gt;Bogart is in the npm registry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install bogart
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CouchDB&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://couchdb.apache.org&quot;&gt;CouchDB&lt;/a&gt; is a document-oriented database with 
a RESTful interface. CouchDB works well with JavaScript since CouchDB speaks JSON.
Also, CouchDB is queried using 'views' that are, by default, written in JavaScript.
&lt;a href=&quot;http://couchdb.apache.org/downloads.html&quot;&gt;Download the latest release&lt;/a&gt; from here.
CouchBase also maintains &lt;a href=&quot;http://www.couchbase.com/downloads&quot;&gt;debian and rpm packages&lt;/a&gt; 
for the community.&lt;/p&gt;

&lt;h2&gt;JSGI&lt;/h2&gt;

&lt;p&gt;Bogart is a JSGI-based framework. JSGI is specified by the CommonJS mailing list. Knowledge
of JSGI is helpful when dealing with Bogart; however, it is not necessary. You can find
&lt;a href=&quot;http://wiki.commonjs.org/wiki/JSGI&quot;&gt;more information about JSGI&lt;/a&gt; on the 
&lt;a href=&quot;http://wiki.commonjs.org&quot;&gt;CommonJS wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Mustache&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/janl/mustache.js&quot;&gt;Mustache&lt;/a&gt; is a minimal templating engine 
with {{mustaches}}. Mustache is the default templating engine of Bogart. 
When you install Bogart, you will also be installing Mustache.&lt;/p&gt;

&lt;h2&gt;CouchDB-CommonJS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/nrstott/couchdb-commonjs&quot;&gt;CouchDB-CommonJS&lt;/a&gt; is a promise-based 
CouchDB library available in the npm registry. It can also be used in the browser 
or with Narhwal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install couchdb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;What will our application do?&lt;/h2&gt;

&lt;p&gt;To keep things simple, we're going to only tackle basic functionality. Our blog
application will support the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new post (POST /posts)&lt;/li&gt;
&lt;li&gt;Show a list of all the posts (GET /posts)&lt;/li&gt;
&lt;li&gt;Show a single post (GET /posts/:id)&lt;/li&gt;
&lt;li&gt;Comment on a post (POST /posts/:id/comments)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Lets get started!&lt;/h2&gt;

&lt;p&gt;A Bogart application consists of a JSGI server with one or more pieces of middleware and 
one or more Bogart routers each containing any number of routes.&lt;/p&gt;

&lt;p&gt;The canonical 'Hello World' application in Bogart can be written as follows:&lt;/p&gt;

&lt;p&gt;&lt;bogart-couchdb/hello-world.js&gt;&lt;/p&gt;

&lt;p&gt;This JavaScript program defines a single route that accepts &lt;code&gt;GET&lt;/code&gt; requests to the root of the
site and returns a simple HTML greeting.&lt;/p&gt;

&lt;p&gt;To run this program, first execute the following commands to setup your blog directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir bogart-couchdb-blog
cd bogart-couchdb-blog
npm install bogart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a new directory named bogart-couchdb-blog and install bogart to the 
node_modules subdirectory of this directory. Next, copy the JavaScript into a file into
bogart-couchdb-blog and name it &lt;code&gt;hello-world.js&lt;/code&gt; and then execute&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node hello-world.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visit &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; in your browser.&lt;/p&gt;

&lt;h2&gt;Creating the package.json file&lt;/h2&gt;

&lt;p&gt;In order to manage dependencies, it is useful to create a &lt;code&gt;package.json&lt;/code&gt; file. This file
provides details on the packages you depend on so that you can more easily use &lt;code&gt;npm&lt;/code&gt; to manage
these dependencies.&lt;/p&gt;

&lt;p&gt;Create a file named &lt;code&gt;package.json&lt;/code&gt; in your &lt;code&gt;bogart-couchdb-blog&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;bogart-couchdb/package.json&gt;&lt;/p&gt;

&lt;p&gt;The most important field in this JSON file is the &lt;code&gt;dependencies&lt;/code&gt; field. This field will allow
you to execute &lt;code&gt;npm install&lt;/code&gt; to install the dependencies for your project.&lt;/p&gt;

&lt;h2&gt;Creating a Post&lt;/h2&gt;

&lt;p&gt;There are two routes that we will need in order to create a post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET /posts/new -&gt; returns a form to create a new post&lt;/li&gt;
&lt;li&gt;POST /posts -&gt; creates a new post from the form parameters provided&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The mustache template to create a new post is as follows:&lt;/p&gt;

&lt;p&gt;&lt;bogart-couchdb/new-post.html&gt;&lt;/p&gt;

&lt;p&gt;This post will be rendered inside of a layout to keep the look of the site consistant.
By convention, Bogart's view engine uses a file called &lt;code&gt;layout.html&lt;/code&gt; as the layout if
it exists. A Bogart layout is a template with a &lt;code&gt;{{{body}}}&lt;/code&gt; tag to include the
view inside of the layout.&lt;/p&gt;

&lt;p&gt;&lt;bogart-couchdb/layout.html&gt;&lt;/p&gt;

&lt;p&gt;The route to return the new post template makes use of the &lt;code&gt;bogart.respond&lt;/code&gt; helper. 
Even though it is not strictly necesarry to understand JSGI in order to use Bogart, 
lets go over the basic concept of a JSGI response. Bogart routes expect a JSGI response 
or a promise that will resolve to a JSGI response to be returned. A JSGI response is an 
object that contains three attributes: status (required), body (required), and headers (optional).&lt;/p&gt;

&lt;p&gt;A simple JSGI response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  status: 200,
  body: [ 'Hello World' ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Bogart route to render new-post.html is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;router.get('/posts/new', function(req) {
  return viewEngine.respond('new-post.html', {
    locals: {
      title: 'New Post'
    }
  })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;viewEngine&lt;/code&gt; should be defined at the beginning of the Bogart configuartion closure as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;viewEngine = bogart.viewEngine('mustache');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bogart supports &lt;code&gt;mustache&lt;/code&gt; out of the box. There is a &lt;code&gt;jade&lt;/code&gt; view engine in the package
bogart-jade. If you want to use &lt;code&gt;jade&lt;/code&gt; then &lt;code&gt;npm install bogart-jade&lt;/code&gt; and 
&lt;code&gt;require('bogart-jade')&lt;/code&gt;. After that, &lt;code&gt;bogart.viewEngine('jade')&lt;/code&gt; will work. It is easy to add
support for more view engines as well.&lt;/p&gt;

&lt;p&gt;Bogart includes useful middleware to make working with forms easy. Normally, &lt;code&gt;req.body&lt;/code&gt; will
contain the raw body of a form post. It is more conveniant if this is automatically converted to
a JSON object for us. The Bogart middleware &lt;code&gt;Parted&lt;/code&gt; accomplishes this.&lt;/p&gt;

&lt;p&gt;Adding middleware is easiest using a Bogart Application object.
JSGI &lt;code&gt;Parted&lt;/code&gt; middleware wraps the streaming multipart, json, and urlencoded parsing utility
&lt;a href=&quot;https://github.com/chjj/parted&quot;&gt;Parted&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var app = bogart.app();
app.use(bogart.middleware.Parted);
app.use(router);
app.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets take a side-step to discuss how we can work with CouchDB using the &lt;code&gt;couchdb&lt;/code&gt; package
from the npm registry.&lt;/p&gt;

&lt;p&gt;At the top of our &lt;code&gt;app.js&lt;/code&gt; add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var couchdb = require('couchdb');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the closure that configures Bogart routes, create a couchdb client and a database representation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var app = bogart.router(function(get, post, put, destroy) {

  var client     = couchdb.createClient(5984, '127.0.0.1', { user: 'myuser', password: 'mypass' })
    , db         = client.db('blog')
    , viewEngine = bogart.viewEngine('mustache');

  // configure routes...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a couchdb client connecting to '127.0.0.1' and port 5984. If your CouchDB is in
Admin Party, you do not need to supply the user and password in an options hash. If you have a 
CouchDB users setup, please provide your username and password.&lt;/p&gt;

&lt;p&gt;Now we will create a route to handle the &lt;code&gt;POST&lt;/code&gt; of our form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;router.post('/posts', function(req) {
  var post = req.params;
  post.type = 'post';

  return db.saveDoc.then(function(resp) {
    return bogart.redirect('/posts');
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We add the &lt;code&gt;type&lt;/code&gt; attribute to the &lt;code&gt;post&lt;/code&gt; so that as we add more document types in the future,
we can easily create CouchDB views to find only specific document types. This is not a built-in
CouchDB concept. It is a useful convention that makes creating views simpler.&lt;/p&gt;

&lt;h2&gt;Adding a CouchDB view to retrieve posts&lt;/h2&gt;

&lt;p&gt;CouchDB is queried using &lt;a href=&quot;http://wiki.apache.org/couchdb/HTTP_view_API&quot;&gt;map/reduce views&lt;/a&gt; 
that are defined on design documents. This means that we need to create a design
document before we can query a list of the posts in our database.&lt;/p&gt;

&lt;p&gt;Lets create a JavaScript file &lt;code&gt;syncDesignDoc.js&lt;/code&gt; in the &lt;code&gt;lib&lt;/code&gt; directory of our project.&lt;/p&gt;

&lt;p&gt;&lt;bogart-couchdb/syncDesignDoc.js&gt;&lt;/p&gt;

&lt;p&gt;Execute &lt;code&gt;node lib/syncDesignDoc.js&lt;/code&gt; to update the database with the latest design document.&lt;/p&gt;

&lt;h2&gt;Listing Posts&lt;/h2&gt;

&lt;p&gt;Lets create a Mustache template to list the posts from our database.&lt;/p&gt;

&lt;p&gt;&lt;bogart-couchdb/posts.html&gt;&lt;/p&gt;

&lt;p&gt;Next, lets create a Bogart route to render this template. We will query the database using
&lt;code&gt;db.view&lt;/code&gt;, process the response from CouchDB, and respond with the rendered template. Bogart
makes this easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  router.get('/posts', function(req) {

    return db.view('blog', 'posts_by_date').then(function(resp) {
      var posts = resp.rows.map(function(x) { return x.value; });

      return viewEngine.respond('posts.html', {
        locals: {
          posts: posts
        }
      });
    });
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Show an Individaul Post&lt;/h2&gt;

&lt;p&gt;It's time to create a route to show an individual post. This page will also contain
a form for adding comments.&lt;/p&gt;

&lt;p&gt;The template will be as follows:&lt;/p&gt;

&lt;p&gt;&lt;bogart-couchdb/post.html&gt;&lt;/p&gt;

&lt;p&gt;The Bogart route to display this is as simple as the route to display the form
for creating new posts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;router.get('/posts/:id', function(req) {
  return db.openDoc(req.params.id).then(function(post) {
    return viewEngine.respond('post.html', { locals: post });
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The route to accept the &lt;code&gt;POST&lt;/code&gt; from the comments form is similar to the route to accept
a new blog post:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;router.post('/posts/:id/comments', function(req) {
  var comment = req.params;

  return db.openDoc(req.params.id).then(function(post) {
    post.comments = post.comments || [];
    post.comments.push(comment);

    return db.saveDoc(post).then(function(resp) {
      return bogart.redirect('/posts/'+req.params.id);
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Summing it up&lt;/h2&gt;

&lt;p&gt;As you can see, getting started with Bogart and CouchDB is simple. We are a long way from 
having a full-featured blog, but hopefully this will inspire some out there to try
working with Node.JS, Bogart, and CouchDB!&lt;/p&gt;

&lt;p&gt;The full source code of the finished &lt;code&gt;app.js&lt;/code&gt; is below:&lt;/p&gt;

&lt;p&gt;&lt;bogart-couchdb/app.js&gt;&lt;/p&gt;</description><author>nrstott@gmail.com (Nathan Stott)</author></item><item><title>Fun Putting Node on Mobile Devices</title><link>https://howtonode.org/arm-chroot-fun</link><comments>https://howtonode.org/arm-chroot-fun#disqus_thread</comments><pubDate>Fri, 01 Jul 2011 12:04:02 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/arm-chroot-fun</guid><description>&lt;p&gt;This article will walk you through creating an Ubuntu image that can be chrooted inside a mobile device like the recently released &lt;a href=&quot;http://www.hpwebos.com/us/products/pads/touchpad/index.html&quot;&gt;TouchPad&lt;/a&gt;.  Once the Ubuntu environment is setup we'll learn how to compile and install node for fun and/or profit.&lt;/p&gt;

&lt;h2&gt;Create the Image&lt;/h2&gt;

&lt;p&gt;The first step is to create the image file that will be our virtual partition.  This is best done using &lt;code&gt;dd&lt;/code&gt;.  We can resize this later using &lt;code&gt;resize2fs&lt;/code&gt;, so for now make a nice small 512MB image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo dd if=/dev/zero of=UbuntuNatty_armel.img bs=1M count=512
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we want to put a filesystem on it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkfs.ext3 UbuntuNatty_armel.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have a fully functional filesystem.  Let's mount it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir build
sudo mount UbuntuNatty_armel.img build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, here is where the magic happens.  In this step I'm putting the Ubuntu Natty userspace in this new filesystem.  I have also done this with Debian Sid, but v8 doesn't compile without patches on arm Debian.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo qemu-debootstrap --arch armel --foreign natty build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point your image is ready to be put onto your mobile device, but let's explore for the magic for some fun.  First we want to &lt;code&gt;chroot&lt;/code&gt; into this system to interact with it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mount -t proc none build/proc
sudo mount -t sysfs none build/sys
sudo mount -o bind /dev build/dev
sudo cp /etc/resolv.conf build/etc/resolv.conf
sudo chroot build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;qemu-debootstrap&lt;/code&gt; process didn't seed this image with any apt repos, so lets add one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &quot;deb http://ports.ubuntu.com/ubuntu-ports/ natty main universe&quot; &amp;gt; /etc/apt/sources.list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let's see what kind of binaries live in this world.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install file -y
cd /usr/bin
./file ./file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just installed &lt;code&gt;file&lt;/code&gt;, a program that tells us stuff about files.  Then we told it to tell us about itself.  I got as output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file: ELF 32-bit LSB executable, ARM, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.16, stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the file we just executed on our intel laptop was an arm executable.  This magic is thanks to 
 file that &lt;code&gt;qemu-debootstrap&lt;/code&gt; installed for us.  The file &lt;code&gt;/usr/bin/qemu-arm-static&lt;/code&gt; is used to interpret arm binaries on the fly for us!&lt;/p&gt;

&lt;p&gt;Anyway, enough fun, let's put this on some real arm hardware.  In this article I'll use webOS since it encourages homebrew exerimentation unlike certain competitors.  It should work on any arm device where you have linux and a root login.&lt;/p&gt;

&lt;p&gt;To keep our host machine happy, we should logout of the chroot and clean things up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exit
sudo umount build/sys
sudo umount build/proc
sudo umount build/dev
sudo umount build
rmdir build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have a fully functional Ubuntu system in a single file.&lt;/p&gt;

&lt;p&gt;On webOS the easiest way to put a file on the drive is to use &lt;code&gt;novacom put&lt;/code&gt; (part of the webOS SDK).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;novacom put file://media/internal/UbuntuNatty_armel.img &amp;lt; UbuntuNatty_armel.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then log into the device and mount it on the internal drive.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;novaterm
mkdir /media/chroot
mount /media/internal/UbuntuNatty_armel.img /media/chroot
mount -t proc none /media/chroot/proc
mount -t sysfs none /media/chroot/sys
mount -o bind /dev /media/chroot/dev
cp /etc/resolv.conf /media/chroot/etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we're ready to enter this chroot. I don't like being root all the time, so I created a local user. Since the chroot shares user id's with the chroot, but has it's own user listing, we have to add the user twice.  First in the host system, add a new user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adduser tim
id tim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the uid of the new user and group.  My was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uid=1002(tim) gid=1002(tim) groups=1002(tim)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let's enter the chroot and mirror the user there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chroot /media/chroot
adduser tim --uid 1002
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we should add sudo access to this user.  Read up on &lt;code&gt;visudo&lt;/code&gt; if you don't know how to do this.  On Ubuntu, this is as simple as installing sudo and adding our user to it's group.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install sudo
adduser tim sudo
echo &quot;127.0.0.1 &quot;`hostname` &amp;gt;&amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can logout and login as our user this time.  Note I use &lt;code&gt;login&lt;/code&gt; instead of the default shell to make the chroot a more full experience.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exit
chroot /media/chroot login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing I do is then install some useful stuff I use all the time.  These are optional, but I would recommend looking into them and seeing if they work for you.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install vim tree strace htop dstat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this is a nodeJS blog, we'll download and compile node.  Note that these instructions will work for any recent ubuntu system.  First let's install the dependencies to install node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install git curl build-essential libssl-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I like to use nvm so I can compare multiple versions of node on the same system.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone http://github.com/creationix/nvm.git
. nvm/nvm.sh               # Load the nvm function into this environment
export JOBS=2              # This should match the number of CPUs you have.
nvm install v0.4.9         # Download, build, and install node and npm
nvm alias default v0.4.9   # Make this the default upon nvm load (login)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I would then add the &lt;code&gt;. $HOME/nvm/nvm.sh&lt;/code&gt; line to my &lt;code&gt;.bashrc&lt;/code&gt; so I get the nvm environment on every login.&lt;/p&gt;

&lt;p&gt;Now that we have a normal node environment, we can do things like install http_trace and watch traffic over wifi or the modem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install libpcap-dev
npm install -g http_trace
sudo su
. /home/tim/nvm/nvm.sh
http_trace --headers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make setup and teardown of the chroot easier, I'd recommend making shell scripts that contain the following.  For setup. (this runs outside the chroot)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mount /media/internal/UbuntuNatty_armel.img /media/chroot
mount -t proc none /media/chroot/proc
mount -t sysfs none /media/chroot/sys
mount -o bind /dev /media/chroot/dev
cp /etc/resolv.conf /media/chroot/etc/resolv.conf
chroot /media/chroot login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for cleanup.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;umount /media/chroot/proc
umount /media/chroot/sys
umount /media/chroot/dev
umount /media/chroot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now have a nice portable Ubuntu system complete with working apt-get, nvm, node, and npm. If you run out of space you can reclaim some by running &lt;code&gt;apt-get clean&lt;/code&gt; from within the chroot.  Also you can resize the partition when it's not mounted using &lt;code&gt;resize2fs&lt;/code&gt;.  This image can be copied to other devices and reused there.&lt;/p&gt;

&lt;p&gt;You'd be surprised what you can do in this environment that works in the host environment at well.  For example, I've found that Ubuntu's &lt;code&gt;htop&lt;/code&gt; program will run as is in the host webOS environment.  I just copied the one in &lt;code&gt;/media/chroot/usr/bin/htop&lt;/code&gt; to &lt;code&gt;/usr/bin/htop&lt;/code&gt;.  Also I found that SDL programs build in the Ubuntu environment will successfully link with the sdl libraries that are part of the PDK system and they will launch as cards when run in the host environment.  With things like SDL bindings for node, you would be able to develop PDK apps in JavaScript on your TouchPad. See &lt;a href=&quot;https://github.com/creationix/node-sdl&quot;&gt;https://github.com/creationix/node-sdl&lt;/a&gt; for a start on such a library.  This library was developed, compiled and tested 100% on my TouchPad using my laptop as a bigger screen and keyboard.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>How To Module</title><link>https://howtonode.org/how-to-module</link><comments>https://howtonode.org/how-to-module#disqus_thread</comments><pubDate>Mon, 28 Feb 2011 13:07:42 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/how-to-module</guid><description>&lt;hr /&gt;

&lt;h3&gt;UPDATE:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This article was written for Node v0.4.1 and is no longer applicable. As of node.js 0.6.3 NPM comes pre-installed.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;These are some basic steps for writing a NodeJS module.&lt;/p&gt;

&lt;p&gt;Most of the suggestions in this document are optional.  You
can definitely write your program however you like, and many in the
node community enjoy trying out new creative ways of doing things.&lt;/p&gt;

&lt;p&gt;This is merely a set of patterns that noders have found to work for
them and their projects.&lt;/p&gt;

&lt;h2&gt;Use Git&lt;/h2&gt;

&lt;p&gt;Most people in the node community use git for all their version control
needs.  It is an extremely powerful and robust tool.  If you don't
already use it, you should.&lt;/p&gt;

&lt;p&gt;Don't wait until your program is &quot;ready&quot; before using git on it!  Run
&lt;code&gt;git init&lt;/code&gt; in the root of your project folder right away, and commit
your changes as you make them.  It is a good habit, and can help avoid a
lot of painful mishaps.&lt;/p&gt;

&lt;p&gt;If you wish to share your program with others, then github is also a
tremendously useful resource that most nodejs developers use.&lt;/p&gt;

&lt;h2&gt;A package.json File&lt;/h2&gt;

&lt;p&gt;Create a file in the root of your program named &lt;code&gt;package.json&lt;/code&gt;.  This
file is a json description of what's in your project.  If you're just
writing a standalone server or website that isn't intended to ever be
shared, then this is not strictly necessary, but it still does make some
things more convenient.&lt;/p&gt;

&lt;p&gt;If you plan to publish your program and let others install it using
&lt;a href=&quot;http://npmjs.org/&quot;&gt;npm&lt;/a&gt;, then a package.json file is essential.&lt;/p&gt;

&lt;p&gt;You can specify in this file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name, version, description, and keywords to describe your program.&lt;/li&gt;
&lt;li&gt;A homepage where users can learn more about it.&lt;/li&gt;
&lt;li&gt;Other packages that yours depends on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have installed &lt;a href=&quot;http://npmjs.org/&quot;&gt;npm&lt;/a&gt;, then you can use the
&lt;code&gt;npm init&lt;/code&gt; command to get started.  See &lt;code&gt;npm help json&lt;/code&gt; for lots of
information about everything you can put in this file.&lt;/p&gt;

&lt;p&gt;If you are writing a program that is intended to be used by others, then
the most important thing to specify in your &lt;code&gt;package.json&lt;/code&gt; file is the
&lt;code&gt;main&lt;/code&gt; module.  This is the module that is the entry point to your
program.&lt;/p&gt;

&lt;p&gt;Documenting your dependencies is really handy.  It is a very polite
practice if you are going to share this program with others, and it
provides a lot of useful techniques if you are deploying it somewhere.&lt;/p&gt;

&lt;h2&gt;README, and other docs&lt;/h2&gt;

&lt;p&gt;Put basic entry-level documentation about your program in a README file
in the root of your project.&lt;/p&gt;

&lt;p&gt;If you enjoy the markdown format, you can write it in markdown, and save
the file as README.md.&lt;/p&gt;

&lt;p&gt;Seriously, do this!  Even if you think you'll never have users, history
teaches us that you'll go off and forget what this thing is for, and
then come back to it and curse yourself for not documenting it even a
little.&lt;/p&gt;

&lt;p&gt;So document it.  Even a little.&lt;/p&gt;

&lt;p&gt;If you feel so inclined, it's also a great idea to put documentation in
a folder called &lt;code&gt;./docs&lt;/code&gt;.  Markdown files should end in &lt;code&gt;.md&lt;/code&gt; and html
should end in &lt;code&gt;.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Testing&lt;/h2&gt;

&lt;p&gt;There is a ton of information out there convincing you about the
importance of testing and documentation.  I don't have to tell you how
important that is.  It's really important, and that should be obvious.
Do it.&lt;/p&gt;

&lt;p&gt;What's not quite so obvious is &lt;em&gt;how&lt;/em&gt; you should go about doing this.&lt;/p&gt;

&lt;p&gt;First of all, testing.&lt;/p&gt;

&lt;p&gt;There is no single way that all node modules get tested.  The node
program itself uses a python-based system that runs all the JS files in
a particular directory.  Most of those files just throw if they find an
error, and since the tests are very low-level, that is a good system.&lt;/p&gt;

&lt;p&gt;Other projects find it useful to use test harnesses like vows or
expresso.  Whatever testing option you go with, it's worth it.  Write
tests.&lt;/p&gt;

&lt;p&gt;If you are writing a re-usable program that you want to distribute to
others, you should also add &lt;code&gt;&quot;scripts&quot;:{&quot;test&quot;:&quot;run some program&quot;}&lt;/code&gt; to
your package.json file.  What that lets you do is &lt;code&gt;npm test my-program&lt;/code&gt;
to run the command you specify.&lt;/p&gt;

&lt;p&gt;Plans are underway to do interesting things with the test scripts and
doc directories of packages that get published to the npm registry.&lt;/p&gt;

&lt;h2&gt;What kind of thing are you making?&lt;/h2&gt;

&lt;p&gt;Generally, node modules fall into these rough categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A binding to some C or C++ library.&lt;/li&gt;
&lt;li&gt;A library of functionality to be used in other node programs, written
primarily in JavaScript.&lt;/li&gt;
&lt;li&gt;A command-line program.&lt;/li&gt;
&lt;li&gt;A website or server or something.  (That is, an implementation that
you'll put on an actual server, not a framework.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a lot of overlap in these categories.  A thing doesn't have to
be just one sort of thing.&lt;/p&gt;

&lt;h2&gt;Writing a Binding&lt;/h2&gt;

&lt;p&gt;Typically, C++ source code is put in a subdirectory of your project
called &lt;code&gt;./src&lt;/code&gt;.  C++ files usually have the extension &lt;code&gt;.cc&lt;/code&gt;.  C files
usually have the extension &lt;code&gt;.c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Generally, the simplest and best approach is to put the minimum
necessary effort into the C++ layer, and then make the functions &quot;nice&quot;
by wrapping a JavaScript layer around the raw binding.&lt;/p&gt;

&lt;p&gt;Node programs use the included &lt;code&gt;node-waf&lt;/code&gt; program to compile.  Create a
&lt;code&gt;wscript&lt;/code&gt; file with the appropriate rules in it, and then run &lt;code&gt;node-waf
configure build&lt;/code&gt; to build your module.&lt;/p&gt;

&lt;p&gt;Use the &lt;code&gt;eio&lt;/code&gt; thread pool to do any actions that perform synchronous
I/O.  Note that v8 constructs may not be used on the thread pool, so
data types must be passed into the sync code blocks as eio_request
structs.&lt;/p&gt;

&lt;p&gt;See these examples to get started building a binding that leverages
eio and node-waf:&lt;/p&gt;

&lt;p&gt;Example hello-world-ish programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pkrumins/node-async&quot;&gt;https://github.com/pkrumins/node-async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/isaacs/node-async-simple&quot;&gt;https://github.com/isaacs/node-async-simple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pkrumins/node-png&quot;&gt;https://github.com/pkrumins/node-png&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mranney/node_pcap&quot;&gt;https://github.com/mranney/node_pcap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ry/node_postgres&quot;&gt;https://github.com/ry/node_postgres&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/isaacs/node-glob&quot;&gt;https://github.com/isaacs/node-glob&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Writing a Library&lt;/h2&gt;

&lt;p&gt;If you have a lot of JavaScript code, then the custom is to put it in
the &lt;code&gt;./lib&lt;/code&gt; folder in your project.&lt;/p&gt;

&lt;p&gt;Specify a &lt;code&gt;main&lt;/code&gt; module in your package.json file.  This is the module
that your users will load when they do &lt;code&gt;require('your-library')&lt;/code&gt;.  This
module should ideally expose all of the functionality in your library.&lt;/p&gt;

&lt;p&gt;If you want your users to be able to load sub-modules from the &quot;guts&quot; of
your library, then they'll need to specify the full path to them.  That
is a lot of work to document!  It's better and more future-proof to
simply specify a main module, and then, if necessary, have ways to
dynamically load what they need.&lt;/p&gt;

&lt;p&gt;For example, you might have a &lt;code&gt;flip&lt;/code&gt; library that is a collection of
&lt;code&gt;widget&lt;/code&gt; objects, defined by files in the &lt;code&gt;flip/lib/widgets/*.js&lt;/code&gt; files.
Rather than having your users do &lt;code&gt;require('flip/lib/widgets/blerg.js')&lt;/code&gt;
to get the blerg widget, it's better to have something like:
&lt;code&gt;require('flip').loadWidget('blerg')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, a library may also include a build step that compiles an
add-on that it uses.&lt;/p&gt;

&lt;p&gt;Since libraries take so many different shapes for different purposes,
there isn't really a single way to do it.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/learnboost/Socket.IO-node&quot;&gt;https://github.com/learnboost/Socket.IO-node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://documentcloud.github.com/underscore&quot;&gt;http://documentcloud.github.com/underscore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/senchalabs/connect&quot;&gt;https://github.com/senchalabs/connect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mikeal/request&quot;&gt;https://github.com/mikeal/request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/tmpvar/jsdom&quot;&gt;http://github.com/tmpvar/jsdom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Writing a Command Line Program&lt;/h2&gt;

&lt;p&gt;The only feature that differentiates a command-line program from a
library is the &lt;code&gt;bin&lt;/code&gt; field in the package.json file.&lt;/p&gt;

&lt;p&gt;When installed with npm, the &lt;code&gt;bin&lt;/code&gt; field in a package.json file tells
npm to create an executable in the PATH that runs your program.&lt;/p&gt;

&lt;p&gt;In a nodejs script, the &lt;code&gt;process.argv&lt;/code&gt; is an array of strings that
represent the command the user started node with.  The first item is
always node, and the second is always your program.  Generally, the
arguments to your program can be retrieved via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var args = process.argv.slice(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a variety of option parsing libraries available via npm.&lt;/p&gt;

&lt;p&gt;The current working directory can be found by calling &lt;code&gt;process.cwd()&lt;/code&gt;,
and changed with &lt;code&gt;process.chdir(newPath)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://npmjs.org/&quot;&gt;http://npmjs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zpoley/json-command&quot;&gt;https://github.com/zpoley/json-command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cloudhead/vows&quot;&gt;https://github.com/cloudhead/vows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LearnBoost/cluster&quot;&gt;https://github.com/LearnBoost/cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Writing a Standalone Server&lt;/h2&gt;

&lt;p&gt;This is probably the most &quot;normal&quot; node programming model.  You just
want to &lt;em&gt;use&lt;/em&gt; these modules, and most likely have no intention of
distributing it for others.&lt;/p&gt;

&lt;p&gt;To be most effective, it's often a good idea to avoid trying to
re-invent sections of your program that can be accomplished using
others' modules.  npm is a wonderfully helpful tool here.  If you're
planning on using Redis in your site, you can do &lt;code&gt;npm ls redis&lt;/code&gt; to look
for modules that might provide bindings to it.&lt;/p&gt;

&lt;p&gt;Also, the &lt;a href=&quot;http://search.npmjs.org/&quot;&gt;npm search site&lt;/a&gt; is extremely
helpful.  There, you can search using the same keyword greps as &lt;code&gt;npm
ls&lt;/code&gt;, but it also shows which packages depend on which other ones, the
dates of previous releases, the owner information, and so on.&lt;/p&gt;

&lt;p&gt;It's very important, when designing your program, to consider where you
are planning on deploying it, and how.  Joyent has a node hosting
service at &lt;a href=&quot;http://no.de/&quot;&gt;http://no.de/&lt;/a&gt;.  When you push your code to the no.de site,
it will automatically restart the server by running the &lt;code&gt;server.js&lt;/code&gt; file
in the root of your project.  So, it's a good idea to make that your
entry point.&lt;/p&gt;

&lt;p&gt;No matter where you decide to deploy your program,
any dependencies that you place in a &lt;code&gt;node_modules&lt;/code&gt; folder in the root
of your program will be loaded as if they are native modules.  So, if
you drop the &lt;code&gt;redis&lt;/code&gt; package into &lt;code&gt;./node_modules/redis&lt;/code&gt; then you could
do &lt;code&gt;require('redis')&lt;/code&gt; in your program to load it.  This makes it very
easy to re-use code, while still keeping the tested versions of your
dependencies with your code.&lt;/p&gt;

&lt;h2&gt;Don't forget...&lt;/h2&gt;

&lt;p&gt;The node community is growing fast, and welcomes your struggles and
experience.  If you run into troubles, jump in the #node.js IRC channel
on irc.freenode.net, or ask on the &lt;a href=&quot;http://groups.google.com/group/nodejs&quot;&gt;nodejs mailing
list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you build something useful, publish it with &lt;a href=&quot;http://npmjs.org/&quot;&gt;npm&lt;/a&gt;,
and tell people about it.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;</description><author>i@izs.me (Isaac Z. Schlueter)</author></item><item><title>Realtime Performance Visualizations using Node.js</title><link>https://howtonode.org/heat-tracer</link><comments>https://howtonode.org/heat-tracer#disqus_thread</comments><pubDate>Mon, 21 Feb 2011 13:04:30 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/heat-tracer</guid><description>&lt;p&gt;This article outlines how to create a realtime heatmap of your syscall latency using HTML5, some great node modules, and DTrace. It was inspired by talk that Bryan Cantrill and Brendan Greg gave on Joyent's cool cloud analytics tools. While specific, the code provided could easily be adapted to provide a heatmap of any type of aggregation Dtrace is capable of providing. &lt;/p&gt;

&lt;h2&gt;System Requirements&lt;/h2&gt;

&lt;p&gt;First thing's first, you're going to need a system with DTrace. This likely means Solaris (or one of its decedents), OS X, or a BSD variant.  There doesn't appear to be Dtrace available for Linux. &lt;/p&gt;

&lt;h2&gt;Security&lt;/h2&gt;

&lt;p&gt;Secondly, please be aware that at the time of writing the demo code contains a fairly substantial secruity vulnerabilty. Namely the d script is sent from the client with no authentication whatsoever. If you bind to localhost this shouldn't be a big deal for a demo. Time permitting I intend to clean up the code.  &lt;/p&gt;

&lt;h2&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;For this tutorial you'll also need:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node - http://nodejs.org/#download (duh)
npm - https://github.com/isaacs/npm (makes installing modules a breeze)
node-libdtrace - https://github.com/bcantrill/node-libdtrace (provides dtrace functionality)
Socket.IO - 'npm install socket.io' (web sockets made easy)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Server&lt;/h2&gt;

&lt;p&gt;Now we're ready to start writing our web server: &lt;/p&gt;

&lt;p&gt;&lt;heat-tracer/heat_tracer.js&gt;&lt;/p&gt;

&lt;h2&gt;Client&lt;/h2&gt;

&lt;p&gt;In order to display our heatmap, we're going to need some basic HTML with a canvas element:&lt;/p&gt;

&lt;p&gt;&lt;heat-tracer/public/heat_tracer.html&gt;&lt;/p&gt;

&lt;p&gt;Finally the JavaScript client which translates the raw  streaming data into pretty picture:&lt;/p&gt;

&lt;p&gt;&lt;heat-tracer/public/heat_tracer_client.js&gt;&lt;/p&gt;

&lt;h2&gt;Run It!&lt;/h2&gt;

&lt;p&gt;Run Heat Tacer with the following. Note, sudo is required by dtrace as it does kernal magic.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo node heat_tracer.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all goes well you should see something a moving version of something like the image below.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;heat-tracer/heat_tracer.png&quot; alt=&quot;Alt value of image&quot; title=&quot;&quot; /&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Contribute&lt;/h2&gt;

&lt;p&gt;You can find the latest version of Heat Tracer &lt;a href=&quot;https://github.com/gflarity/Heat-Tracer&quot;&gt;here&lt;/a&gt;. It is my hope that this article will provide the ground work for a much more abitious performance analytics project. If you're interested in contributing please let me know.&lt;/p&gt;

&lt;h2&gt;Further Research&lt;/h2&gt;

&lt;p&gt;More information about Bryan and Brendan's demo can be found &lt;a href=&quot;http://dtrace.org/blogs/brendan/2011/01/24/cloud-analytics-first-video/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Socket.IO can be found &lt;a href=&quot;http://socket.io/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</description><author>geoff.flarity@gmail.com (Geoff Flarity)</author></item><item><title>Node.js and Redis Pub-Sub</title><link>https://howtonode.org/redis-pubsub</link><comments>https://howtonode.org/redis-pubsub#disqus_thread</comments><pubDate>Wed, 01 Dec 2010 22:36:43 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/redis-pubsub</guid><description>&lt;blockquote&gt;
  &lt;p&gt;This is the 7th in a series of posts leading up to &lt;a href=&quot;http://nodeknockout.com/&quot;&gt;Node.js Knockout&lt;/a&gt; on how to use &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;. This post, &lt;a href=&quot;http://github.com/waratuman/flight-stream&quot;&gt;cross-posted from GitHub&lt;/a&gt;, was written by &lt;a href=&quot;http://github.com/waratuman&quot;&gt;James Bracy&lt;/a&gt;, founder of &lt;a href=&quot;http://redistogo.com&quot;&gt;Redis To Go&lt;/a&gt;. &lt;a href=&quot;http://redistogo.com&quot;&gt;Redis To Go&lt;/a&gt; is a dead simple solution for managed Redis instances.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Node.js and Redis Pub-Sub&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; is a perfect platform for creating event driven
applications. &lt;a href=&quot;http://code.google.com/p/redis/&quot;&gt;Redis&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/WebSockets&quot;&gt;WebSockets&lt;/a&gt;
are great companions to Node.js. The following tutorial will walk through the
steps to build a web application that streams real time flight information
using Node.js, Redis, and WebSockets.&lt;/p&gt;

&lt;h2&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;Node.js, Redis, and a WebSocket enabled browser (&lt;a href=&quot;http://www.mozilla.com/en-US/firefox/beta/&quot;&gt;Firefox 4&lt;/a&gt;,
&lt;a href=&quot;http://www.google.com/chrome&quot;&gt;Google Chrome 4&lt;/a&gt;, or &lt;a href=&quot;http://www.apple.com/safari/&quot;&gt;Safari 5&lt;/a&gt;)
are required. A tutorial covering the installation of Node.js can be found
&lt;a href=&quot;http://nodeknockout.posterous.com/countdown-to-knockout-post-1-how-to-install-n&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The easiest way to get a Redis instance would be to use &lt;a href=&quot;http://redistogo.com/&quot;&gt;Redis To Go&lt;/a&gt;.
The free plan is all that is needed for this tutorial. If you wish to install
locally run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone http://github.com/antirez/redis.git
$ cd redis/src
$ make
$ sudo make install
$ cd ../..
$ rm -rf redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can start a Redis instance locally using the &lt;code&gt;redis-server&lt;/code&gt; command.&lt;/p&gt;

&lt;h2&gt;Create the Project&lt;/h2&gt;

&lt;p&gt;Create a directory for the project. We will name the project &quot;Flight Stream&quot;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir flight-stream
$ cd flight-stream
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The project will require the Node.js Redis client &lt;a href=&quot;http://github.com/fictorial/redis-node-client&quot;&gt;&lt;code&gt;redis-client&lt;/code&gt;&lt;/a&gt;,
the WebSocket library &lt;a href=&quot;http://github.com/miksago/node-websocket-server&quot;&gt;&lt;code&gt;node-websocket-server&lt;/code&gt;&lt;/a&gt;,
and the MIME library &lt;a href=&quot;http://github.com/bentomas/node-mime&quot;&gt;node-mime&lt;/a&gt;. Create
a &lt;code&gt;lib&lt;/code&gt; directory and copy the libraries to this directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir lib
$ cd lib
$ curl -O http://github.com/fictorial/redis-node-client/raw/master/lib/redis-client.js \
       -O http://github.com/bentomas/node-mime/raw/master/mime.js \
       -O http://github.com/miksago/node-websocket-server/raw/master/lib/ws.js
$ mkdir ws
$ cd ws
$ curl -O http://github.com/miksago/node-websocket-server/raw/master/lib/ws/connection.js \
       -O http://github.com/miksago/node-websocket-server/raw/master/lib/ws/manager.js
$ cd ../..
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Create the Server&lt;/h2&gt;

&lt;p&gt;Initially the Node.js server will simply server the static index.html file that
will be create. Create the &lt;code&gt;server.js&lt;/code&gt; file and add the following code:&lt;/p&gt;

&lt;p&gt;&lt;redis-pubsub/server.js&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;httpServer&lt;/code&gt; serves the static files in the &lt;code&gt;public&lt;/code&gt; directory. The
&lt;code&gt;server&lt;/code&gt; is what will be handling the WebSocket connections.&lt;/p&gt;

&lt;p&gt;Create the &lt;code&gt;public&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now copy the source for the index and stylesheets from &lt;a href=&quot;http://github.com/waratuman/flight-stream&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd public
$ curl -O http://github.com/waratuman/flight-stream/raw/master/public/application.css \
       -O http://github.com/waratuman/flight-stream/raw/master/public/reset.css \
       -O http://github.com/waratuman/flight-stream/raw/master/public/jquery.js \
       -O http://github.com/waratuman/flight-stream/raw/master/public/text.css \
       -O http://github.com/waratuman/flight-stream/raw/master/public/index.html
$ mkdir images
$ cd images
$ curl -O http://github.com/waratuman/flight-stream/raw/master/public/images/background.png \
       -O http://github.com/waratuman/flight-stream/raw/master/public/images/red.png \
       -O http://github.com/waratuman/flight-stream/raw/master/public/images/orange.png \
       -O http://github.com/waratuman/flight-stream/raw/master/public/images/green.png \
       -O http://github.com/waratuman/flight-stream/raw/master/public/images/blue.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point you should be able to run &lt;code&gt;node server.js&lt;/code&gt; and see the index
page when you got to &lt;code&gt;localhost:8000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now lets get &lt;code&gt;redis-client&lt;/code&gt; working in the server. The following lines
establish a connection to Redis. The &lt;code&gt;connected&lt;/code&gt; and &lt;code&gt;reconnected&lt;/code&gt; listeners
authenticate the connection after it has been established.&lt;/p&gt;

&lt;p&gt;&lt;redis-pubsub/redis-client.js&gt;&lt;/p&gt;

&lt;p&gt;&lt;cite style=&quot;float: right;&quot;&gt;View the full source &lt;a href=&quot;http://github.com/waratuman/flight-stream/blob/master/server.js&quot;&gt;here&lt;/a&gt;&lt;/cite&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now subscribe to the &lt;code&gt;flight_stream&lt;/code&gt; channel on Redis.&lt;/p&gt;

&lt;p&gt;&lt;redis-pubsub/redis-subscribe.js&gt;&lt;/p&gt;

&lt;p&gt;&lt;cite style=&quot;float: right;&quot;&gt;View the full source &lt;a href=&quot;http://github.com/waratuman/flight-stream/blob/master/server.js&quot;&gt;here&lt;/a&gt;&lt;/cite&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Whenever a message is published the function passed to the &lt;code&gt;subscribeTo&lt;/code&gt;
method will get called. In this case we try to parse the message as JSON then
publish it to all of the clients if the flight is leaving Boston or arriving
at Boston.&lt;/p&gt;

&lt;h1&gt;Client&lt;/h1&gt;

&lt;p&gt;Next the client will need to be coded. I previously created the HTML for this
app, so all that we need to do is set up the WebSockets.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;public/application.js&lt;/code&gt; and insert the following code. This code will
create a WebSocket if the browser supports it and if it does, create a
connection with the server. When a message is received, another row will be
inserted on the page displaying the flight.&lt;/p&gt;

&lt;p&gt;&lt;redis-pubsub/application.js&gt;&lt;/p&gt;

&lt;p&gt;The functions &lt;code&gt;delay_color&lt;/code&gt; and &lt;code&gt;delay_name&lt;/code&gt; are helper functions for
displaying text and selecting the right class for styling.&lt;/p&gt;

&lt;p&gt;Now you can start the server, go to &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt;
and you should start seeing updates roll in. If you are using your own Redis,
you are going to need to publish something to the &lt;code&gt;flight_stream&lt;/code&gt;. Here is a 
sample message that you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &quot;number&quot;: &quot;482&quot;,
    &quot;status&quot;: &quot;Scheduled&quot;,
    &quot;origin&quot;: {
        &quot;gate_delay&quot;: 0,
        &quot;icao&quot;: &quot;KSFO&quot;,
        &quot;name&quot;: &quot;San Francisco International Airport&quot;,
        &quot;iata&quot;: &quot;SFO&quot;,
        &quot;gate&quot;: &quot;3-88&quot;
    },
    &quot;destination&quot;: {
        &quot;gate_delay&quot;: 0,
        &quot;icao&quot;: &quot;KBOS&quot;,
        &quot;name&quot;: &quot;Denver International Airport&quot;,
        &quot;iata&quot;: &quot;BOS&quot;,
        &quot;gate&quot;: &quot;-&quot;
    },
    &quot;airline&quot;: {
        &quot;icao&quot;: &quot;UAL&quot;,
        &quot;name&quot;: &quot;United Airlines&quot;,
        &quot;iata&quot;: &quot;UA&quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using the Redis instance used throughout the tutorial, you will
start seeing flight come up. I will be publishing some data every few seconds
to the instance for the coming days.&lt;/p&gt;

&lt;h2&gt;Basic Operations&lt;/h2&gt;

&lt;p&gt;Basic operations were not really covered in this tutorial, so here are some
examples to get you started.&lt;/p&gt;

&lt;p&gt;&lt;redis-pubsub/basic-operations.js&gt;&lt;/p&gt;</description><author>waratuman@gmail.com (James R. Bracy)</author></item><item><title>Creating safe and composable 'mixins' with traits.js</title><link>https://howtonode.org/traitsjs</link><comments>https://howtonode.org/traitsjs#disqus_thread</comments><pubDate>Wed, 10 Nov 2010 12:33:29 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/traitsjs</guid><description>&lt;p&gt;In this article I will introduce &lt;a href=&quot;http://traitsjs.github.io/traits.js-website/&quot;&gt;&lt;em&gt;traits.js&lt;/em&gt;&lt;/a&gt;, a small library to define, compose and instantiate traits. Traits are reusable sets of properties and form an alternative to multiple inheritance or mixins.&lt;/p&gt;

&lt;h2&gt;Traits for Javascript&lt;/h2&gt;

&lt;p&gt;A common pattern in Javascript is to add (&quot;mixin&quot;) the properties of one object to another object. &lt;em&gt;traits.js&lt;/em&gt; provides a few simple functions for performing this pattern safely as it will detect and report conflicts (name clashes) created during a composition. Also, a trait can specify that it can only be added to an object that defines certain required properties, and will fail to compose if these requirements are not satisfied.&lt;/p&gt;

&lt;p&gt;There exist many libraries that add trait support to Javascript in one way or another. What makes &lt;em&gt;traits.js&lt;/em&gt; different?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is minimal. &lt;em&gt;traits.js&lt;/em&gt; introduces just a handful of methods to create, combine and instantiate traits. Moreover, it doesn't try to introduce the concept of a &quot;class&quot; in Javascript. &lt;em&gt;traits.js&lt;/em&gt; reuses Javascript functions for the roles traditionally attributed to classes. A class is just a function that returns new trait instances.&lt;/li&gt;
&lt;li&gt;It reuses and extends the &lt;a href=&quot;http://ejohn.org/blog/ecmascript-5-objects-and-properties/&quot;&gt;property descriptor&lt;/a&gt; format, introduced in ECMAScript 5th edition for describing objects using &lt;code&gt;Object.create&lt;/code&gt;, as the format for representing traits. This has two implications: first, it means &lt;em&gt;traits.js&lt;/em&gt; traits can be used as an argument to ES5 built-ins such as &lt;code&gt;Object.create&lt;/code&gt;. Second, it means &lt;em&gt;traits.js&lt;/em&gt;'s own functions, described later, can operate on standard ES5 object descriptions, as composed from the return value of built-ins such as &lt;code&gt;Object.getOwnPropertyDescriptor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It embraces a functional programming style: the core of &lt;em&gt;traits.js&lt;/em&gt; consists of a handful of &quot;trait combinator&quot; functions, which take traits as their argument and return new traits. These combinators are pure functions: they have no side-effects and do not modify their argument values, instead producing fresh traits upon each invocation. You can compose these functions freely without fear of unanticipated side-effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Getting started&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;traits.js&lt;/em&gt; is available as a node package called &quot;traitsjs&quot; via npm. A simple &lt;code&gt;npm install traits.js&lt;/code&gt; should make it available in node.js. Then load it up as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Trait = require('traits.js');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a local copy of the library's single exported variable, &lt;code&gt;Trait&lt;/code&gt;. Evaluating &lt;code&gt;Trait&lt;/code&gt; in the shell reveals the library's entire API:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ [Function: Trait]
  required: { toString: [Function] }
, compose: [Function: compose]
, resolve: [Function: resolve]
, override: [Function: override]
, create: [Function: create]
, eqv: [Function: eqv]
, object: [Function: object]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Trait creation&lt;/h3&gt;

&lt;p&gt;As you can see from the above printout, &lt;code&gt;Trait&lt;/code&gt; is a function. Calling it creates new traits. Here's a simple trait that abstracts equality (I will be using a slightly adapted version of the running example from the &lt;a href=&quot;http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf&quot;&gt;original traits paper&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var TEquality = Trait({
   equals: Trait.required,
  differs: function(x) { return !this.equals(x); }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By convention, we usually prefix traits with a capital T to distinguish them from regular Javascript constructor functions. Traits may &lt;em&gt;require&lt;/em&gt; and &lt;em&gt;provide&lt;/em&gt; a set of properties. Provided properties are simply those properties that will be mixed into an object using the trait. Required properties are those that a trait expects to be provided by its &quot;client&quot; (the object that uses it). In &lt;em&gt;traits.js&lt;/em&gt;, required properties are defined by binding the property name to the singleton value &lt;code&gt;Trait.required&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TEquality&lt;/code&gt; provides a &lt;code&gt;differs&lt;/code&gt; property to and requires an &lt;code&gt;equals&lt;/code&gt; property from its client. Note that &lt;code&gt;differs&lt;/code&gt; is implemented in terms of &lt;code&gt;equals&lt;/code&gt;, and that it assumes that &lt;code&gt;this&lt;/code&gt; has an implementation for it. This should all be fairly familiar to any object-oriented programmer. To relate traits to more traditional OOP concepts, it is not far wrong to think of a trait as an abstract class, and to think of its required properties as &quot;abstract&quot; properties, to be provided by a &quot;subclass&quot;.&lt;/p&gt;

&lt;h3&gt;Composing traits&lt;/h3&gt;

&lt;p&gt;The workhorse of the &lt;em&gt;traits.js&lt;/em&gt; library is a function called &lt;code&gt;Trait.compose&lt;/code&gt;. This function takes any number of traits as an argument and returns a single, fresh, &quot;composite&quot; trait that contains all of the properties of its arguments. Consider the following trait:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var TMagnitude = Trait.compose(TEquality, Trait({
  smaller: Trait.required,
  greater: function(x) { return !this.smaller(x) &amp;amp;&amp;amp; this.differs(x) },
  between: function(min, max) {
    return min.smaller(this) &amp;amp;&amp;amp; this.smaller(max);
  }
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Give &lt;code&gt;TMagnitude&lt;/code&gt; a concrete implementation for &lt;code&gt;smaller&lt;/code&gt; and it will provide an implementation for the methods &lt;code&gt;greater&lt;/code&gt; and &lt;code&gt;between&lt;/code&gt;. Actually, &lt;code&gt;TMagnitude&lt;/code&gt; is defined as a composite trait: it combines the properties of &lt;code&gt;TEquality&lt;/code&gt; with those of an anonymous nested trait. This means that &lt;code&gt;TMagnitude&lt;/code&gt; actually has two required properties: &lt;code&gt;smaller&lt;/code&gt; and &lt;code&gt;equals&lt;/code&gt;, and that it has three provided properties: &lt;code&gt;greater&lt;/code&gt;, &lt;code&gt;between&lt;/code&gt; and &lt;code&gt;differs&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;100%&quot; src=&quot;https://raw.githubusercontent.com/creationix/howtonode.org/master/articles/traitsjs/1-TMagnitude.png&quot; title=&quot;TMagnitude&quot; alt=&quot;Composition of TMagnitude&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Let's compose &lt;code&gt;TEquality&lt;/code&gt; and &lt;code&gt;TMagnitude&lt;/code&gt; further into a &lt;code&gt;TCircle&lt;/code&gt; trait that captures generic circle behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function TCircle(center, radius) {
  return Trait.compose(
    TMagnitude,
    TEquality,
    Trait({
       center: center,
       radius: radius,
         area: function() { return Math.PI * this.radius * this.radius; },
       equals: function(c) { return c.center === this.center &amp;amp;&amp;amp;
                                    r.radius === this.radius },
      smaller: function(c) { return this.radius &amp;lt; c.radius }
  }));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a couple of things going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TCircle&lt;/code&gt; is not defined as a singleton bound to a &lt;code&gt;var&lt;/code&gt; but rather as a function. &lt;code&gt;TCircle&lt;/code&gt; is in fact a trait generator: call it and you will get a new trait. By turning &lt;code&gt;TCircle&lt;/code&gt; into a function, it can be parameterised with state, in this case the &lt;code&gt;center&lt;/code&gt; and &lt;code&gt;radius&lt;/code&gt; of the circle. The general rule is simple: if your trait is stateless, define it as a singleton object. If your trait is stateful, define it as a function.&lt;/li&gt;
&lt;li&gt;Like &lt;code&gt;TMagnitude&lt;/code&gt;, &lt;code&gt;TCircle&lt;/code&gt; is a composite trait, composed from the two traits we defined earlier, and a nested anonymous trait that adds the circle-specific behaviour. By composing &lt;code&gt;TEquality&lt;/code&gt; and &lt;code&gt;TMagnitude&lt;/code&gt;, circle objects created by this trait will be comparable using methods like &lt;code&gt;differs&lt;/code&gt; and &lt;code&gt;greater&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TCircle&lt;/code&gt; provides an implementation for the methods required by &lt;code&gt;TMagnitude&lt;/code&gt; and &lt;code&gt;TEquality&lt;/code&gt;, such that &lt;code&gt;TCircle&lt;/code&gt; will only provide and not require any properties.&lt;/li&gt;
&lt;li&gt;Even though &lt;code&gt;TMagnitude&lt;/code&gt; also uses &lt;code&gt;TEquality&lt;/code&gt;, the duplicated use of &lt;code&gt;TEquality&lt;/code&gt; in &lt;code&gt;TCircle&lt;/code&gt; does not cause any problems: &lt;em&gt;traits.js&lt;/em&gt; detects that the same trait is being composed and ignores the duplicated composition.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following picture illustrates the composition of &lt;code&gt;TCircle&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;100%&quot; src=&quot;https://raw.githubusercontent.com/creationix/howtonode.org/master/articles/traitsjs/2-TCircle.png&quot; title=&quot;TCircle&quot; alt=&quot;Composition of TCircle&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Although this simple example doesn't do justice to it, here's the hidden power of &lt;code&gt;Trait.compose&lt;/code&gt;: the ordering of its arguments &lt;em&gt;does not matter&lt;/em&gt;. No matter in what order the argument traits are specified, &lt;code&gt;Trait.compose&lt;/code&gt; will return an equivalent trait in all cases. For the mathematically inclined: &lt;code&gt;Trait.compose&lt;/code&gt; is a commutative operator, like addition, e.g. &lt;code&gt;a + b = b + a&lt;/code&gt;. Similarly, when using multiple nested calls to &lt;code&gt;Trait.compose&lt;/code&gt;, it doesn't matter how the calls are nested. For the mathematically inclined: &lt;code&gt;Trait.compose&lt;/code&gt; is an associative operator, like addition, e.g. &lt;code&gt;(a + b) + c = a + (b + c)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These properties sound like &quot;nice to have&quot; from a mathematical point of view, but they are actually crucial from a software engineering point of view: thanks to this commutativity and associativity, we as programmers don't need to understand in what order a trait was composed from its subparts, even in the case of a very complicated trait that involves a deep &quot;hierarchy&quot; of subtraits, possibly spread out over different files. It makes trait composition much more declarative than multiple inheritance, which requires you to do a mental graph traversal to figure out the relative interdependencies and priorities between the different superclass methods. Trait composition, at each level, &quot;merges&quot; the component parts into a single, larger, composite trait. All of the methods of all subparts have equal priority. But hold on, what if multiple traits define a property with the same name?&lt;/p&gt;

&lt;h3&gt;Conflicts!&lt;/h3&gt;

&lt;p&gt;Assume we want to make our circles a bit more colorful and decide to mixin a color trait:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function TColor(rgb) {
  return Trait.compose(TEquality, Trait({
    get rgb() { return rgb; },
    equals: function(col) { return col.rgb.equals(this.rgb); }
  }));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;TColor&lt;/code&gt;, like &lt;code&gt;TCircle&lt;/code&gt;, is a &quot;stateful&quot; trait (i.e. it is defined as a function that can take parameters to capture state). We can imagine a color trait providing much more functionality to manipulate the RGB color, but for the sake of brevity the color trait provides just a simple accessor for the RGB value. &lt;code&gt;TColor&lt;/code&gt; also reuses &lt;code&gt;TEquality&lt;/code&gt; and defines &lt;code&gt;equals&lt;/code&gt; in terms of equal RGB color values. Now, the definition of &lt;code&gt;TCircle&lt;/code&gt; is modified to additionally reuse &lt;code&gt;TColor&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function TCircle(center, radius, rgb) {
  return Trait.compose(
    TMagnitude,
    TEquality,
    TColor(rgb),
    Trait({
       center: center,
       radius: radius,
         area: function() { return Math.PI * this.radius * this.radius; },
       equals: function(c) { return c.center === this.center &amp;amp;&amp;amp;
                                    r.radius === this.radius },
      smaller: function(c) { return this.radius &amp;lt; c.radius }
  }));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both &lt;code&gt;TColor&lt;/code&gt; and &lt;code&gt;TCircle&lt;/code&gt; provide an &lt;code&gt;equals&lt;/code&gt; method. Which one will get invoked on an instance of &lt;code&gt;TCircle&lt;/code&gt;? The answer is: neither one. When &lt;code&gt;Trait.compose&lt;/code&gt; detects that two or more of its argument traits define a property with the same name, it records this &quot;conflict&quot; by defining a special &quot;conflicting property&quot; in the resulting trait. No exception is thrown at this stage (that will only happen if a trait containing a conflict is instantiated, as explained later). The resulting trait will contain a &quot;conflicting property&quot; but may still be composed further with other traits, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;100%&quot; src=&quot;https://raw.githubusercontent.com/creationix/howtonode.org/master/articles/traitsjs/3-Conflicts.png&quot; title=&quot;Conflicts&quot; alt=&quot;Conflicts in composition of TCircle&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;Three ways to resolve a conflict&lt;/h3&gt;

&lt;p&gt;Once we have detected a conflict, we will probably want to refactor the code to resolve it. The philosophy of traits is that it is the job of the &lt;em&gt;composer&lt;/em&gt; to resolve conflicts. There are three ways in which the composer can do so:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;by renaming the conflicting property name in one of the conflicting traits.&lt;/li&gt;
&lt;li&gt;by excluding the property name altogether from one of the conflicting traits.&lt;/li&gt;
&lt;li&gt;by explicitly overriding the properties of one trait with those of another trait.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first two alternatives can be accomplished using the function &lt;code&gt;Trait.resolve&lt;/code&gt;. Here's how one can resolve the conflict through renaming:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function TCircle(center, radius, rgb) {
  return Trait.compose(
    TMagnitude,
    TEquality,
    Trait.resolve({ equals: 'equalColors' }, TColor(rgb)),
    Trait({
       center: center,
       radius: radius,
         area: function() { return Math.PI * this.radius * this.radius; },
       equals: function(c) { return c.center === this.center &amp;amp;&amp;amp;
                                    r.radius === this.radius },
      smaller: function(c) { return this.radius &amp;lt; c.radius }
  }));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call &lt;code&gt;Trait.resolve({ a: 'b' }, t)&lt;/code&gt; returns a trait that is equivalent to &lt;code&gt;t&lt;/code&gt; but with &lt;code&gt;t.a&lt;/code&gt; bound to &lt;code&gt;t.b&lt;/code&gt; instead. In the above example, we've renamed the &lt;code&gt;equals&lt;/code&gt; method provided by &lt;code&gt;TColor&lt;/code&gt; to &lt;code&gt;equalColors&lt;/code&gt;. This renamed trait is then composed with the other traits, producing a conflict-free &lt;code&gt;TCircle&lt;/code&gt; trait, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;100%&quot; src=&quot;https://raw.githubusercontent.com/creationix/howtonode.org/master/articles/traitsjs/4-Renaming.png&quot; title=&quot;Renaming&quot; alt=&quot;Renaming&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The second alternative is to exclude a conflicting property, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function TCircle(center, radius, rgb) {
  return Trait.compose(
    TMagnitude,
    TEquality,
    Trait.resolve({ equals: undefined }, TColor(rgb)),
    Trait({
       center: center,
       radius: radius,
         area: function() { return Math.PI * this.radius * this.radius; },
       equals: function(c) { return c.center === this.center &amp;amp;&amp;amp;
                                    r.radius === this.radius },
      smaller: function(c) { return this.radius &amp;lt; c.radius }
  }));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call &lt;code&gt;Trait.resolve({ a: undefined }, t)&lt;/code&gt; will return a trait equivalent to &lt;code&gt;t&lt;/code&gt; with &lt;code&gt;a&lt;/code&gt; turned into a required property:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;100%&quot; src=&quot;https://raw.githubusercontent.com/creationix/howtonode.org/master/articles/traitsjs/5-Excluding.png&quot; title=&quot;Excluding&quot; alt=&quot;Excluding&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The third alternative is for the composer to explicitly specify that one of the traits overrides the properties of another trait:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function TCircle(center, radius, rgb) {
  return Trait.compose(
    TMagnitude,
    TEquality,
    Trait.override(
      Trait({
         center: center,
         radius: radius,
           area: function() { return Math.PI * this.radius * this.radius; },
         equals: function(c) { return c.center === this.center &amp;amp;&amp;amp;
                                      r.radius === this.radius },
        smaller: function(c) { return this.radius &amp;lt; c.radius }
      }),
      TColor(rgb)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The anonymous trait and &lt;code&gt;TColor&lt;/code&gt; are now composed using &lt;code&gt;Trait.override&lt;/code&gt; instead of &lt;code&gt;Trait.compose&lt;/code&gt;. Because of this, the &lt;code&gt;equals&lt;/code&gt; method of the anonymous trait will take precedence over the &lt;code&gt;equals&lt;/code&gt; method of &lt;code&gt;TColor&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;100%&quot; src=&quot;https://raw.githubusercontent.com/creationix/howtonode.org/master/articles/traitsjs/6-Overriding.png&quot; title=&quot;Overriding&quot; alt=&quot;Overriding&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Note that the order of arguments to &lt;code&gt;Trait.override&lt;/code&gt; matters (left-to-right priority), which is why the two traits have been reordered compared to the previous examples. This also exposes a significant drawback of &lt;code&gt;Trait.override&lt;/code&gt; compared to &lt;code&gt;Trait.compose&lt;/code&gt;: it's not commutative, so you'll have to pay closer attention to the ordering of things! &lt;code&gt;Trait.override&lt;/code&gt; is very similar to &quot;standard&quot; inheritance (with the subclass's methods implicitly overriding the superclass's methods).&lt;/p&gt;

&lt;h3&gt;Trait instantiation&lt;/h3&gt;

&lt;p&gt;Traits can be instantiated into objects using the function &lt;code&gt;Trait.create&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Circle(center, radius, rgb) {
  return Trait.create(Object.prototype,
                      TCircle(center, radius, rgb));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first argument to &lt;code&gt;Trait.create&lt;/code&gt; is the &lt;em&gt;prototype&lt;/em&gt; of the trait instance. &lt;code&gt;Trait.create&lt;/code&gt; is modelled after the new ES5 built-in &lt;code&gt;Object.create&lt;/code&gt;, which also takes the object's prototype as its first argument. In fact, it's possible to use &lt;code&gt;Object.create&lt;/code&gt; to instantiate traits as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Circle(center, radius, rgb) {
  return Object.create(Object.prototype,
                       TCircle(center, radius, rgb));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img width=&quot;100%&quot; src=&quot;https://raw.githubusercontent.com/creationix/howtonode.org/master/articles/traitsjs/7-Create.png&quot; title=&quot;Create&quot; alt=&quot;Instantiating traits&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Now we can start creating and using circle objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var c1 = Circle(new Point(0,0), 1, new Color(255,0,0));
var c2 = Circle(new Point(0,0), 2, new Color(255,0,0));
c1.smaller(c2) // true
c1.differs(c2) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Object.create&lt;/code&gt; is provided as a built-in in an ES5 engine. On ES3 engines, &lt;em&gt;traits.js&lt;/em&gt; defines it. Next, let's look at how instantiating traits using &lt;code&gt;Trait.create&lt;/code&gt; and &lt;code&gt;Object.create&lt;/code&gt; differ.&lt;/p&gt;

&lt;h4&gt;Using Trait.create&lt;/h4&gt;

&lt;p&gt;When instantiating a trait, &lt;code&gt;Trait.create&lt;/code&gt; performs two &quot;conformance checks&quot;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the trait still contains required properties, and those properties are not provided by the specified prototype, &lt;code&gt;Trait.create&lt;/code&gt; throws. This situation is analogous to trying to instantiate an abstract class.&lt;/li&gt;
&lt;li&gt;If the trait still contains conflicting properties, &lt;code&gt;Trait.create&lt;/code&gt; also throws.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, &lt;em&gt;traits.js&lt;/em&gt; ensures that the new trait instance has high integrity:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;this&lt;/code&gt; of all trait methods is bound to the new instance. This means you can safely select methods from a trait instance and pass them around as functions, without fear of accidentally binding &lt;code&gt;this&lt;/code&gt; to the global object.&lt;/li&gt;
&lt;li&gt;In an ES5 engine, the instance is created as a &lt;em&gt;frozen&lt;/em&gt; object: clients cannot add, delete or assign to the instance's properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Using Object.create&lt;/h4&gt;

&lt;p&gt;Since &lt;code&gt;Object.create&lt;/code&gt; is an ES5 built-in that knows nothing about traits, it will not perform the above trait conformance checks and will not fail on incomplete or inconsistent traits. Instead, required and conflicting properties are treated as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Required properties will be bound to &lt;code&gt;undefined&lt;/code&gt;, and will be non-enumerable (i.e. they won't show up in &lt;code&gt;for-in&lt;/code&gt; loops on the trait instance). This makes them virtually invisible. Clients can still assign a value to these properties later.&lt;/li&gt;
&lt;li&gt;Conflicting properties have a getter and a setter that throws when accessed. Hence, the moment a program touches a conflicting property, it will fail, revealing the unresolved conflict.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Object.create&lt;/code&gt; does not bind &lt;code&gt;this&lt;/code&gt; and does not generate frozen instances. Hence, the new trait instance can still be modified by clients.&lt;/p&gt;

&lt;p&gt;It's up to you as a programmer to decide which instantiation method, &lt;code&gt;Trait.create&lt;/code&gt; or &lt;code&gt;Object.create&lt;/code&gt; is more appropriate: &lt;code&gt;Trait.create&lt;/code&gt; fails on incomplete or inconsistent traits and generates frozen objects, &lt;code&gt;Object.create&lt;/code&gt; may generate incomplete or inconsistent objects, but as long as a program never actually touches a conflicting property, it will work fine (which fits with the dynamically typed nature of Javascript).&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In the introduction I mentioned that &lt;em&gt;traits.js&lt;/em&gt; is minimal. All in all, you only need to know four functions to work with the library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;Trait({...})&lt;/code&gt; to construct a new trait.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Trait.compose&lt;/code&gt; to compose smaller traits into larger ones.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Trait.resolve&lt;/code&gt; to create a trait with renamed or excluded properties, in order to avoid conflicts and disambiguate property names.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Trait.create(prototype, trait)&lt;/code&gt; to instantiate a trait into a new object. If you require the trait instance to remain extensible, use &lt;code&gt;Object.create&lt;/code&gt; instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it. There isn't much more to it. The complete API and another tutorial can be found on the &lt;a href=&quot;http://traitsjs.github.io/traits.js-website/&quot;&gt;&lt;em&gt;traits.js&lt;/em&gt; home page&lt;/a&gt;. If you want to peek under the hood of the library and know more about the format in which traits are represented, &lt;a href=&quot;http://code.google.com/p/es-lab/wiki/Traits#Traits_as_Property_Maps&quot;&gt;this page&lt;/a&gt; provides all the details.&lt;/p&gt;</description><author>tomvc.be@gmail.com (Tom Van Cutsem)</author></item><item><title>Learning Javascript with Object Graphs (Part III)</title><link>https://howtonode.org/object-graphs-3</link><comments>https://howtonode.org/object-graphs-3#disqus_thread</comments><pubDate>Tue, 09 Nov 2010 12:00:57 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/object-graphs-3</guid><description>&lt;p&gt;Part I of this series explained basic object graphs and visually described references, closures, and basic inheritance in JavaScript.  Part II compared different styles for doing object-oriented programming in JavaScript.  Now in Part III we'll get creative and look as Ruby's object model and compare it to how JavaScript works.  Also I'll show how to implement some Ruby style classes.  JavaScript is a very flexible language and can support about any object model you want with enough understanding and creativity.&lt;/p&gt;

&lt;h2&gt;Why Ruby&lt;/h2&gt;

&lt;p&gt;Ok, I'll admit, I used to be a ruby guy.  I didn't so much do rails, but I loved the ruby language.  I read the pickaxe book, attended dallasrb, tried to start my own ruby based company, failed, and finally taught ruby to home-school kids.&lt;/p&gt;

&lt;p&gt;Also I chose ruby because I've noticed that several newcomers to the node.js community come from ruby and other languages with similar object systems.  They often have a hard time adjusting to the simple, but new semantics of a language that looks like C/Java/PHP, but acts more like Lisp/Closure/Self.&lt;/p&gt;

&lt;h2&gt;What are Objects&lt;/h2&gt;

&lt;p&gt;Both languages are object oriented languages.  The difference is one subscribes to the stricter and slightly more complicated classical OO style while the other has a plain prototypal object system.  In both languages all values are objects (or at least act like them).  A ruby class is also an object who is an instance of the class &lt;code&gt;Class&lt;/code&gt;.  In JavaScript functions are also objects.  In both primitive values like numbers and booleans are objects that contain methods/functions through their classes/prototypes.  An object is simply a value that contains state and/or behavior through named channels.  Objects provide encapsulation so that you can call &lt;code&gt;obj.save()&lt;/code&gt; instead of having to use some external function and pass around all the state &lt;code&gt;save(obj)&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Methods versus Functions&lt;/h2&gt;

&lt;p&gt;Probably the biggest difference between the object models when you get down to it and ignore syntax is the fact that Ruby has methods and JavaScript has first-class functions.  I can hear you thinking how &quot;Wait, I thought 'method' and 'function' were synonyms!&quot; so I'll explain what I mean.&lt;/p&gt;

&lt;h3&gt;Gotta keep them separated&lt;/h3&gt;

&lt;p&gt;In classical OO, there is this idea that you must separate function from state.  The same object structure can't hold both data and executable code.  So classes hold the methods and instance objects hold the data (instance variables).  Ruby is no exception.  The language simply doesn't allow for methods on anything other than a class.  Sure you can  add singleton methods to objects, but the methods aren't actually on the object itself they are on a separate singleton class created just for the purpose of holding the methods for that single object.&lt;/p&gt;

&lt;p&gt;In JavaScript there is no concept of methods.  Functions are first-class, meaning they are expressions just like &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;42&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;, and everything else you can assign to a variable or property of an object.  You can emulate classes if you explicitly put all your function properties in a shared prototype object and then have your &quot;instance&quot; objects all inherit from that common prototype, but the fact is you're not forced to work this way. For better or for worse, JavaScript has very few rules about what you can and can't do.&lt;/p&gt;

&lt;h3&gt;Controlled Inheritance&lt;/h3&gt;

&lt;p&gt;Another side effect of this difference in inheritance.  In Ruby and other classical OO languages, only methods can be inherited.  Instance variables only exist on instances and instances can't inherit from instances, only classes inherit from classes.  In JavaScript, any object can inherit from any object and all properties are subject to this prototypal inheritance no matter their type.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;self&lt;/code&gt; and &lt;code&gt;this&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Both languages have seemingly similar special variables that give you access to the current &quot;scope&quot;.&lt;/p&gt;

&lt;p&gt;In Ruby &lt;code&gt;self&lt;/code&gt; is the default receiver of all method calls that don't specify a receiver.  In methods it's usually the instance object itself (or its singleton class actually).  You can't get at instance variable directly via &lt;code&gt;self&lt;/code&gt;, but use the &lt;code&gt;@foo&lt;/code&gt; notation instead.  Any method invocation without an explicit receiver will get looked up in &lt;code&gt;self&lt;/code&gt; and its superclasses. Thus calling &lt;code&gt;foo()&lt;/code&gt; is the exact same as calling &lt;code&gt;self.foo()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In JavaScript, if you call &lt;code&gt;foo()&lt;/code&gt; that's not the same thing at all as &lt;code&gt;this.foo()&lt;/code&gt;. The first, &lt;code&gt;foo()&lt;/code&gt; will look for a &lt;code&gt;foo&lt;/code&gt; local variable via the closure and set its &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;global&lt;/code&gt;.  But calling &lt;code&gt;this.foo()&lt;/code&gt; will look for a &lt;code&gt;foo&lt;/code&gt; property in &lt;code&gt;this&lt;/code&gt; and call it with the old &lt;code&gt;this&lt;/code&gt; as the new &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Object Graphs&lt;/h2&gt;

&lt;p&gt;Ok, enough theory, now for some sample code and diagrams!  I'll show some ruby code, its diagram, and then the closest JavaScript implementation I could think of and its diagram.&lt;/p&gt;

&lt;p&gt;Most of the ruby examples are based on the MetaProgramming chapter of Programming Ruby 1.9 by Pragmatic Programmers.&lt;/p&gt;

&lt;h3&gt;A String&lt;/h3&gt;

&lt;p&gt;All values are objects, let's start out with a simple string.&lt;/p&gt;

&lt;h4&gt;Ruby&lt;/h4&gt;

&lt;p&gt;&lt;object-graphs-3/animal.rb&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-3/animal.rb.dot&quot; alt=&quot;animal.rb&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Notice that every object has a class.  Our string is of class &lt;code&gt;String&lt;/code&gt; which inherits from the class &lt;code&gt;Object&lt;/code&gt;.  its class &lt;code&gt;String&lt;/code&gt; is of class &lt;code&gt;Class&lt;/code&gt; which inherits &lt;code&gt;Module&lt;/code&gt; and then &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For purposes of seeing how &lt;code&gt;animal&lt;/code&gt; works we don't need to worry about the classes of classes.  The diagram is much simpler by removing that part:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-3/animal.rb.simple.dot&quot; alt=&quot;animal.js&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Now you can clearly see what methods are available to our &lt;code&gt;animal&lt;/code&gt; object.&lt;/p&gt;

&lt;h4&gt;JavaScript&lt;/h4&gt;

&lt;p&gt;&lt;object-graphs-3/animal.js&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-3/animal.js.dot&quot; alt=&quot;animal.js&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Remember that you can simulate classes in JavaScript using constructor + prototype pairs.  That's just what the built-in object types do.  The prototypes are objects and thus inherit directly from &lt;code&gt;Object.prototype&lt;/code&gt; and the constructors are functions and inherit from &lt;code&gt;Function.prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But let's see this diagram without the constructors, they don't affect the object once it's constructed and greatly complicate the image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-3/animal.js.simple.dot&quot; alt=&quot;animal.js&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;That's much better.  The literal &lt;code&gt;&quot;cat&quot;&lt;/code&gt; inherits from the &lt;code&gt;String.prototype&lt;/code&gt; which in turn inherits from &lt;code&gt;Object.prototype&lt;/code&gt;.  You can see why you're able to call functions like &lt;code&gt;animal.trim()&lt;/code&gt; and see where the function comes from.&lt;/p&gt;

&lt;h3&gt;Singletons&lt;/h3&gt;

&lt;p&gt;Remember that Ruby only allows methods on class objects.  So what do you do if you really want to add a method to a single object?  You'd have to create a special sub-class, add in the method you wanted, and then create your instance from that new class.  Well, ruby has some nice syntax to make this easy and automatic:&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-3/singleton.rb&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Output
The cat says miaow
CAT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's see the graph of this object now that we added in a singleton method and class:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-3/singleton.rb.dot&quot; alt=&quot;animal.js&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Notice that it injected a new anonymous class directly in front of the object and put the new method there for you.  This class is hidden though.  If you call the &lt;code&gt;animal.class()&lt;/code&gt; then you'll get a reference to &lt;code&gt;String&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;In JavaScript there is no need to create a new object to hold the function since the language allows functions to be stored anywhere.  You simply assign the function directly to the object.  There is one gotcha though.  Primitives are immutable in JavaScript meaning you can't just add some properties to a string.  This will work for any mutable object though so we'll use a regular expression instead.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-3/singleton.js*&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-3/singleton.js.dot&quot; alt=&quot;animal.js&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Notice that we just added the &lt;code&gt;speak&lt;/code&gt; function in with the existing properties of the object.  There is no need to separate them out into a different layer in JavaScript.&lt;/p&gt;

&lt;h3&gt;A Class&lt;/h3&gt;

&lt;p&gt;Lets start out with a simple user-defined class and slowly add in inheritance, class methods, and mixed-in modules.&lt;/p&gt;

&lt;p&gt;First a simple user-defined class:&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-3/dave.rb&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-3/dave.rb.dot&quot; alt=&quot;animal.js&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;In JavaScript this is simply a constructor function: (Which is really just another function)&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-3/dave.js&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-3/dave.js.dot&quot; alt=&quot;animal.js&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Notice that the prototype object was created for us and the linking back and forth was built-in.  This is part of the ECMA spec. All functions, no matter if they are used as constructors or not, have a prototype.&lt;/p&gt;

&lt;h3&gt;Class Methods&lt;/h3&gt;

&lt;p&gt;Since a class is an object, it's possible to give it singleton methods in Ruby and have what's known as class methods.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-3/dave2.rb&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Output
#&amp;lt;Dave:0x0000010086d3b8&amp;gt;
#&amp;lt;Dave:0x0000010086d340&amp;gt;
Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-3/dave2.rb.dot&quot; alt=&quot;animal.js&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;You see that it inserted a new anonymous class in the chain to store the &lt;code&gt;create&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;In JavaScript you can do the same by simply adding a property on the constructor:&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-3/dave2.js*&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-3/dave2.js.dot&quot; alt=&quot;animal.js&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Here we make the constructor inherit from its parent constructor (so that &quot;class methods&quot; get inherited) and inherit the prototypes so that &quot;instance methods&quot; get inherited.  Again there is no need for hidden classes since javascript allows storing function properties on any object.&lt;/p&gt;

&lt;h2&gt;Moving Forward&lt;/h2&gt;

&lt;p&gt;Originally I wanted this article to explore how to implement Ruby modules and mixing in javascript, but life got in the way.  I started an awesome job at Palm working on node for webOS and moving to a new house.  Also I hit a technical wall where I can't fully implement ruby style module includes because it's not possible in JavaScript. (I can't make new methods added to an already included module appear in all the prototype chains that include that module)&lt;/p&gt;

&lt;p&gt;So instead of holding onto this useful article for ages, I'm realeasing it as is.  Hopefully when things settle down I can write the next part of the series.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Learning Javascript with Object Graphs (Part II)</title><link>https://howtonode.org/object-graphs-2</link><comments>https://howtonode.org/object-graphs-2#disqus_thread</comments><pubDate>Mon, 11 Oct 2010 10:24:25 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/object-graphs-2</guid><description>&lt;p&gt;The first article using graphs to describe JavaScript semantics was so popular that I've decided to try the technique with some more advanced ideas.  In this article I'll explain three common techniques for creating objects.  They are constructor with prototype, pure prototypal, and object factory.&lt;/p&gt;

&lt;p&gt;My goal is that this will help people understand the strengths and weaknesses of each technique and understand what's really going on.&lt;/p&gt;

&lt;h2&gt;Classical JavaScript Constructors&lt;/h2&gt;

&lt;p&gt;First let's create a simple constructor function with a prototype.  This is the closest thing to a class you're going to find in native JavaScript.  It's extremely powerful and efficient, but doesn't quite work like you would expect if coming from a language with classes.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-2/classical.js#rectangle&gt;&lt;/p&gt;

&lt;p&gt;Now let's define a new class of objects called Squares that inherit from Rectangles.  To do inheritance, the constructor's &lt;code&gt;prototype&lt;/code&gt; has to inherit from the parent constructor's &lt;code&gt;prototype&lt;/code&gt;.  Here we're overriding &lt;code&gt;getPerimeter&lt;/code&gt; to make it slightly more efficient and to show how to override functions.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-2/classical.js#square&gt;&lt;/p&gt;

&lt;p&gt;Usage is straightforward.  Just create an instance of each and call a function on each.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-2/classical.js#test*&gt;&lt;/p&gt;

&lt;p&gt;This is the resulting data structure.  Dashed lines mean object inheritance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-2/classical.dot&quot; alt=&quot;classical&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Notice that there is little difference between the &lt;code&gt;rect&lt;/code&gt; instance and &lt;code&gt;Square.prototype&lt;/code&gt;.  They are both simply objects that inherit from &lt;code&gt;Rectangle.prototype&lt;/code&gt;.  JavaScript is just a series of linked objects when you get down to it.  The only objects that are special are functions in that they take parameters and can hold executable code and point to scopes.&lt;/p&gt;

&lt;h2&gt;Pure Prototypal Objects&lt;/h2&gt;

&lt;p&gt;Let's do the same example, but without using constructor functions.  This time we'll just use plain prototypal inheritance.&lt;/p&gt;

&lt;p&gt;Let's define a Rectangle prototype that the base pattern for all our objects.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-2/prototypal.js#rectangle&gt;&lt;/p&gt;

&lt;p&gt;Now let's define a sub-object called Square that overrides some of the properties to change the behavior.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-2/prototypal.js#square&gt;&lt;/p&gt;

&lt;p&gt;To create actual instances of these prototypes, we simply create new objects that inherit from the prototype objects and then set their local state manually.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-2/prototypal.js#test*&gt;&lt;/p&gt;

&lt;p&gt;Here is the resultant graph of objects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-2/prototypal.dot&quot; alt=&quot;classical&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;This isn't quite as powerful as the constructor + prototype method, but is often much easier to understand since there is less indirection.  Also if you come from a language that has pure prototypal inheritance, you'll be happy to know it's possible in JavaScript too.&lt;/p&gt;

&lt;h2&gt;Object Factories&lt;/h2&gt;

&lt;p&gt;One of my favorite methods for creating objects is to use a factory function.  The difference is that instead of defining a prototype object with all my shared functions and then creating instances of those, I simply call a function that returns a new object every time.  &lt;/p&gt;

&lt;p&gt;This example is a super simple MVC system.  The controller function takes in as parameters the model and view objects and outputs a new controller object.  All state is stored in the closure via the scope.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-2/factory.js#controller&gt;&lt;/p&gt;

&lt;p&gt;To use this, simply call the function with the desired parameters.  Notice how we can use these directly as event handlers (setTimeout) without having to first bind the function to the object.  Since it (the function) doesn't use &lt;code&gt;this&lt;/code&gt; internally, there is no need to mess with the value of &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs-2/factory.js#usage&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Output
View now has 5
View now has 6
View now has 5
Saving value 5 somewhere
Now hiding view
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the object graph that results from this code.  Notice that we have access to the two passed in anonymous objects via the hidden &lt;code&gt;[scope]&lt;/code&gt; property of the functions.  Or in other words, we have access to &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt; from the closure created by the factory function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs-2/factory.dot&quot; alt=&quot;factory&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There is so much more I want to explore, but I like to keep these articles somewhat short and bite-size.  If there is demand, I'll write a part three explaining how to do ruby-style mixins and other advanced topics.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Learning Javascript with Object Graphs</title><link>https://howtonode.org/object-graphs</link><comments>https://howtonode.org/object-graphs#disqus_thread</comments><pubDate>Thu, 30 Sep 2010 15:48:55 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/object-graphs</guid><description>&lt;p&gt;One of the secrets to being a super effective JavaScript developer is to truly understand the semantics of the language.  This article will explain the basic elemental parts of JavaScript using easy to follow diagrams.&lt;/p&gt;

&lt;h2&gt;References Everywhere&lt;/h2&gt;

&lt;p&gt;A variable in JavaScript is simply a label that references a value in memory somewhere.  These values can be primitives like strings, numbers, and booleans.  They can also be objects or functions.&lt;/p&gt;

&lt;h3&gt;Local Variables&lt;/h3&gt;

&lt;p&gt;In the following example, we will create four local variables in the top-level scope and point them to some primitive values:&lt;/p&gt;

&lt;p&gt;&lt;object-graphs/variables.js*&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs/variables.dot&quot; alt=&quot;variables&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that the two boolean variables point to the same value in memory.  This is because primitives are immutable and so the VM can optimize and share a single instance for all references to that particular value.&lt;/p&gt;

&lt;p&gt;In the code snippet we checked to see if the two references pointed to the same value using &lt;code&gt;===&lt;/code&gt; and the result was &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The outer box represents the outermost closure scope.  These variables are top-level local variables, not to be confused with properties of the global/window object.&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;Objects and Prototype Chains&lt;/h3&gt;

&lt;p&gt;Objects are just collections of more references to new objects and prototypes.  The only special thing they add is the prototype chain for when you try to access a property that's not in the local object, but is in a parent object.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs/objects.js*&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs/objects.dot&quot; alt=&quot;shared-function&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Here we have one object with four properties referenced by the &lt;code&gt;tim&lt;/code&gt; variable.  Also we created a new object that inherits from the first object and referenced it from &lt;code&gt;jack&lt;/code&gt;.  Then we overrode two properties in the local object.&lt;/p&gt;

&lt;p&gt;Now when looking up &lt;code&gt;jack.likesJavaScript&lt;/code&gt;, we first find the object that &lt;code&gt;jack&lt;/code&gt; references.  Then we look for the &lt;code&gt;likesJavaScript&lt;/code&gt; property.  Since it's not there, we look at the parent object and find it there.  Then we find the &lt;code&gt;true&lt;/code&gt; value it references.&lt;/p&gt;

&lt;h3&gt;The Global Object&lt;/h3&gt;

&lt;p&gt;Ever wondered why tools like &lt;a href=&quot;http://jslint.com/&quot;&gt;jslint&lt;/a&gt; always tell you to not forget to put &lt;code&gt;var&lt;/code&gt; statements before your variables.  Well, here is what happens if you forget.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs/globals.js&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs/globals.dot&quot; alt=&quot;variables&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that &lt;code&gt;likesJavaScript&lt;/code&gt; is now a property of the global object instead of a free variable in the outer closure.  This only really matters if you're going to be mixing several scripts.  But in any real program that's exactly what you're going to be doing.&lt;/p&gt;

&lt;p&gt;Always remember to put those &lt;code&gt;var&lt;/code&gt; statements in there to keep your variable's scope to the current closure and its children.  You'll be much happier by following this simple rule.&lt;/p&gt;

&lt;p&gt;If you must put something on the global object, do it explicitly with &lt;code&gt;window.woo&lt;/code&gt; in the browser or &lt;code&gt;global.goo&lt;/code&gt; in node.js.&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;Functions and Closures&lt;/h2&gt;

&lt;p&gt;JavaScript isn't just a series of chained data structures.  It contains executable, callable code known as functions.  These functions create chained scopes and closures. &lt;/p&gt;

&lt;h3&gt;Visualizing Closures&lt;/h3&gt;

&lt;p&gt;Functions can be drawn as special objects that contain executable code as well as properties.  Every function has a special &lt;code&gt;[scope]&lt;/code&gt; property that represents the environment it was in when it was defined.  If a function is returned from another function then this reference to the old environment is closed over by the new function in a &quot;closure&quot;.&lt;/p&gt;

&lt;p&gt;In this example we will create a simple factory method that generates a closure and returns a function.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs/closure.js*&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs/closure.dot&quot; alt=&quot;variables&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;When we call &lt;code&gt;description1()&lt;/code&gt;, the VM looks up the function that it references and executes it.  Since that function looks for a local variable named &lt;code&gt;name&lt;/code&gt;, it finds it in the closure scope.  This factory method is nice since each generated function has its own space for local variables.&lt;/p&gt;

&lt;p&gt;See the article &lt;a href=&quot;http://howtonode.org/why-use-closure&quot;&gt;why use closure&lt;/a&gt; for more in-depth reading on this topic and its many uses.&lt;/p&gt;

&lt;h3&gt;Shared Functions and &lt;code&gt;this&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Sometimes for performance reasons, or because you just plain prefer the style, JavaScript provides a &lt;code&gt;this&lt;/code&gt; keyword that allows you to reuse a function object in different scopes depending on how it was called.&lt;/p&gt;

&lt;p&gt;Here we'll create a few objects that all share a common function.  This function will reference &lt;code&gt;this&lt;/code&gt; internally to show how it changes from call to call.&lt;/p&gt;

&lt;p&gt;&lt;object-graphs/functions.js*&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;object-graphs/functions.dot&quot; alt=&quot;variables&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:left&quot;/&gt;&lt;/p&gt;

&lt;p&gt;In the diagram, we see that even though &lt;code&gt;Fred.description&lt;/code&gt; was set to &lt;code&gt;Lane.description&lt;/code&gt;, it's really only referencing the function.  Thus all three references have equal ownership of the anonymous function.  This is why I try to not call functions on constructor prototypes &quot;methods&quot;, because that implies some sort of binding of the function to the constructor and its &quot;class&quot;. &lt;em&gt;(see &lt;a href=&quot;http://howtonode.org/what-is-this&quot;&gt;what is this&lt;/a&gt; for more details on the dynamic nature of &lt;code&gt;this&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I've had tons of fun using diagrams to visualize these data structures.  My hope is that this helps those of us that are visual learners to get a better grasp of JavaScript semantics.  I have past experience as both a front-end designer/developer and as a server-side architect.  I hope my unique perspective is useful to those coming from the world of design and learning the innards of this wonderful language known as JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(NOTE, all the diagrams are &lt;a href=&quot;http://www.graphviz.org/&quot;&gt;graphviz&lt;/a&gt; dot files and can be seen &lt;a href=&quot;http://github.com/creationix/howtonode.org/tree/master/articles/object-graphs/&quot;&gt;here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Testing your JavaScript with shoulda.js</title><link>https://howtonode.org/testing-your-javascript</link><comments>https://howtonode.org/testing-your-javascript#disqus_thread</comments><pubDate>Thu, 30 Sep 2010 01:59:28 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/testing-your-javascript</guid><description>&lt;p&gt;The last thing you want this weekend is to be introducing bugs at 4:30PM on Sunday as you frantically hack in more functionality. One way to avoid that risk is to write some tests for your critical, stable bits. If you have time this weekend to hack on unit tests in between the red-bull-induced coma and the confused debates about sockets vs. ports (unlikely!), &lt;a href=&quot;http://github.com/philc/shoulda.js&quot;&gt;shoulda.js&lt;/a&gt; will help you get up and running very quickly.&lt;/p&gt;

&lt;p&gt;Shoulda.js is a micro javascript unit testing framework inspired by Thoughtbot's Shoulda for Ruby. It gives you a tight syntax for writing terse, readable unit tests. It weighs in at under 300 lines and makes no assumptions about your javascript environment or libraries.&lt;/p&gt;

&lt;h2&gt;Get Started&lt;/h2&gt;

&lt;p&gt;Here's how to get started. You've probably seen this pattern before: tests are grouped into logical units called &quot;contexts&quot;. Contexts can optionally share test-case setup code. This is a sample test for a massively concurrent version of super mario we've written (the source for that is not included ;-) :&lt;/p&gt;

&lt;p&gt;&lt;testing-your-javascript/mario_tests.js&gt;&lt;/p&gt;

&lt;p&gt;You can run this file using v8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ v8 mario_test.js
Pass (19/19)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Stubbing&lt;/h2&gt;

&lt;p&gt;The key to writing narrow, readable unit tests is stubbing out functionality to make your test easier to read and write. You'll often want to stub out expensive methods like talking to the network, or methods you want to manipulate in a special way to set up your test. Shoulda.js provides this syntax for stubbing out properties and methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stub(document, &quot;getElementById&quot;, function(id) { assert.equal(id, &quot;marioCharacter&quot;); });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stub(document, &quot;getElementById&quot;, returns(myElement));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Writing client side unit tests for the browser.&lt;/h2&gt;

&lt;p&gt;If you want to write tests which need to leverage a full browser environment, use envjs. You can then test your client side javascript code from the command line, without having to launch an external browser.&lt;/p&gt;

&lt;p&gt;Enjoy! And good luck.&lt;/p&gt;</description><author>phil.crosby@gmail.com (Phil Crosby)</author></item><item><title>Capturing Packets in JavaScript with node_pcap</title><link>https://howtonode.org/capturing-packets-in-javascript</link><comments>https://howtonode.org/capturing-packets-in-javascript#disqus_thread</comments><pubDate>Thu, 30 Sep 2010 01:08:34 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/capturing-packets-in-javascript</guid><description>&lt;p&gt;OK, I hear you. Capturing packets is hard and best left to kernel hackers, assembly language programmers, and black hat security
researches. If you just want to make things for the web using node.js, why should you care?&lt;/p&gt;

&lt;p&gt;Pulling packets off the network can show you what your computers are saying to each other without disrupting the flow of or changing any applications. Packet capture is a fantastic debugging tool that will remove a lot of the mystery from writing and running network programs. The point of &lt;code&gt;node_pcap&lt;/code&gt; is to provide a good HTTP debugging tool and a framework for doing your own network analysis.&lt;/p&gt;

&lt;p&gt;There are plenty of ways to do packet inspection these days, but none of them let you interact with your network traffic the way that node lets you write network programs: by writing a few event handlers in JavaScript. &lt;code&gt;node_pcap&lt;/code&gt; not only let's you capture and process packets in JavaScript, but since it is built on node.js, data from the packets can be easily routed around to web browsers, databases, or whatever else you can think of.&lt;/p&gt;

&lt;h2&gt;Example&lt;/h2&gt;

&lt;p&gt;Here's an example of capturing packets and sending them back to a web browser using WebSocket:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pcap.ranney.com:81/&quot;&gt;http://pcap.ranney.com:81/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you still aren't convinced, check out how easy it is to write a simple &quot;network grep&quot; type of program using &lt;code&gt;node_pcap&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;capturing-packets-in-javascript/example.js&gt;&lt;/p&gt;

&lt;p&gt;This program will look at all TCP packets that flow past the default network interface and run the regular expression &lt;code&gt;matcher&lt;/code&gt; against the data section of the packet. If it matches, the data section will be printed.&lt;/p&gt;

&lt;p&gt;Still not convinced? I understand. This packet business can be astonishingly low level compared to the abstractions you are comfortable working with. If this doesn't seem awesome yet, it probably won't until you actually need it. When you can't figure out what your program is doing by just adding log messages, come back and check out what packet capture can do for you.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;node_pcap&lt;/code&gt; exposes packets as JavaScript objects, but it also comes with a few examples that are useful on their own. If you do nothing else, check out &lt;code&gt;http_trace&lt;/code&gt; and &lt;code&gt;simple_capture&lt;/code&gt;. Look at the source code and see how they work. It's really easy.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Anyway, if you are still here, let's get this sucker installed. The first thing you'll need is &lt;code&gt;libpcap&lt;/code&gt;. If you are on OSX 10.6, you already have it. If you are on a Linux system that uses &lt;code&gt;apt-get&lt;/code&gt; to install things, you can get it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install libpcap-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are on some other kind of system, I don't know the exact command to install &lt;code&gt;libpcap-dev&lt;/code&gt;, but it is a very common library that's widely available.&lt;/p&gt;

&lt;p&gt;Once you have &lt;code&gt;libpcap&lt;/code&gt; and node, you just need &lt;code&gt;npm&lt;/code&gt;. Install &lt;code&gt;node_pcap&lt;/code&gt; with &lt;code&gt;npm&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install pcap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install the pcap libraries and three executable.&lt;/p&gt;

&lt;p&gt;If you want to hack on the code, and I encourage you to do so, use &lt;code&gt;git&lt;/code&gt; to clone the repository on github:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/mranney/node_pcap.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll still need to use &lt;code&gt;npm&lt;/code&gt; to build and install the files where they need to go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mjr:~/work/node_pcap$ npm install .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To verify that things are working, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo simple_capture
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mjr:~$ sudo simple_capture
libpcap version 1.0.0
* en0 10.51.2.125/255.255.255.0
fw0 no address
en1 no address
lo0 127.0.0.1/255.0.0.0
00:1c:23:b9:e8:b5 -&amp;gt; ff:ff:ff:ff:ff:ff 10.51.2.10 ARP request 10.51.2.4
00:1e:c9:45:e8:30 -&amp;gt; ff:ff:ff:ff:ff:ff 10.51.2.1 ARP request 10.51.2.45
00:1a:92:c4:32:d1 -&amp;gt; ff:ff:ff:ff:ff:ff 10.51.2.179 ARP request 10.51.2.126
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your traffic might not be ARP requests, but some packets should be flowing, and you should see one line per packet.&lt;/p&gt;

&lt;p&gt;Opening the capture interface on most operating systems requires root access, so most of the time that you run a program using &lt;code&gt;node_pcap&lt;/code&gt; you'll need to use sudo.&lt;/p&gt;

&lt;h2&gt;http_trace&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;http_trace&lt;/code&gt; is a tool that distills the packets involved in an HTTP session into higher level events. There are command line options to adjust the output and select different requests. Here's a simple example of looking for any requests that have &quot;favicon&quot; in the URL and showing request and response headers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;capturing-packets-in-javascript/http_trace_1.jpg&quot; style=&quot;float: none&quot;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;To see the full list of options do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http_trace --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With no arguments, &lt;code&gt;http_trace&lt;/code&gt; will listen on the default interface for any IPv4 TCP traffic on any port. If it finds HTTP on any TCP connection, it'll start decoding it. You might be surprised by how many HTTP connections your computer is making that you didn't know about, especially if you run OSX. Fire it up and see what you find.&lt;/p&gt;

&lt;h2&gt;Solving Problems&lt;/h2&gt;

&lt;p&gt;Here's why you need all of this. Let's say you have a node program that makes an outgoing connection, but the outgoing connection doesn't seem like it is working. This reason in this case is that a firewall rule is filtering the traffic. Here's how to detect it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;capturing-packets-in-javascript/http_trace_2.jpg&quot; style=&quot;float: none&quot;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--tcp-verbose&lt;/code&gt; option will expose events for TCP connection setup, close, and reset. It'll also let you know about SYN retries and packets retransmissions. SYN retry happens when a new TCP connection is getting set up, but the other side isn't responding. Retransmissions occur when packets are dropped by the network, and TCP on either end of the connection resends data that has already sent. If data is moving slowly, but you don't appear to be out of CPU, turn on &lt;code&gt;--tcp-verbose&lt;/code&gt; and see if you are getting retransmissions or SYN retries. If so, you can blame the network and not your node program.&lt;/p&gt;

&lt;p&gt;Another common case is when the data going over the network isn't quite the data you were expecting. Here's a simple example using curl from the command line. Let's say you wanted to send some JSON to your local CouchDB, but CouchDB keeps rejecting it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mjr:~$ curl -X POST 'http://localhost:5984/test' -H &quot;Content-Type: application/json&quot; -d {&quot;foo&quot;: &quot;bar&quot;}
{&quot;error&quot;:&quot;bad_request&quot;,&quot;reason&quot;:&quot;invalid UTF-8 JSON&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That looks like pretty well-formed JSON, so what's going on here? Run &lt;code&gt;http_trace&lt;/code&gt; with the --bodies option to dump the request and response body. Since this is a connection to &lt;code&gt;localhost&lt;/code&gt;, we need to explicitly listen on the loopback interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;capturing-packets-in-javascript/http_trace_3.jpg&quot; style=&quot;float: none&quot;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;Here we can see that the request body was simply, &quot;{foo:&quot;, which is clearly not valid JSON. The problem in this case is that the shell and curl couldn't figure out what part of the command line arguments to use for the POST body, and they got it wrong. This works if quoted properly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mjr:~$ curl -X POST 'http://localhost:5984/test' -H &quot;Content-Type: application/json&quot; -d '{&quot;foo&quot;: &quot;bar&quot;}'
{&quot;ok&quot;:true,&quot;id&quot;:&quot;b4385e0de2e74df4cdbf21cf6c0009d0&quot;,&quot;rev&quot;:&quot;1-4c6114c65e295552ab1019e2b046b10e&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Understanding Higher Level Protocols&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;node_pcap&lt;/code&gt; can piece back together a TCP session from individual packets as long as it sees them all go by. It will emit events at TCP connection setup, teardown, and reset.&lt;/p&gt;

&lt;p&gt;On top of TCP, it can decode HTTP and WebSocket messages, emitting events for request, response, upgrade, data, etc.&lt;/p&gt;

&lt;p&gt;It looks sort of like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;capturing-packets-in-javascript/pcap_boxes.png&quot; style=&quot;float: none&quot;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;You set up &lt;code&gt;node_pcap&lt;/code&gt; to capture the packets you want, and then you can work with the captured data in JavaScript at whatever level is the most useful.&lt;/p&gt;

&lt;h2&gt;Work in Progress&lt;/h2&gt;

&lt;p&gt;There are a lot of cases that &lt;code&gt;node_pcap&lt;/code&gt; doesn't handle, and for these you'll need a more complete packet decoder like Wireshark. I'm trying to handle the common case of OSX/Linux, IPv4, TCP, HTTP, and WebSocket first, and then add support for other variants of the protocol stack.&lt;/p&gt;

&lt;p&gt;If you like this kind of stuff and want to help expand the protocols that node_pcap understands, patches are certainly welcome.&lt;/p&gt;

&lt;p&gt;I hope this software is useful and fun. Thanks for reading.&lt;/p&gt;</description><author>mjr@ranney.com (Matt Ranney)</author></item><item><title>Intro to Jake - JavaScript build tool for Node.js</title><link>https://howtonode.org/intro-to-jake</link><comments>https://howtonode.org/intro-to-jake#disqus_thread</comments><pubDate>Wed, 29 Sep 2010 02:09:01 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/intro-to-jake</guid><description>&lt;p&gt;Jake is a JavaScript build program for Node.js, with capabilities similar to GNU Make or Ruby's Rake. If you've ever built projects with Rake, you'll be very at home using Jake&lt;/p&gt;

&lt;p&gt;Jake has the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jakefiles are in standard JavaScript syntax&lt;/li&gt;
&lt;li&gt;Tasks with prerequisites&lt;/li&gt;
&lt;li&gt;Namespaces for tasks&lt;/li&gt;
&lt;li&gt;Async execution of tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Installing&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;: Jake requires Node.js. Of course.&lt;/p&gt;

&lt;p&gt;Get Jake:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/mde/node-jake.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build Jake:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd node-jake &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or install with NPM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install jake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Or, get the code, and &lt;code&gt;npm link&lt;/code&gt; in the code root.)&lt;/p&gt;

&lt;h2&gt;Basic usage&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;jake [options] target (commands/options ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see what other options Jake supports by doing &lt;code&gt;jake -h&lt;/code&gt; or &lt;code&gt;jake --help&lt;/code&gt; Probably the most important option starting off is the &lt;code&gt;-T&lt;/code&gt; or &lt;code&gt;--tasks&lt;/code&gt; option that lets you see what tasks are defined in a Jakefile.&lt;/p&gt;

&lt;h2&gt;Jakefiles and Jakefile syntax&lt;/h2&gt;

&lt;p&gt;You define your build tasks in a Jakefile.js (usually in the root of your project) -- by default the &lt;code&gt;jake&lt;/code&gt; command looks for a Jakefile in the current directory, but you can also point Jake at a specific file using the -f (--jakefile) flag.&lt;/p&gt;

&lt;p&gt;In your Jakefile, call &lt;code&gt;task&lt;/code&gt; to define tasks. Call it with three arguments (and one more optional argument):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;task(name, dependencies, handler, [async]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;name&lt;/code&gt; is the string name of the task, &lt;code&gt;dependencies&lt;/code&gt; is an array of the dependencies, and &lt;code&gt;handler&lt;/code&gt; is a function to run for the task.&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;/p&gt;

&lt;p&gt;&lt;intro-to-jake/sample-jakefile.js&gt;&lt;/p&gt;

&lt;p&gt;This is a build tool for Node, so of course we want to support async execution, right? The &lt;code&gt;async&lt;/code&gt; argument is optional, and when set to true &lt;code&gt;(async === true)&lt;/code&gt; indicates the task executes asynchronously. Asynchronous tasks need to call &lt;code&gt;complete()&lt;/code&gt; to signal they have completed.&lt;/p&gt;

&lt;p&gt;Here's an example of an asynchronous task:&lt;/p&gt;

&lt;p&gt;&lt;intro-to-jake/async-jakefile.js&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;desc&lt;/code&gt; to add a string description of the task.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;namespace&lt;/code&gt; to create a namespace of tasks to perform. Call it with two arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace(name, namespaceTasks);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where is &lt;code&gt;name&lt;/code&gt; is the name of the namespace, and &lt;code&gt;namespaceTasks&lt;/code&gt; is a function with calls inside it to &lt;code&gt;task&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt; defining all the tasks for that namespace.&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;/p&gt;

&lt;p&gt;&lt;intro-to-jake/namespace-jakefile.js&gt;&lt;/p&gt;

&lt;p&gt;In this example, the foo:baz task depends on both the 'default' and the 'foo:bar' task.&lt;/p&gt;

&lt;p&gt;Run these namespaced tasks with &lt;code&gt;jake [namespace]:[task]&lt;/code&gt;. The above example would be run with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jake foo:baz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Passing parameters to jake&lt;/h2&gt;

&lt;p&gt;You can pass either positional or named parameters to Jake tasks (well, 'named parameters,' the JavaScripty way, in an Object).&lt;/p&gt;

&lt;p&gt;Single parameters passed to the jake command after the task name are passed along to the handler as positional arguments.&lt;/p&gt;

&lt;p&gt;So you can see this in action, let's set up an 'awesome' task that does nothing but print out the arguments it gets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;desc('This is an awesome task.');
task('awesome', [], function () {
  console.log(sys.inspect(Array.prototype.slice.call(arguments)));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this example, running &lt;code&gt;jake&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jake awesome foo bar baz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'd get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 'foo', 'bar', 'baz' ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Paramters passed to the jake command that contain a colon (:) or equals sign (=) will be added to a keyword/value object that is passed as a final argument to the handler.&lt;/p&gt;

&lt;p&gt;With the above Jakefile, you could run &lt;code&gt;jake&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jake awesome foo bar baz qux:zoobie frang:asdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you'd get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 'foo'
, 'bar'
, 'baz'
, { qux: 'zoobie', frang: 'asdf' }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you might expect if you're used to Make or Rake, running &lt;code&gt;jake&lt;/code&gt; with no arguments runs the default task.&lt;/p&gt;

&lt;h2&gt;Related projects&lt;/h2&gt;

&lt;p&gt;James Coglan's &quot;Jake&quot;: &lt;a href=&quot;http://github.com/jcoglan/jake&quot;&gt;http://github.com/jcoglan/jake&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Confusingly, this is a Ruby tool for building JavaScript packages from source code.&lt;/p&gt;

&lt;p&gt;280 North's Jake: &lt;a href=&quot;http://github.com/280north/jake&quot;&gt;http://github.com/280north/jake&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is also a JavaScript port of Rake, but it runs on the JVM-based Narwhal platform.&lt;/p&gt;</description><author>mde@fleegix.org (Matthew Eernisse)</author></item><item><title>Websockets everywhere with Socket.IO</title><link>https://howtonode.org/websockets-socketio</link><comments>https://howtonode.org/websockets-socketio#disqus_thread</comments><pubDate>Wed, 29 Sep 2010 01:41:39 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/websockets-socketio</guid><description>&lt;p&gt;If you've stayed on top of the advances in the realtime web for the past few years, you've probably heard of different techniques aimed to reduce the latency (ie: speed) of the message exchange between a client and a server. If you're developing a multiplayer game, a chat application, or showing frequent updates of data like tweets or stock price changes, you probably want to &lt;strong&gt;reverse&lt;/strong&gt; the traditional model of communication. So instead of requesting (polling) data on a specific interval of time, you want the server to send (push) data to the client.&lt;/p&gt;

&lt;p&gt;Nowadays, terms like &lt;code&gt;long polling&lt;/code&gt;, &lt;code&gt;comet&lt;/code&gt; and &lt;code&gt;WebSocket&lt;/code&gt; come to mind when it comes to developing a realtime web application or widget. But it's not always obvious how they work, their advantages, disadvantages and limitations, or even what percentage of the web browser market share supports them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://socket.io&quot;&gt;Socket.IO&lt;/a&gt; is a lightweight API that runs on the browser and looks like this:&lt;/p&gt;

&lt;p&gt;&lt;websockets-socketio/socketio-sample.js&gt;&lt;/p&gt;

&lt;p&gt;If you're familiar with &lt;code&gt;WebSocket&lt;/code&gt;, the protocol that aims to simplify bi-directional communication over HTTP once and for all, you'll notice that it looks &lt;strong&gt;very&lt;/strong&gt; similar. The difference is that Socket.IO, under the hood, will enable realtime communication for IE6-9, Firefox 3-4, Safari 3-5, Chrome 3-6, iOS (iPhone and iPad), and other commonplace user agents.&lt;/p&gt;

&lt;h2&gt;Revisiting the history of the realtime web&lt;/h2&gt;

&lt;p&gt;In this day and age, odds are that if you're a web developer you've used AJAX once or twice. Very much like what socket.io does for realtime, libraries like &lt;code&gt;jQuery&lt;/code&gt; have provided abstractions that aim to remove the incompatibilities of what browsers offer for asynchronous HTTP requests (IE uses a proprietary ActiveX object, and mostly everyone else uses the standard XMLHttpRequest).&lt;/p&gt;

&lt;p&gt;Now, if you wanted to make a realtime widget that retrieves data from the server, your first idea might look somewhat like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setInterval(function(){
    $.ajax({ url: '/my/page', success: function(data){
        // do something with the data
    } });
}, 5000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, every 5 seconds we &lt;code&gt;poll&lt;/code&gt; the server for new updates. In my book, that's almost as efficient as the &lt;a href=&quot;http://www.rfc-editor.org/rfc/rfc1149.txt&quot;&gt;transmission of IP Datagrams on pigeons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You might also want to try to reduce the interval, and say, put it at 100 milliseconds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setInterval(function(){
    // now this should be fast!
    $.ajax({ url: '/my/page', success: function(data){} });
}, 100);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, we're ignoring two major downsides now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The HTTP latency. Chances are that a complete roundtrip of the packets on a high speed internet connection will be around 200ms. But this is not always the case! If it were 500 or higher, then things might slow down. And they might slow down unnecessarily, because:&lt;/li&gt;
&lt;li&gt;The server might not have any new data for us. In this case, we'd be producing a lot of network traffic, and request/response cycles overhead, for no purpose.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Introducing long polling&lt;/h2&gt;

&lt;p&gt;Long polling addresses the weakness of traditional polling methods by asking the server for new information on a certain interval, but keeping the connection open if the server has nothing new for us. This technique dramatically decreases latency and network traffic, which means it efficiently disguises itself as a server-push technique.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function load(){
    $.ajax({ url: '/my/page', success: function(){
        // do something with the data
    }, complete: load, timeout: 20000 });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;How about keeping the connection open?&lt;/h2&gt;

&lt;p&gt;If you come from a more traditional programming environment (eg: Desktop software), you're probably wondering why we don't keep the connection open.&lt;/p&gt;

&lt;p&gt;This is possible with at least two fairly well known techniques:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;XMLHttpRequest and the &lt;code&gt;multipart/x-mixed-replace&lt;/code&gt; MIME type (which is enabled by setting &lt;code&gt;multipart = true&lt;/code&gt; in the XMLHTTPRequest instance)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although it was introduced by Netscape in 1995 (yes, when some of us were still unable to read properly), the only commonplace user agent to support it is Firefox.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; populated with a response with the headers &lt;code&gt;Transfer-encoding: chunked&lt;/code&gt; and &lt;code&gt;Connection: keep-alive&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The technique consists of writing &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags that call a function on the parent page as information becomes available to push to the client.&lt;/p&gt;

&lt;p&gt;The disadvantage of this method is that it'll trigger a never-ending spinner or progress bar in most user agents, severely hurting the user experience. In Internet Explorer, this can be worked around by inserting the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; in a hidden document (via the obscure ActiveX object &lt;code&gt;htmlfile&lt;/code&gt;). This technique was exposed to me for the first time thanks to the Gmail Chat team. This gem was &lt;a href=&quot;http://infrequently.org/2006/02/what-else-is-burried-down-in-the-depths-of-googles-amazing-javascript/&quot;&gt;analyzed/discovered&lt;/a&gt; back in the day by Alex Russell&lt;/p&gt;

&lt;p&gt;By now, it's obvious that some lower-latency techniques are available to certain user agents, under certain conditions. The fundamental problem is that now the server has to treat HTTP requests differently, altering&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The headers sent with the response (Content-Type, Connection, etc).&lt;/li&gt;
&lt;li&gt;The duration (a timeout is required for long-polling, but not all the others)&lt;/li&gt;
&lt;li&gt;The &quot;framing&quot; of the messages. For multipart, each message has to be accompanied by a delimiter (boundary).&lt;/li&gt;
&lt;li&gt;Random quirks (IE requires a certain number of dummy bytes at the beginning of the document streamed through the iframe).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these techniques try to minimize the latency of the &lt;strong&gt;incoming&lt;/strong&gt; data from the server, but normal XMLHTTPRequest have to be used to &lt;strong&gt;send&lt;/strong&gt; data from the client. Which brings us to the most optimal solution available today.&lt;/p&gt;

&lt;h2&gt;One transport to rule them all&lt;/h2&gt;

&lt;p&gt;Meet WebSocket, an effort &quot;to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections&quot;, as the author Ian Hickson &lt;a href=&quot;http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76&quot;&gt;puts it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;WebSocket takes advantage of the Upgrade header of the HTTP/1.1 specification, which means it's essentially a new protocol for communication:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The Upgrade general-header allows the client to specify what additional communication protocols it supports and would like to use if the server finds it appropriate to switch protocols.
Examples: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11
http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebSocket won't close the connection after sending a message or receiving one. It's essentially &quot;TCP for the web&quot;, but with a security model built in the protocol, a fairly rare framing system and UTF-8 encoding (no binary).&lt;/p&gt;

&lt;p&gt;If we choose to implement it, some of the problems stated above still hold true:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The server has to give special treatment to the WebSocket requests, performing a handshake unique to the WebSocket protocol, and implement its new security system.&lt;/li&gt;
&lt;li&gt;WebSocket is only supported by the most cutting-edge browser engines on the Desktop, a minority of the web population.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Node.JS koolaid to the rescue&lt;/h2&gt;

&lt;p&gt;Node.JS presents developers with a truly unique and exciting possibility: rolling your own scalable non-blocking HTTP server in one of the most popular dynamic scripting languages of all time, with a simplistic API.&lt;/p&gt;

&lt;p&gt;Writing a (dummy) long-polling server is as easy as:&lt;/p&gt;

&lt;p&gt;&lt;websockets-socketio/longpolling.js&gt;&lt;/p&gt;

&lt;p&gt;Even with this simple API, consolidating your app logic in a way that works across all transports can be difficult.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Socket.IO-node&lt;/code&gt; is here to help: Here's a chat server in 10 lines of code that also announces (broadcasts) who connects to the server:&lt;/p&gt;

&lt;p&gt;&lt;websockets-socketio/broadcasts.js&gt;&lt;/p&gt;

&lt;p&gt;And the best part is, under the hood, it'll handle your WebSocket, WebSocket over Flash, long polling, multipart and iframe connections. Sweet, isn't it?&lt;/p&gt;

&lt;h2&gt;Further reading&lt;/h2&gt;

&lt;p&gt;If you want to learn more about Socket.IO, be sure to watch the &lt;a href=&quot;http://github.com/learnboost/socket.io&quot;&gt;git&lt;/a&gt; &lt;a href=&quot;http://github.com/learnboost/socket.io-node&quot;&gt;repositories&lt;/a&gt;, and check out some of the projects people have created with it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/substack/dnode&quot;&gt;http://github.com/substack/dnode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/jacobthornton/space-tweet&quot;&gt;http://github.com/jacobthornton/space-tweet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/mkilling/alfamegle&quot;&gt;http://github.com/mkilling/alfamegle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/deserat/sock-drawer/&quot;&gt;http://github.com/deserat/sock-drawer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/gerad/lazeroids-node/&quot;&gt;http://github.com/gerad/lazeroids-node/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><author>rauchg@gmail.com (Guillermo Rauch)</author></item><item><title>Node.js and MongoDB</title><link>https://howtonode.org/node-and-mongo</link><comments>https://howtonode.org/node-and-mongo#disqus_thread</comments><pubDate>Sat, 11 Sep 2010 19:14:05 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/node-and-mongo</guid><description>&lt;p&gt;This was the sixth in a series of posts leading up to
&lt;a href=&quot;http://nodeknockout.com/&quot;&gt;Node.js Knockout&lt;/a&gt; on how to use &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;. This post was
written by &lt;a href=&quot;http://mongodb.org/&quot;&gt;10gen&lt;/a&gt; and &lt;a href=&quot;http://blog.mongodb.org/post/812003773/node-js-and-mongodb&quot;&gt;is cross-posted from their blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.10gen.com/&quot;&gt;10gen&lt;/a&gt; is the corporate sponsor of &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt;. MongoDB bridges
the gap between key-value stores (which are fast and highly
scalable) and traditional RDBMS systems (which provide rich queries
and deep functionality).&lt;/p&gt;

&lt;h2&gt;Node and MongoDB&lt;/h2&gt;

&lt;p&gt;Node.js is turning out to be a framework of choice for building
real-time applications of all kinds, from analytics systems to chat
servers to location-based tracking services. If you're still new to
Node, check out &lt;a href=&quot;http://simonwillison.net/2009/Nov/23/node/&quot; title=&quot;Node.js is genuinely exciting&quot;&gt;Simon Willison's excellent introductory post&lt;/a&gt;.
If you're already using Node, you probably need a database, and you
just might have considered using MongoDB.&lt;/p&gt;

&lt;p&gt;The rationale is certainly there. Working with Node's JavaScript
means that MongoDB documents get their most natural representation
- as JSON - right in the application layer. There's also
significant continuity between your application and the MongoDB
shell, since the shell is essentially a JavaScript interpreter, so
you don't have to change languages when moving from application to
database.&lt;/p&gt;

&lt;h2&gt;Node.js MongodB Driver&lt;/h2&gt;

&lt;p&gt;Especially impressive to us at 10gen has been the community support
for Node.js and MongoDB. First, there's Christian Kvalheim's
excellent &lt;a href=&quot;http://github.com/christkv/node-mongodb-native&quot; title=&quot;MongoDB Node Native Driver&quot;&gt;mongodb-node-native project&lt;/a&gt;, a non-blocking MongoDB
driver implemented entirely in JavaScript using Node.js's system
libraries. The project is a pretty close port of the
&lt;a href=&quot;http://www.mongodb.org/display/DOCS/Ruby+Language+Center&quot; title=&quot;MongoDB Ruby Driver&quot;&gt;MongoDB Ruby driver&lt;/a&gt;, making for an easy transition for those
already used to the 10gen-supported drivers. If you're just
starting, there's a helpful &lt;a href=&quot;http://groups.google.com/group/node-mongodb-native&quot; title=&quot;MongoDB Node Native Mailing List&quot;&gt;mongodb-node-native mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Hummingbird&lt;/h2&gt;

&lt;p&gt;Need a real-world example? Check out &lt;a href=&quot;http://mnutt.github.com/hummingbird/&quot; title=&quot;Hummingbird App&quot;&gt;Hummingbird&lt;/a&gt;, Michael
Nutt's real-time analytics app. It's built on top of MongoDB using
Node.js and the mongodb-node-native driver. Hummingbird, which is
used in production at &lt;a href=&quot;http://www.gilt.com/&quot; title=&quot;Gilt Groupe&quot;&gt;Gilt Groupe&lt;/a&gt;, brings together an
impressive array of technologies; it uses the &lt;a href=&quot;http://expressjs.com/&quot; title=&quot;Express.js&quot;&gt;express.js&lt;/a&gt;
Node.js app framework and sports a responsive interface with the
help of web sockets. Definitely worth checking out.&lt;/p&gt;

&lt;h2&gt;Mongoose&lt;/h2&gt;

&lt;p&gt;Of course, one of the admitted difficulties in working with Node.js
is dealing with deep callback structures. If this poses a problem,
or if you happen to want a richer data modeling library, then
&lt;a href=&quot;http://www.learnboost.com/mongoose/&quot; title=&quot;Mongoose&quot;&gt;Mongoose&lt;/a&gt; is the answer. Created by &lt;a href=&quot;http://www.learnboost.com/&quot; title=&quot;Learnboost&quot;&gt;Learnboost&lt;/a&gt;, Mongoose
sits atop mongodb-node-native, providing a nice API for modeling
your application.&lt;/p&gt;</description><author>all@nodeknockout.com (Node Knockout)</author></item><item><title>An Introduction to Geddy</title><link>https://howtonode.org/introduction-to-geddy</link><comments>https://howtonode.org/introduction-to-geddy#disqus_thread</comments><pubDate>Sat, 11 Sep 2010 19:02:05 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/introduction-to-geddy</guid><description>&lt;p&gt;This was the fifth in a series of posts leading up to
&lt;a href=&quot;http://nodeknockout.com/&quot;&gt;Node.js Knockout&lt;/a&gt; on how to use &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;. This post was
written by &lt;a href=&quot;http://geddyjs.org/&quot;&gt;geddy&lt;/a&gt; author and &lt;a href=&quot;http://nodeknockout.com/judging#matthew_eernisse&quot;&gt;Node.js Knockout judge&lt;/a&gt; Matthew
Eernisse.&lt;/p&gt;

&lt;p&gt;Geddy is a modular, full-service web framework for Node.js, similar
to Merb, Rails, Pylons, or Django.&lt;/p&gt;

&lt;p&gt;Geddy provides a lot of great features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flexible, robust router with easy RESTful routing
&lt;a href=&quot;http://wiki.github.com/mde/geddy/using-the-router&quot;&gt;(router docs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Intelligent content-negotiation &lt;a href=&quot;http://wiki.github.com/mde/geddy/content-negotiation&quot;&gt;(content-negotiation docs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Models and validations&lt;a href=&quot;http://wiki.github.com/mde/geddy/models&quot;&gt;(model docs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simple, intuitive views with partials support&lt;/li&gt;
&lt;li&gt;Generator utility for easy creation of apps and scaffolding&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;There are a few different ways of getting Geddy.&lt;/p&gt;

&lt;p&gt;Download the current release, &lt;a href=&quot;/dist/geddy-v0.1.1.tar.gz&quot;&gt;geddy-v0.1.1.tar.gz&lt;/a&gt; (2010-08-06)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/work$ curl -O http://geddyjs.org/dist/geddy-v0.1.1.tar.gz
$ ~/work$ tar -xvzf geddy-v0.1.1.tar.gz
$ ~/work$ cd geddy-v0.1.1
$ ~/work$ make &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, get the latest Geddy code from GitHub and install it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/work$ git clone git://github.com/mde/geddy.git
$ ~/work$ cd geddy
$ ~/work$ make &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Geddy can also now be installed with NPM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install geddy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to use a database, you'll need database bindings for
Node (The Geddy GitHub wiki has docs for setting up &lt;a href=&quot;http://wiki.github.com/mde/geddy/install-sqlite-and-node-sqlite&quot;&gt;SQLite&lt;/a&gt; or
&lt;a href=&quot;http://wiki.github.com/mde/geddy/install-postgresql-and-node_postgres&quot;&gt;Postgres&lt;/a&gt;). CouchDB does not require database bindings.&lt;/p&gt;

&lt;p&gt;NOTE: For Postgres, your database user must have the ability to
create databases and tables.&lt;/p&gt;

&lt;h3&gt;Create an app&lt;/h3&gt;

&lt;p&gt;Create your Geddy app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/work$ geddy-gen app bytor
Created app bytor.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check if your app runs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/work/bytor$ geddy
Geddy worker (pid 5206) running at port 4000 (development mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to &lt;a href=&quot;http://localhost:4000/&quot;&gt;http://localhost:4000/&lt;/a&gt; — you should see the following:&lt;/p&gt;

&lt;p&gt;“Attention all planets of the Solar Federation”&lt;/p&gt;

&lt;p&gt;Geddy has some startup options you can see by doing &lt;code&gt;geddy -h&lt;/code&gt; or
&lt;code&gt;geddy --help&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;RESTful routes&lt;/h2&gt;

&lt;p&gt;Create a resource-based route with a model stub using
&lt;code&gt;geddy-gen resource [model_name]&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/work/bytor$ geddy-gen resource snow_dog
[ADDED] ./app/models/snow_dog.js
[ADDED] ./app/controllers/snow_dogs.js
resources snow_dogs route added to ./config/router.js
Updated inflections map.
Created view templates.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Geddy's pluralization code isn't that smart yet — if you want a
special plural, add it with a comma after the model name (e.g.
&lt;code&gt;geddy-gen resource foo,fooes&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;There is a nice &lt;a href=&quot;http://wiki.github.com/mde/geddy/using-the-router&quot;&gt;wiki doc for Geddy's router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Test your RESTful routes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/work/bytor$ geddy
Geddy worker (pid 5206) running at port 4000 (development mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to [http://localhost:4000/snow_dogs.html][]. You should see the
following:&lt;/p&gt;

&lt;p&gt;Params&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;extension: html&lt;/li&gt;
&lt;li&gt;controller: SnowDogs&lt;/li&gt;
&lt;li&gt;action: index&lt;/li&gt;
&lt;li&gt;method: GET&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just printing out the contents of the &lt;code&gt;params&lt;/code&gt; object in
the action.&lt;/p&gt;

&lt;p&gt;Now go to [http://localhost:4000/snow_dogs.json][]. You should see
the following:&lt;/p&gt;

&lt;p&gt;{&quot;params&quot;:{&quot;method&quot;:&quot;GET&quot;,&quot;controller&quot;:&quot;SnowDogs&quot;,&quot;action&quot;:&quot;index&quot;,&quot;format&quot;:&quot;json&quot;}}&lt;/p&gt;

&lt;p&gt;This is Geddy's content-negotiation at work. Geddy tries to do the
right thing based on the formats your controller supports, and what
the client wants.&lt;/p&gt;

&lt;p&gt;There is more detailed info on
&lt;a href=&quot;http://wiki.github.com/mde/geddy/content-negotiation&quot;&gt;Geddy's content-negotiation in the wiki doc&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Model properties, etc.&lt;/h2&gt;

&lt;p&gt;Kill the server (Ctrl+c), and change your model as desired.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/work/bytor$ vi app/models/snow_dog.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add some properties, validations, methods:&lt;/p&gt;

&lt;p&gt;&lt;introduction-to-geddy/models/snow_dog.js&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.github.com/mde/geddy/models&quot;&gt;The wiki doc on models&lt;/a&gt; has more detailed info.&lt;/p&gt;

&lt;h2&gt;DB config&lt;/h2&gt;

&lt;p&gt;Turn on database support. Edit your development config file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/work/bytor$ vi config/environments/development.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set the appropriate values in config.database. See the wiki doc on
&lt;a href=&quot;http://wiki.github.com/mde/geddy/sample-db-configs&quot;&gt;sample DB configs&lt;/a&gt; for examples.&lt;/p&gt;

&lt;p&gt;Create the database.&lt;/p&gt;

&lt;p&gt;(Remember, with Postgres, your database user has to have enough
privileges to create a database.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/work/bytor$ geddy-gen db:create
Creating DB for development.js...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Scaffold&lt;/h2&gt;

&lt;p&gt;Generate your scaffold from the model file you just edited:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/work/bytor$ geddy-gen scaffold snow_dog
Created client-side model JavaScript files.
Created controller and views for snow_dog.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fire up the server again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ~/work/bytor$ geddy
Geddy worker (pid 5206) running at port 4000 (development mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to [http://localhost:4000/snow_dogs.html][], and start
creating, editing, removing items.&lt;/p&gt;

&lt;p&gt;That’s pretty much it.&lt;/p&gt;

&lt;p&gt;The query API for Geddy's models is still pretty limited — it
supports only find-by-id and find-by-type. You can take a look at
the code in your controller for a closer look at the API.&lt;/p&gt;

&lt;h2&gt;Get involved&lt;/h2&gt;

&lt;p&gt;You can help out with Geddy by filing bug reports on GitHub here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/mde/geddy/issues&quot;&gt;http://github.com/mde/geddy/issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have questions, problems, or feature ideas, you can shoot an
e-mail to the mailing list here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/geddy&quot;&gt;http://groups.google.com/group/geddy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And of course, you can always &lt;a href=&quot;http://github.com/mde/geddy&quot;&gt;fork Geddy on GitHub&lt;/a&gt;, make
improvements, and send a pull request.&lt;/p&gt;</description><author>mde@fleegix.org (Matthew Eernisse)</author></item><item><title>Debugging with node-inspector</title><link>https://howtonode.org/debugging-with-node-inspector</link><comments>https://howtonode.org/debugging-with-node-inspector#disqus_thread</comments><pubDate>Sat, 11 Sep 2010 18:42:29 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/debugging-with-node-inspector</guid><description>&lt;p&gt;This was the fourth in a series of posts leading up
to &lt;a href=&quot;http://nodeknockout.com/&quot;&gt;Node.js Knockout&lt;/a&gt; on how to
use &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;. This post was recorded
by &lt;a href=&quot;http://github.com/dannycoates/node-inspector&quot;&gt;node-inspector&lt;/a&gt; author
and &lt;a href=&quot;http://nodeknockout.com/judging#danny_coates&quot;&gt;Node.js Knockout judge&lt;/a&gt; Danny Coates.&lt;/p&gt;

&lt;h2&gt;Video&lt;/h2&gt;

&lt;p&gt;Check out this sweet screencast where Danny explains how to use
&lt;a href=&quot;http://github.com/dannycoates/node-inspector&quot;&gt;node-inspector&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;object height=&quot;300&quot; width=&quot;500&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/AOnK3NVnxL8&amp;amp;hl=en&amp;amp;fs=1&amp;amp;hd=1&quot; /&gt;&lt;/param&gt;&lt;param name=&quot;wmode&quot; value=&quot;window&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;/param&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/AOnK3NVnxL8&amp;amp;hl=en&amp;amp;fs=1&amp;amp;hd=1&quot; allowfullscreen=&quot;true&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; wmode=&quot;window&quot; height=&quot;300&quot; width=&quot;500&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;

&lt;h2&gt;Transcription&lt;/h2&gt;

&lt;p&gt;Hi this is Danny Coates. Since Node Knockout is coming up pretty soon I'd like to give you a quick introduction to Node Inspector, which is a graphical debugger for Node.&lt;/p&gt;

&lt;p&gt;It's hosted on GitHub, you can go check it out there. Let's get started with the demo. To start the inspector I'm going to run it from the node-chat directory (node-chat is a sample application), like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node ../node-inspector/bin/inspector.js --start-brk=server.js \
    --forward-io --profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I pass it the &lt;code&gt;--start-brk&lt;/code&gt; parameter we're going to end up with two processes; the one we're debugging will be a child process of the inspector process. If I quit the profile it'll also close down the node-chat app.&lt;/p&gt;

&lt;p&gt;Let's pull up the debugger. Since I did &lt;code&gt;--start-brk&lt;/code&gt; intead of &lt;code&gt;--start&lt;/code&gt; I'm going to get a breakpoint on the very first line; it's useful for debugging short lived apps.&lt;/p&gt;

&lt;p&gt;Let me walk you through the interface. We have three panels; Scripts, Profiles (which isn't active in the main branch yet) and Console. The console is a standard JavaScript console; it'll run whatever you type in there in Node's V8.&lt;/p&gt;

&lt;p&gt;There's also a pull down menu of your JavaScript files, and some controls to step over, step in, step out and pause the script. There are also expressions to watch, and the call stack. You can step to any level in the call stack. Beneath the stack you can see your locally and globally scoped variables, followed by your list of breakpoints.&lt;/p&gt;

&lt;p&gt;If you click on a breakpoint it'll jump to the relevant line in your code.&lt;/p&gt;

&lt;p&gt;Let's step through the node-chat app, to see what's going on. One of the nice things is that you can do a mouseover on some code, and it'll give you a popup of what that value is.&lt;/p&gt;

&lt;p&gt;It looks like we're setting some intervals, hooking up some routes... That join function looks interesting, let's stick a breakpoint there, and then continue. We can pull up a mini console view, and we'll see that we've got some output on stdout (which is the same thing as the output on the command line).&lt;/p&gt;

&lt;p&gt;Let's go ahead an open a couple of node-chat windows. Back in Node Inspector, we should have hit the breakpoint. If we want to see what simpleJSON does but we don't want to step in, we can mouse over it and get the source code in a popup.&lt;/p&gt;

&lt;p&gt;Let's step in to create session. Then let's step out, and add a watch on sessions. Watches will update every time you hit a breakpoint or step through the code. Let's play through, and see me join the chat.&lt;/p&gt;

&lt;p&gt;One of the other cool things you can do is live edit the code. If you just double click in the code you can then enter text that will be executed the next time the code is run.&lt;/p&gt;

&lt;p&gt;You can also use the console to execute stuff, and this'll run in Node. console.log output will appear on the forwarded stdout, and in the regular stdout in the terminal.&lt;/p&gt;

&lt;p&gt;One more thing; even though it doesn't work in the current main branch it's cool, so let's have a look. You can take a heap snapshot at any time, and you get to see the total number of objects, and the size of everything. You can then run the app some more, and take another snapshot; it'll give you a comparison between the two snapshots. If, for example, a count keeps going up, you might have a memory leak.&lt;/p&gt;

&lt;p&gt;That's really the quick tour. If you're interested, go check out &lt;a href=&quot;https://github.com/dannycoates/node-inspector&quot;&gt;Node Inspector on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any problems add an issue, and I'll look at that when I get a chance. Check out the Wiki for things that might be helpful.&lt;/p&gt;

&lt;p&gt;Thanks for watching.&lt;/p&gt;</description><author>dannycoates@gmail.com (Danny Coates)</author></item><item><title>Introduction to npm</title><link>https://howtonode.org/introduction-to-npm</link><comments>https://howtonode.org/introduction-to-npm#disqus_thread</comments><pubDate>Sat, 11 Sep 2010 18:05:24 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/introduction-to-npm</guid><description>&lt;p&gt;This was the third in a series of posts leading up to
&lt;a href=&quot;http://nodeknockout.com/&quot;&gt;Node.js Knockout&lt;/a&gt; on how to use &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;npm is a &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; package manager. As its name would
imply, you can use it to install node programs. Also, if you use it
in development, it makes it easier to specify and link
dependencies.&lt;/p&gt;

&lt;h2&gt;Installing npm&lt;/h2&gt;

&lt;p&gt;First of all, install &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;. Like so much of the NodeJS
ecosystem, npm is very young, so you'll generally have to use a
very recent version of node in order to use it. At the time of
writing this, that means at least version 0.1.103.&lt;/p&gt;

&lt;p&gt;To install npm in one command, you can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://npmjs.org/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, if you're more paranoid than lazy, you can also get the
&lt;a href=&quot;http://github.com/isaacs/npm&quot;&gt;latest code&lt;/a&gt;, check it all out, and when you're happy there's
nothing in there to pwn your machine, issue a &lt;code&gt;make install&lt;/code&gt; or
&lt;code&gt;make dev&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;what, no sudo?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;I strongly encourage you not to do package management with sudo!&lt;/strong&gt;
Packages can run arbitrary scripts, which makes sudoing a package
manager command as safe as a chainsaw haircut. Sure, it's fast and
definitely going to cut through any obstacles, but you might
actually &lt;em&gt;want&lt;/em&gt; that obstacle to stay there.&lt;/p&gt;

&lt;p&gt;I recommend doing this once instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chown -R $USER /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That sets your user account as the owner of the &lt;code&gt;/usr/local&lt;/code&gt;
directory, so that you can just issue normal commands in there.
Then you won't ever have to use sudo when you install node or issue
npm commands.&lt;/p&gt;

&lt;p&gt;It's much better this way. &lt;code&gt;/usr/local&lt;/code&gt; is &lt;em&gt;supposed&lt;/em&gt; to be the
stuff you installed, after all.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/rant&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Getting help: &lt;code&gt;npm help&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;npm has a lot of help documentation about all of its commands. The
&lt;code&gt;npm help&lt;/code&gt; command is your best friend. You can also tack &lt;code&gt;--help&lt;/code&gt;
onto any npm command to get help on that one command.&lt;/p&gt;

&lt;h2&gt;Installing stuff: &lt;code&gt;npm install&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;You probably got npm because you want to install stuff. That's what
package managers do, they install stuff.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install blerg&lt;/code&gt; installs the latest version of &lt;code&gt;blerg&lt;/code&gt;. You can
also give &lt;code&gt;install&lt;/code&gt; a tarball, a folder, or a url to a tarball. If
you run &lt;code&gt;npm install&lt;/code&gt; without any arguments, it tries to install
the current folder.&lt;/p&gt;

&lt;p&gt;This command can do a lot of stuff. &lt;code&gt;npm help install&lt;/code&gt; will tell
you more than you ever wanted to know about it.&lt;/p&gt;

&lt;h2&gt;Showing things: &lt;code&gt;npm ls&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;npm ls&lt;/code&gt; command shows what's on your system, and also what's
available in the registry. The arguments are beautifully colored
greps. For instance &lt;code&gt;npm ls installed&lt;/code&gt; would show you what's
installed on your system. &lt;code&gt;npm ls installed marak&lt;/code&gt; would show you
all the packages installed on your system created by &lt;a href=&quot;http://jimbastard.com/&quot;&gt;Marak&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm help ls&lt;/code&gt; for more info.&lt;/p&gt;

&lt;h2&gt;Updating packages: &lt;code&gt;npm update&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;update&lt;/code&gt; command does a few things.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Search the registry for new versions of all the packages
installed.&lt;/li&gt;
&lt;li&gt;If there's a newer version, then install it.&lt;/li&gt;
&lt;li&gt;Point dependent packages at the new version, if it satisfies
their dependency.&lt;/li&gt;
&lt;li&gt;Remove the old versions, if no other package names them as a
dependency.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So basically, update behaves a lot like a &quot;standard&quot; package
manager's update command, except that it also checks to make sure
that the new version isn't going to break anything before it points
stuff at it.&lt;/p&gt;

&lt;p&gt;You see, npm keeps you out of dependency hell.&lt;/p&gt;

&lt;h2&gt;Development: &lt;code&gt;npm link&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The link command symlinks a package folder into your system, so
that changes are automatically reflected. It also installs the
&lt;code&gt;&quot;dependencies&quot;&lt;/code&gt; and &lt;code&gt;&quot;devDependencies&quot;&lt;/code&gt; packages from your
package.json file.&lt;/p&gt;

&lt;p&gt;This is one of the most useful tools for developing programs with
node. Give your thing a name and a version in a &lt;code&gt;package.json&lt;/code&gt;
file. Specify a few dependencies and a &lt;code&gt;main&lt;/code&gt; module. Then run
&lt;code&gt;npm link&lt;/code&gt;, and go to town coding it and testing it out in the node
repl. It's great.&lt;/p&gt;

&lt;p&gt;npm is a development tool, first and foremost. People sometimes say
&quot;Yeah, I haven't gotten time to check out that package manager
stuff yet. Maybe I will when my code is more stable.&quot;&lt;/p&gt;

&lt;p&gt;That's like saying that you're going to start using source control
when your code is done. It's just silly. Source control should make
your process &lt;em&gt;easier&lt;/em&gt;, and if it doesn't, then you're using a
broken SCM. Same for package management. It should make it easier,
and if it doesn't, then something is wrong.&lt;/p&gt;

&lt;p&gt;npm isn't &quot;for&quot; publishing. That's just something it can do. It's
&quot;for&quot; playing. That's why I wrote it: to play with your code,
without having to remember a dozen different ways to install your
stuff, or having to get you all to structure your code the same
way.&lt;/p&gt;

&lt;p&gt;It's &lt;em&gt;supposed&lt;/em&gt; to make the process funner.&lt;/p&gt;

&lt;h2&gt;Making a Package: The &lt;code&gt;package.json&lt;/code&gt; file.&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; file goes in the root of your package. It tells
npm how your package is structured, and what to do to install it.&lt;/p&gt;

&lt;p&gt;Most of the time, you only need the &lt;code&gt;&quot;name&quot;&lt;/code&gt;, &lt;code&gt;&quot;version&quot;&lt;/code&gt;, and
&lt;code&gt;&quot;main&quot;&lt;/code&gt; fields (even for node-waf compiled addons).&lt;/p&gt;

&lt;p&gt;If you don't know &lt;a href=&quot;http://json.org/&quot;&gt;json&lt;/a&gt;, then it's about time you learn it. It's
pretty easy.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;npm help json&lt;/code&gt; to learn which fields npm cares about.
Basically, it's as simple as putting the package.json file in the
root of your project, and then telling it how to get to your code.&lt;/p&gt;

&lt;p&gt;Seriously. It's incredibly easy. If you disagree, please
&lt;a href=&quot;mailto:i@izs.me&quot;&gt;let me know&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Acquiring Fame: &lt;code&gt;npm publish&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;So, you created a package, and you can install it. Now you want the
everlasting fame and glory that comes with other people using your
code. There is no better way to ensure your immortality than
eventually being a part of every web app out there, and the
best—nay, the ONLY—way to truly accomplish this is to publish
nodejs packages.&lt;/p&gt;

&lt;p&gt;First, create a user account with &lt;code&gt;npm adduser&lt;/code&gt;. Give it a
username, password, and email address, and it'll create an account
on the npm registry. (You can also use adduser to authorize a user
account on a new machine, or fix the situation if you break your
configs.)&lt;/p&gt;

&lt;p&gt;Next, go to the root of your package code, and do &lt;code&gt;npm publish&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bam. Done.&lt;/p&gt;

&lt;p&gt;Now go to the mailing list and tell everyone how much more awesome
they'd be if they used your program.&lt;/p&gt;

&lt;h2&gt;Dependency Hell Isn't Fun&lt;/h2&gt;

&lt;p&gt;Most systems have a single root namespace. That kind of sucks. If
two different things depend on different versions of the same
dependency, then you've got two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Statically compile the dependency into the program.&lt;/li&gt;
&lt;li&gt;Hate life.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Option #2 is Not Fun. So eff that noise. That sucks, and is dumb.&lt;/p&gt;

&lt;p&gt;Option #1 is less than ideal if you want to be able to abstract
out parts of your program and benefit from updates to the
dependencies.&lt;/p&gt;

&lt;p&gt;Thankfully, unlike most programming environments, the CommonJS
Securable Module system lets you avoid dependency hell by modifying
the &lt;code&gt;require.paths&lt;/code&gt; at runtime, so that each package sees the
version that it depends on.&lt;/p&gt;

&lt;p&gt;I think that's pretty cool.&lt;/p&gt;

&lt;h2&gt;What to do when npm lets you down&lt;/h2&gt;

&lt;p&gt;npm's pretty young software, and still being actively developed.
Especially if you find yourself using some newer features,
occasionally npm will have a bug. Or, perhaps equally likely,
you'll need npm to do something that it doesn't yet do, and want to
request a feature.&lt;/p&gt;

&lt;p&gt;You can post bugs and feature requests on &lt;a href=&quot;http://github.com/isaacs/npm/issues&quot;&gt;the issues page&lt;/a&gt;. If
you want to ask general questions, you can ask on
&lt;a href=&quot;http://groups.google.com/group/npm-&quot;&gt;the google group&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or, if you're more the instant gratification type, you can come ask
questions in IRC on &lt;a href=&quot;irc://irc.freenode.net/#node.js&quot;&gt;the #node.js channel on freenode.net&lt;/a&gt;. If
I'm there, I'll try to help you out, but this community continues
to impress me with its helpfulness. Noders rock!&lt;/p&gt;</description><author>i@izs.me (Isaac Z. Schlueter)</author></item><item><title>Getting Started with Express</title><link>https://howtonode.org/getting-started-with-express</link><comments>https://howtonode.org/getting-started-with-express#disqus_thread</comments><pubDate>Sat, 11 Sep 2010 17:55:36 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/getting-started-with-express</guid><description>&lt;p&gt;This was the second in a series of posts leading up to
&lt;a href=&quot;http://nodeknockout.com/&quot;&gt;Node.js Knockout&lt;/a&gt; on how to use &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;. This post was
written by guest author and &lt;a href=&quot;http://nodeknockout.com/judging#tj_holowaychuk&quot;&gt;Node.js Knockout judge&lt;/a&gt;
&lt;a href=&quot;http://tjholowaychuk.com&quot;&gt;Tj Holowaychuk&lt;/a&gt; and is
&lt;a href=&quot;http://tjholowaychuk.com/post/937557927/getting-started-with-express&quot;&gt;cross-posted on his blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this short tutorial for &lt;a href=&quot;http://nodeknockout.com&quot;&gt;Node Knockout&lt;/a&gt; we will be creating a
small application using the popular &lt;a href=&quot;http://expressjs.com&quot;&gt;Express&lt;/a&gt; framework.&lt;/p&gt;

&lt;p&gt;Express is a light-weight &lt;a href=&quot;http://sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt;-inspired web development
framework. Express provides several great features such as an
intuitive view system, robust routing, an executable for generating
applications and much more.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;To get started with Express we first have to install it. There are
several ways to do so, however my personal favourite is the
following command which does not require a node package management
system:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl http://expressjs.com/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively if we have &lt;a href=&quot;http://github.com/isaacs/npm&quot;&gt;npm&lt;/a&gt; installed we can simply execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install express
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;First Express Application&lt;/h2&gt;

&lt;p&gt;To create our first application we could use &lt;em&gt;express(1)&lt;/em&gt; to
generate an app for us, however an Express app &lt;em&gt;can&lt;/em&gt; be a single
JavaScript file if we wish, and in our case of a simple “Hello
World” app that is exactly what we will do.&lt;/p&gt;

&lt;p&gt;The first thing we need to do is require express, and create an
app. The &lt;em&gt;app&lt;/em&gt; variable shown below is an &lt;strong&gt;express.Server&lt;/strong&gt;,
however by convention we typically refer to Express servers as
“apps”.&lt;/p&gt;

&lt;p&gt;&lt;getting-started-with-express/server.js#requires&gt;&lt;/p&gt;

&lt;p&gt;Our next task is to set up one or more routes. A route consists of
a path (string or regexp), callback function, and HTTP method. Our
hello world example calls &lt;em&gt;app.get()&lt;/em&gt; which represents the HTTP
&lt;strong&gt;GET&lt;/strong&gt; method, with the path “/”, representing our “root” page,
followed by the callback function.&lt;/p&gt;

&lt;p&gt;&lt;getting-started-with-express/server.js#routes&gt;&lt;/p&gt;

&lt;p&gt;Next we need our server to listen on a given port. Below we call
&lt;em&gt;listen()&lt;/em&gt; which attempts to bind the server to port &lt;em&gt;3000&lt;/em&gt; by
default, however this can be whatever you like, for example
&lt;em&gt;listen(80)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;getting-started-with-express/server.js#start&gt;&lt;/p&gt;

&lt;p&gt;We can execute the app simply by executing &lt;em&gt;node(1)&lt;/em&gt; against our
JavaScript file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node server.js
Express server started on port 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally to confirm everything is working as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl http://localhost:3000
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Middleware&lt;/h2&gt;

&lt;p&gt;Behind the scenes the &lt;a href=&quot;http://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt; middleware framework developed by
myself (&lt;a href=&quot;http://tjholowaychuk.com&quot;&gt;TJ Holowaychuk&lt;/a&gt;) and &lt;a href=&quot;http://creationix.com&quot;&gt;Tim Caswell&lt;/a&gt; is
utilized to power the Express middleware. For example if we wish to
add logging support to our hello world application, we can add the
following line below &lt;em&gt;app = express.createServer();&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.use(express.logger());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on middleware usage view the &lt;a href=&quot;http://expressjs.com/guide.html#Middleware&quot;&gt;Middleware&lt;/a&gt;
section of the Express &lt;a href=&quot;http://expressjs.com/guide.html&quot;&gt;Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Source&lt;/h2&gt;

&lt;p&gt;Below is all &lt;em&gt;8&lt;/em&gt; lines of source we used to create our first
Express application:&lt;/p&gt;

&lt;p&gt;&lt;getting-started-with-express/full-server.js&gt;&lt;/p&gt;</description><author>tj@vision-media.ca (TJ Holowaychuk)</author></item><item><title>How to Install Node.js</title><link>https://howtonode.org/how-to-install-nodejs</link><comments>https://howtonode.org/how-to-install-nodejs#disqus_thread</comments><pubDate>Sat, 11 Sep 2010 17:40:19 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/how-to-install-nodejs</guid><description>&lt;p&gt;This was the first in a series of posts leading up to
&lt;a href=&quot;http://nodeknockout.com/&quot;&gt;Node.js Knockout&lt;/a&gt; on how to use &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have been given permission to repost the articles from the contest here (in wheat format) for general consumption.  Expect more to come.&lt;/p&gt;

&lt;p&gt;In this post we detail how to install node on &lt;a href=&quot;#mac&quot;&gt;Mac&lt;/a&gt;, &lt;a href=&quot;#ubuntu&quot;&gt;Ubuntu&lt;/a&gt;,
and &lt;a href=&quot;#windows&quot;&gt;Windows&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Mac&lt;/h2&gt;

&lt;p&gt;If you're using the excellent &lt;a href=&quot;http://github.com/mxcl/homebrew&quot;&gt;homebrew&lt;/a&gt; package manager, you can
install node with one command: &lt;code&gt;brew install node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Otherwise, follow the below steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.apple.com/technologies/tools/&quot;&gt;Install Xcode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://help.github.com/mac-git-installation/&quot;&gt;Install git&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run the following commands:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;how-to-install-nodejs/darwin_setup.sh&gt;&lt;/p&gt;

&lt;p&gt;You can check it worked with a simple &lt;a href=&quot;#hello&quot;&gt;Hello, World!&lt;/a&gt; example.&lt;/p&gt;

&lt;h2&gt;Debian (Ubuntu/ Mint)&lt;/h2&gt;

&lt;p&gt;With Aptitude package manager one can install the package nodeJS then edit their bash config to redirect the command &lt;code&gt;node&lt;/code&gt; to &lt;code&gt;nodejs&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install nodejs
sudo apt-get install npm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nano (edit / vim) the file ~/.bashrc and add the line:
    &lt;code&gt;alias node=&quot;nodejs&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Redhat (Fedora / CentOs)&lt;/h2&gt;

&lt;p&gt;Simply install from official repos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install nodejs npm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If that fails, enable EPEL repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl --silent --location https://rpm.nodesource.com/setup | bash -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then simply install from repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum -y install nodejs 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Gentoo&lt;/h2&gt;

&lt;p&gt;In portage tree:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;emerge nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Archlinux&lt;/h2&gt;

&lt;p&gt;In official repo use pacman package manager:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pacman -S nodejs npm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Linux from source&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install the dependencies ( Below example using debian apptitude package manager):
g++ curl
libssl-dev 
apache2-utils
git-core
build-essential&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;code&gt;sudo apt-get install g++ curl libssl-dev apache2-utils git-core build-essential&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the following commands:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;how-to-install-nodejs/ubuntu_setup.sh&gt;&lt;/p&gt;

&lt;p&gt;You can check it worked with a simple &lt;a href=&quot;#hello&quot;&gt;Hello, World!&lt;/a&gt; example.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://www.codediesel.com/linux/installing-node-js-on-ubuntu-10-04/&quot;&gt;code-diesel&lt;/a&gt; for the Ubuntu dependencies.&lt;/p&gt;

&lt;h2&gt;Windows&lt;/h2&gt;

&lt;p&gt;Currently, you must use &lt;a href=&quot;http://www.cygwin.com/&quot;&gt;cygwin&lt;/a&gt; to install node. To do so,
follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mcclean-cooper.com/valentino/cygwin_install/&quot;&gt;Install cygwin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;setup.exe&lt;/code&gt; in the cygwin folder to install the following
packages:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;devel &amp;rarr; openssl&lt;/li&gt;
&lt;li&gt;devel &amp;rarr; g++-gcc&lt;/li&gt;
&lt;li&gt;devel &amp;rarr; make&lt;/li&gt;
&lt;li&gt;python &amp;rarr; python&lt;/li&gt;
&lt;li&gt;devel &amp;rarr; git&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open the cygwin command line with
&lt;code&gt;Start &amp;gt; Cygwin &amp;gt; Cygwin Bash Shell&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Run the below commands to download and build node.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;how-to-install-nodejs/cygwin_setup.sh&gt;&lt;/p&gt;

&lt;p&gt;For more details, including information on troubleshooting, please
see the &lt;a href=&quot;http://wiki.github.com/joyent/node/building-node-on-windowscygwin&quot;&gt;GitHub wiki page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Hello Node.js!&lt;/h2&gt;

&lt;p&gt;Here's a quick program to make sure everything is up and running
correctly:&lt;/p&gt;

&lt;p&gt;&lt;how-to-install-nodejs/hello_node.js&gt;&lt;/p&gt;

&lt;p&gt;Run the code with the &lt;code&gt;node&lt;/code&gt; command line utility:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; node hello_node.js
Server running at http://127.0.0.1:8124/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if you navigate to &lt;a href=&quot;http://127.0.0.1:8124/&quot;&gt;http://127.0.0.1:8124/&lt;/a&gt; in your browser,
you should see a nice message.&lt;/p&gt;

&lt;h2&gt;Congrats!&lt;/h2&gt;

&lt;p&gt;You've installed &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;.&lt;/p&gt;</description><author>all@nodeknockout.com (Node Knockout)</author></item><item><title>Flow Control in npm</title><link>https://howtonode.org/flow-control-in-npm</link><comments>https://howtonode.org/flow-control-in-npm#disqus_thread</comments><pubDate>Tue, 31 Aug 2010 22:29:18 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/flow-control-in-npm</guid><description>&lt;p&gt;Flow control is a popular subject in NodeJS.  Since most of us learned synchronous object-oriented programming patterns in school, it can be a bit of a shift to really leverage asynchronous functional programming for all it can do.&lt;/p&gt;

&lt;p&gt;As it turns out, a great way to leverage huge chunks of the node API is to build a package manager.  npm has to do a lot of stuff with the file system, child processes, and HTTP requests to the registry.  Fetching and building packages is a lot of &quot;laundry list&quot; programming.  That is, the algorithms are very simple (fetch this file, put it over there, run that script, etc.), but there's a lot to do, and you've gotta make sure everything gets done right (and in the right order).&lt;/p&gt;

&lt;p&gt;To keep this from getting out of hand, I've leveraged two fairly low-level patterns that are found throughout the NodeJS API, but which I haven't seen documented anywhere yet, and which I'm calling &quot;the Action/Callback pattern&quot;.&lt;/p&gt;

&lt;h2&gt;Action functions&lt;/h2&gt;

&lt;p&gt;Action functions can take a variable amount of arguments, but the &lt;em&gt;last&lt;/em&gt; argument is always a callback function.  It MUST call that cb exactly one time, once it's done doing stuff.&lt;/p&gt;

&lt;h2&gt;Callback functions&lt;/h2&gt;

&lt;p&gt;Callback functions can take any number of arguments, but the &lt;em&gt;first&lt;/em&gt; argument is always an error or null.&lt;/p&gt;

&lt;h2&gt;Example&lt;/h2&gt;

&lt;p&gt;You've probably seen this example:&lt;/p&gt;

&lt;p&gt;&lt;flow-control-in-npm/read-file-example.js&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fs.readFile&lt;/code&gt; is an action function.  The function being passed to it, &lt;code&gt;function (er, data)...&lt;/code&gt; is a callback function.&lt;/p&gt;

&lt;h2&gt;Consistent Patterns are Consistent&lt;/h2&gt;

&lt;p&gt;Every function in npm, if it does something async, does it using this mechanism.&lt;/p&gt;

&lt;p&gt;Every callback function in npm, will expect an error argument as the first argument, so calling it like that will always bubble the error up.&lt;/p&gt;

&lt;h2&gt;Polymorphism Wins&lt;/h2&gt;

&lt;p&gt;Because of this consistent pattern, there is a lot of room for powerful creativity.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;asyncMap(list, fn, cb)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Let's say you have a list of filenames, and you have to remove each one.  A pretty typical use case in npm, but once you generalize &quot;do this to those&quot;, you start noticing nails in need of a hammer.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;asyncMap&lt;/code&gt; is the answer for that.  (The current async-map.js in npm is a bit more complicated, because it allows you to specify a list of functions rather than just one.)&lt;/p&gt;

&lt;p&gt;&lt;flow-control-in-npm/async-map.js&gt;&lt;/p&gt;

&lt;p&gt;Note that the top-level &lt;code&gt;cb_&lt;/code&gt; function is called with an array of all the results.  So, data is being proxied up, as well as errors.  (That's why it's called async&lt;strong&gt;Map&lt;/strong&gt;, rather than async&lt;strong&gt;ForEach&lt;/strong&gt;.)&lt;/p&gt;

&lt;p&gt;So, now we can simply do this:&lt;/p&gt;

&lt;p&gt;&lt;flow-control-in-npm/remove-file-list.js&gt;&lt;/p&gt;

&lt;h3&gt;Proxying&lt;/h3&gt;

&lt;p&gt;You catch that?  An Action function can pass its own cb over to another Action function if it doesn't need to do anything with success or failure.  We could also have done something like this:&lt;/p&gt;

&lt;p&gt;&lt;flow-control-in-npm/proxying.js&gt;&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;chain(fn1, fn2, ..., cb)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;There are other cases where you want to make sure that a list of functions are called in a specific order.  For instance, we need to make sure that all &lt;code&gt;preinstall&lt;/code&gt; scripts are done running before starting in on the &lt;code&gt;install&lt;/code&gt; scripts.  That's where &lt;code&gt;chain&lt;/code&gt; comes in handy.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chain&lt;/code&gt; takes a list of function arguments which take a callback, and a final argument which is the ultimate callback function.&lt;/p&gt;

&lt;p&gt;&lt;flow-control-in-npm/chain.js&gt;&lt;/p&gt;

&lt;h3&gt;chain 2&lt;/h3&gt;

&lt;p&gt;This is great, but it requires using Function#bind if we want to pass arguments to those functions other than a callback.  This API would be nice:&lt;/p&gt;

&lt;p&gt;&lt;flow-control-in-npm/chain2-usage.js&gt;&lt;/p&gt;

&lt;p&gt;Basically, each argument is one of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a function which will be called with a single cb argument&lt;/li&gt;
&lt;li&gt;an array containing a function and 0 or more arguments&lt;/li&gt;
&lt;li&gt;an array containing an object, a method name, and 0 or more arguments&lt;/li&gt;
&lt;li&gt;a falsey value, so we can do stuff like:
 foo &amp;amp;&amp;amp; [ doFoo, foo, bar ]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Revamped to handle this calling style, chain looks like this:&lt;/p&gt;

&lt;p&gt;&lt;flow-control-in-npm/chain2.js&gt;&lt;/p&gt;

&lt;h2&gt;Mix and Match&lt;/h2&gt;

&lt;p&gt;Because everything in npm (and a lot of things in node) use this pattern, you can mix very high-level operations with very low-level operations.  Why, even &lt;code&gt;chain&lt;/code&gt; and &lt;code&gt;asyncMap&lt;/code&gt; are &quot;action&quot; functions, so they can take any vanilla callback, or be arguments to one another.&lt;/p&gt;

&lt;p&gt;This is without any sophisticated &quot;async flow control&quot; library.  Just a few short JavaScript functions and an adherence to a few simple patterns.&lt;/p&gt;

&lt;p&gt;As long as you stick to these patterns, you can use any Action function in any asyncMap or chain call, and make sure that all Action functions call their cb exactly once.&lt;/p&gt;

&lt;p&gt;Get creative!  This language is powerful, and it's not that hard to do interesting things with it.&lt;/p&gt;</description><author>i@izs.me (Isaac Z. Schlueter)</author></item><item><title>Demystifying events in node.js</title><link>https://howtonode.org/demystifying-events-in-node</link><comments>https://howtonode.org/demystifying-events-in-node#disqus_thread</comments><pubDate>Sat, 07 Aug 2010 12:48:53 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/demystifying-events-in-node</guid><description>&lt;p&gt;Ok, here's an important thing to understand when you're working with node.js. There're lots of node objects that emit events, and you can easily find some examples on the documentation. But what's not really clear perhaps is how do you write your own events and listeners. You could get by for a while without this, but then you'll soon reach a wall. So how do you write them? The important friend you need to know first of all is the 'events' module in node.js.&lt;/p&gt;

&lt;h2&gt;The quick overview&lt;/h2&gt;

&lt;p&gt;To access this module, you simply add this to your js file:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;require('events')&lt;/p&gt;
  
  &lt;p&gt;requires('events').EventEmitter&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Specially, the docs will tell you the later is that all objects that emit events are basically instances of the latter. Let's create a simple dummy,&lt;/p&gt;

&lt;p&gt;&lt;demystifying-events-in-node/dummy.js&gt;&lt;/p&gt;

&lt;p&gt;The important part here is that we're extending our object with EventEmitter, and thus inheriting all the prototype objects,methods...etc from it.&lt;/p&gt;

&lt;p&gt;So now let's assume Dummy needs to have a method call cooking(), and once he puts the chicken to roast, he wants an event to be emitted, e.g. 'cooked', and fire a callback call 'eat'. (yum, roast chix! :P)&lt;/p&gt;

&lt;p&gt;&lt;demystifying-events-in-node/dummy-cooking.js&gt;&lt;/p&gt;

&lt;p&gt;So we're done with this module. Let's say we want to use it in our main script,&lt;/p&gt;

&lt;p&gt;&lt;demystifying-events-in-node/dummy-node.js&gt;&lt;/p&gt;

&lt;p&gt;So basically, node.js runs through the couple of lines and then waits for the event 'cooked' to be emitted, upon which it then fires off the callback while passing it the returned argument(s).&lt;/p&gt;

&lt;h2&gt;Where to go from here&lt;/h2&gt;

&lt;p&gt;It's worthy to note that &quot;sub-classing&quot; in the examples given here are a bit of an overkill, as well as using events.EventEmitter for things that only fire one event once. It's probably better to put the new methods on the instance if there's only going to be a few of them and for firing a low level of events, you might want to use asynchronous functions instead.&lt;/p&gt;

&lt;p&gt;Regarding events.EventEmitter, there's a special event that you want to note - 'error'. This is fired whenever an error is encountered, and is special in the sense that if no listeners are attached it, node will throw an exception and terminate the execution. (thanks to Tim for highlighting this.)&lt;/p&gt;

&lt;h2&gt;Before I go eat my chix...&lt;/h2&gt;

&lt;p&gt;The docs has some good runthrough, and I helped myself by searching through my favorite libraries and looking at how others implemented it, and also received some good answers that helped clear this up after posting to the mailing list. I suggest taking a read of Tim Caswell's articles for a better insight to all this node-ty stuff:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/control-flow-part-ii&quot;&gt;Control Flow in Node Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/what-is-this&quot;&gt;What is &quot;this&quot;?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the meanwhile, you can also view my crazy goofy sketch of a ircbot + logger + real-time websockets + search enabled bot mashup in node.js - &lt;a href=&quot;http://github.com/kennyshen/tocho&quot;&gt;tocho&lt;/a&gt;! I had a lot of fun making him, and while I haven't posted the search feature to the demo site, you can lurk through the #node.js irc channel with a web sockets enabled browser in real-time &lt;a href=&quot;http://northpole.sg/3Z&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope you found this article useful, and do comment below if you have any suggestions on adding to this (I'm sure I might have missed out something)&lt;/p&gt;</description><author>kenny@northpole.sg (Kenny Shen)</author></item><item><title>Shoutbox with Grasshopper and CouchDB</title><link>https://howtonode.org/grasshopper-shoutbox</link><comments>https://howtonode.org/grasshopper-shoutbox#disqus_thread</comments><pubDate>Thu, 05 Aug 2010 08:33:56 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/grasshopper-shoutbox</guid><description>&lt;p&gt;This article demonstrates how a simple shoutbox can be built with &lt;a href=&quot;http://github.com/tuxychandru/grasshopper&quot;&gt;Grasshopper&lt;/a&gt; using CouchDB for storing the shouts.  It is inspired by &lt;a href=&quot;http://net.tutsplus.com/tutorials/ruby/from-codeigniter-to-ruby-on-rails-a-conversion/&quot;&gt;this article&lt;/a&gt; on Nettuts+. I have included the design artifacts from Dan's post to retain the look and feel of the final result.&lt;/p&gt;

&lt;p&gt;If do not want to type in the code yourself, look at the &lt;a href=&quot;http://github.com/tuxychandru/grasshopper/tree/master/examples/shoutbox/&quot;&gt;complete source code&lt;/a&gt; for this article.  The completed application would look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;grasshopper-shoutbox/shoutbox.png&quot; style=&quot;float: none&quot;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;h2&gt;Setting Up&lt;/h2&gt;

&lt;p&gt;To follow this article &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt;, &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;, &lt;a href=&quot;http://npmjs.org/&quot;&gt;npm&lt;/a&gt; and &lt;a href=&quot;http://couchdb.apache.org/&quot;&gt;CouchDB&lt;/a&gt; have to be installed and configured on your system.&lt;/p&gt;

&lt;h3&gt;Grasshopper&lt;/h3&gt;

&lt;p&gt;Grasshopper is a feature-rich and flexible web application framework for node.js with support for most of the features web applications would need.  Install it with this command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo npm install grasshopper
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;CouchDB Module for node.js&lt;/h3&gt;

&lt;p&gt;Install the CouchDB module for node.js (&lt;a href=&quot;http://github.com/felixge/node-couchdb&quot;&gt;node-couchdb&lt;/a&gt;) using these commands.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo npm install couchdb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Creating the Application&lt;/h2&gt;

&lt;p&gt;Grasshopper does not impose any specific structure in which the files of you project should be organized.  For our shoutbox, we'd be using this directory structure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shoutbox/
|-- app
|   |-- controller.js
|   |-- model.js
|   `-- shoutRepository.js
|-- boot.js
|-- createdb.js
|-- images
|-- stylesheets
`-- views
    |-- index.html
    `-- layout.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this point all locations mentioned will be relative to the 'shoutbox' directory.  Create it with this command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p shoutbox/{app,images,stylesheets,views}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the CouchDB database for storing shouts by creating a file named &lt;code&gt;createdb.js&lt;/code&gt; with the following content and executing it with &lt;code&gt;node createdb.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;grasshopper-shoutbox/createdb.js&gt;&lt;/p&gt;

&lt;h2&gt;Model&lt;/h2&gt;

&lt;p&gt;Grasshopper provides various features like, validation and ability to update models from request parameters, to make the development of your application's model layer simple.&lt;/p&gt;

&lt;p&gt;Our shoutbox application has a single model named &lt;code&gt;Shout&lt;/code&gt; in &lt;code&gt;app/model.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;grasshopper-shoutbox/app/model.js&gt;&lt;/p&gt;

&lt;p&gt;We create a simple class named &lt;code&gt;Shout&lt;/code&gt; and initialize it using &lt;code&gt;gh.initModel()&lt;/code&gt;.  This method mixes validation and updation methods into the model class.  It takes the constructor of the model and the properties of the model as arguments. It creates a method for each property on the model which is used to read and write a field whose name is the property name prefixed with a '_'. For example, name() to read and write _name. The method reads the field if no argument is passed else writes the given value.&lt;/p&gt;

&lt;p&gt;We then add the necessary validations.  We have hard coded the error messages as we don't care about internationalization here.  The &lt;a href=&quot;http://wiki.github.com/tuxychandru/grasshopper/validation-api&quot;&gt;validation API&lt;/a&gt; of Grasshopper does a lot more.&lt;/p&gt;

&lt;p&gt;We also add a function to generate an MD5 hash of the email which will be needed to retrieve the Gravatar for shouts.&lt;/p&gt;

&lt;h2&gt;Repository&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/eaaCatalog/repository.html&quot;&gt;Repositories&lt;/a&gt; are used for data access.  Let's create a repository to store and retrieve shouts from our CouchDB database using &lt;a href=&quot;http://github.com/felixge/node-couchdb&quot;&gt;node-couchdb&lt;/a&gt; in &lt;code&gt;app/shoutRepository.js&lt;/code&gt;. The &lt;code&gt;save()&lt;/code&gt; function saves a shout as a CouchDB object, while the &lt;code&gt;all()&lt;/code&gt; function retrieves all documents in the database as an array of &lt;code&gt;Shout&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;&lt;grasshopper-shoutbox/app/shoutRepository.js&gt;&lt;/p&gt;

&lt;h2&gt;Controller&lt;/h2&gt;

&lt;p&gt;Controllers in Grasshopper are just functions which are invoked with a &lt;code&gt;RequestContext&lt;/code&gt; as the &lt;code&gt;this&lt;/code&gt; context.  Our Shoutbox has 2 controllers, one to display all the available shouts along with a form to add new shouts and another to save new shouts and redirect back to the previous list.&lt;/p&gt;

&lt;h3&gt;Controller to list shouts&lt;/h3&gt;

&lt;p&gt;This controller reads all the shouts from the repository, adds them to the model of the current &lt;code&gt;RequestContext&lt;/code&gt; (not to be confused with application models).  It then renders the &lt;code&gt;index&lt;/code&gt; view (note that the view name doesn't include an extention).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gh.get('/', function() {
    var self = this;
    shoutRepo.all(function(err, shouts) {
        self.model['shout'] = new Shout();
        self.model['shouts'] = shouts;
        self.render('index');
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;self.model['shout'] = new Shout();&lt;/code&gt; is needed as the index view includes a form which uses a &lt;code&gt;Shout&lt;/code&gt; model to add new a shout.&lt;/p&gt;

&lt;h3&gt;Controller to save a shout&lt;/h3&gt;

&lt;p&gt;This controller creates a new &lt;code&gt;Shout&lt;/code&gt; and updates its properties from the 'shout' object in request parameters.  It then checks if the new shout is valid and saves it to the database through the repository and redirects back to the previous controller.&lt;/p&gt;

&lt;p&gt;It also sets a flash message thanking the user for shouting.  Flash messages are not lost during redirection.  They are retained until the next non-redirect response.  This makes it useful for displaying notifications to the user after a &lt;a href=&quot;http://en.wikipedia.org/wiki/Post/Redirect/Get&quot;&gt;PRG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If the input is invalid, it adds the invalid shout to the model and renders the &lt;code&gt;index&lt;/code&gt; view again which displays the errors.  It also loads all the shouts as the page would display existing shouts along with the error messages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gh.post('/', function() {
    var self = this;
    var shout = new Shout().update(this.params['shout']);
    if(shout.isValid()) {
        shoutRepo.save(shout, function() {
            self.flash['success'] = 'Thanks for shouting!';
            self.redirect('/');
        });
    } else {
        shoutRepo.all(function(err, shouts) {
            self.model['shouts'] = shouts;
            self.model['shout'] = shout;
            self.render('index');
        });
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The complete &lt;code&gt;app/controller.js&lt;/code&gt; looks like this.&lt;/p&gt;

&lt;p&gt;&lt;grasshopper-shoutbox/app/controller.js&gt;&lt;/p&gt;

&lt;h2&gt;Layout&lt;/h2&gt;

&lt;p&gt;Grasshopper allows having an application wide layout into which the views of requests would be embedded.  You can specify the layout file of your application with this configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gh.configure({
    layout: 'views/layout'
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The layout file can use this piece of code to specify the location where the contents of the views have to be included.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;% include(view); %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The layout for our shoutbox would look like this.&lt;/p&gt;

&lt;p&gt;&lt;grasshopper-shoutbox/views/layout.html&gt;&lt;/p&gt;

&lt;h2&gt;View&lt;/h2&gt;

&lt;p&gt;Views in Grasshopper can embed javascript with &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; for code to be executed and &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt; for code whose value is to be included in the response.&lt;/p&gt;

&lt;p&gt;Our shoutbox has a single view as it does all the work on a single page.  At the top the page it displays all the errors in the shout if any.  It uses the &lt;code&gt;errors()&lt;/code&gt; view helper to retrieve all the error messages in the shout as an array.  It then checks whether there is a flash message available to be displayed and displays it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;% if(shout.errors) { %&amp;gt;
    &amp;lt;p class=&quot;error&quot;&amp;gt;
        &amp;lt;%h errors(shout).join('&amp;lt;/p&amp;gt;&amp;lt;p class=&quot;error&quot;&amp;gt;') %&amp;gt;
    &amp;lt;/p&amp;gt;
&amp;lt;% } %&amp;gt;
&amp;lt;% if(flash['success']) { %&amp;gt;
    &amp;lt;p class=&quot;success&quot;&amp;gt;&amp;lt;%= flash['success'] %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;% } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It then lists all the available shouts including the name and gravatar of the person who shouted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;% shouts.forEach(function(shout) { %&amp;gt;
        &amp;lt;li&amp;gt;
            &amp;lt;div class=&quot;meta&quot;&amp;gt;
                &amp;lt;img src=&quot;http://www.gravatar.com/avatar/&amp;lt;%= shout.mailHash() %&amp;gt;&quot; 
                     alt=&quot;Gravatar&quot; /&amp;gt;
                &amp;lt;p&amp;gt;&amp;lt;%= shout.name() %&amp;gt;&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;shout&quot;&amp;gt;
                &amp;lt;p&amp;gt;&amp;lt;%= shout.message() %&amp;gt;&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;% }); %&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A form for adding new shout is included.  Note how the &lt;code&gt;name&lt;/code&gt; attribute is given values prefixed with 'shout'.  This is not necessary in this simple example where we accept data for only one model.  This practice can come handy when accepting data for more than one model within the same form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&quot;/&quot; method=&quot;post&quot;&amp;gt;
    &amp;lt;h2&amp;gt;Shout!&amp;lt;/h2&amp;gt;

    &amp;lt;div class=&quot;fname&quot;&amp;gt;
        &amp;lt;label for=&quot;name&quot;&amp;gt;&amp;lt;p&amp;gt;Name:&amp;lt;/p&amp;gt;&amp;lt;/label&amp;gt;
        &amp;lt;input type=&quot;text&quot; name=&quot;shout.name&quot; value=&quot;&amp;lt;%= shout.name() %&amp;gt;&quot; size=&quot;20&quot; /&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&quot;femail&quot;&amp;gt;
        &amp;lt;label for=&quot;email&quot;&amp;gt;&amp;lt;p&amp;gt;Email:&amp;lt;/p&amp;gt;&amp;lt;/label&amp;gt;
        &amp;lt;input type=&quot;text&quot; name=&quot;shout.email&quot; value=&quot;&amp;lt;%= shout.email() %&amp;gt;&quot; size=&quot;20&quot; /&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;textarea name=&quot;shout.message&quot; rows=&quot;5&quot; cols=&quot;40&quot;&amp;gt;&amp;lt;%= shout.message() %&amp;gt;&amp;lt;/textarea&amp;gt;

    &amp;lt;p&amp;gt;&amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the complete code of the view.&lt;/p&gt;

&lt;p&gt;&lt;grasshopper-shoutbox/views/index.html&gt;&lt;/p&gt;

&lt;h2&gt;Making it all work&lt;/h2&gt;

&lt;p&gt;Download the &lt;a href=&quot;grasshopper-shoutbox/design.zip&quot;&gt;images and CSS&lt;/a&gt; and extract them into your &lt;code&gt;shoutbox&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Create a file named &lt;code&gt;boot.js&lt;/code&gt; and put the following content in it.&lt;/p&gt;

&lt;p&gt;&lt;grasshopper-shoutbox/boot.js&gt;&lt;/p&gt;

&lt;p&gt;We're configuring Grashopper to use &lt;code&gt;views/layout&lt;/code&gt; (extension not required) as layout file for the application and ask it to find all view templates within the &lt;code&gt;views&lt;/code&gt; directory.  Start the application with &lt;code&gt;node boot.js&lt;/code&gt; and point your browser to &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Happy Shouting!&lt;/h2&gt;

&lt;p&gt;There we have a nice looking shoutbox which takes care of validations and thanks users for shouting to theirs hearts content.  :)  Have a look at the Grasshopper &lt;a href=&quot;http://github.com/tuxychandru/grasshopper#readme&quot;&gt;README&lt;/a&gt; and &lt;a href=&quot;http://github.com/tuxychandru/grasshopper#readme&quot;&gt;Wiki&lt;/a&gt; for tutorials and examples of how various REST-ful web applications and services can be built on Grasshopper.&lt;/p&gt;</description><author>chandru.in@gmail.com (Chandra Sekar S)</author></item><item><title>Deploying Node Apps with Spark</title><link>https://howtonode.org/deploying-node-with-spark</link><comments>https://howtonode.org/deploying-node-with-spark#disqus_thread</comments><pubDate>Thu, 22 Jul 2010 15:44:44 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/deploying-node-with-spark</guid><description>&lt;p&gt;This article will go through building a simple RESTful key/value store using &lt;a href=&quot;http://senchalabs.github.com/connect/&quot;&gt;Connect&lt;/a&gt;.  Then I'll explain my favorite way to host apps on &lt;a href=&quot;http://www.ubuntu.com/server&quot;&gt;Ubuntu Server&lt;/a&gt;.  This will use &lt;a href=&quot;http://upstart.ubuntu.com/getting-started.html&quot;&gt;upstart&lt;/a&gt; and &lt;a href=&quot;http://github.com/senchalabs/spark&quot;&gt;Spark&lt;/a&gt;.  We'll setup the &lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt; environment using the super easy &lt;a href=&quot;http://github.com/creationix/ivy&quot;&gt;Ivy&lt;/a&gt; distribution.&lt;/p&gt;

&lt;h2&gt;Quick Node Install using the Ivy Distribution&lt;/h2&gt;

&lt;p&gt;Ivy is a my simple node distribution.  It contains pre-built node binaries and several node modules bundled with it.&lt;/p&gt;

&lt;h3&gt;On the Server&lt;/h3&gt;

&lt;p&gt;Assuming you have a fresh host with Ubuntu Server 32bit, we'll get a node environment up and running in a matter of minutes.  Just install git and run the Ivy installer in your home directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install git-core
wget -O- http://github.com/creationix/ivy/raw/master/utils/setup.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now for this to work correctly Ivy's &lt;code&gt;bin&lt;/code&gt; folder needs to be in your &lt;code&gt;$PATH&lt;/code&gt;.  Add a line to your &lt;code&gt;.profile&lt;/code&gt; file to make it automatic on login.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATH=$HOME/ivy/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then source your &lt;code&gt;.profile&lt;/code&gt; file to get the new settings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;. .profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test it by launching node and inspecting the &lt;code&gt;require.paths&lt;/code&gt;.  Make sure ivy's lib folder is in there.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tim@TimBook:~$ node
Type '.help' for options.
node&amp;gt; require.paths
[ '/Users/tim/.node_libraries'
, '/Users/tim/ivy/lib/node'
]
node&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;On your Development Machine&lt;/h3&gt;

&lt;p&gt;For developing I like to write apps on my laptop and then push them to my server using git.  The steps are the same here with the exception that OSX has &lt;code&gt;curl&lt;/code&gt; instead of &lt;code&gt;wget&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -# http://github.com/creationix/ivy/raw/master/utils/setup.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Writing an Application&lt;/h2&gt;

&lt;p&gt;Ok, now to get some real work done.  In this tutorial we'll make a simple RESTful key/value store.&lt;/p&gt;

&lt;p&gt;First create a basic app structure like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;memory_bank/
|-- app.js
|-- memory_bank.js
`-- public/
    `-- index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Stack it up with Connect&lt;/h3&gt;

&lt;p&gt;Connect makes it easy to build fully features HTTP servers complete with logging, gzipping, smart caching, and all the other goodies that Connect provides out of the box.&lt;/p&gt;

&lt;p&gt;&lt;deploying-node-with-spark/app.js&gt;&lt;/p&gt;

&lt;p&gt;That's it, one line!&lt;/p&gt;

&lt;h3&gt;RESTful Interface&lt;/h3&gt;

&lt;p&gt;Now lets build the &lt;code&gt;memory_bank.js&lt;/code&gt; file mentioned in the Connect setup.&lt;/p&gt;

&lt;p&gt;This app will provide the following RESTful interface.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /:key - Retrieve a value based on key.
PUT /:key - Update or insert a value based on key.
DELETE /:key - Remove a value by key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we'll write these three request handlers. Since we set the &lt;code&gt;Last-Modified&lt;/code&gt; header, we'll even get 304 response support through the Connect stack.&lt;/p&gt;

&lt;p&gt;&lt;deploying-node-with-spark/memory_bank.js#routes&gt;&lt;/p&gt;

&lt;p&gt;See the actual file for the definition of &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;sendItem&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Web Interface&lt;/h3&gt;

&lt;p&gt;Connect will serve the static files in the &lt;code&gt;public&lt;/code&gt; for you.  There is no need for Apache or Nginx.  Even if you use those for deployment, this makes development easy.&lt;/p&gt;

&lt;h2&gt;Launching the App with Spark&lt;/h2&gt;

&lt;p&gt;To test the server on your laptop, simply &lt;code&gt;cd&lt;/code&gt; into the directory with &lt;code&gt;app.js&lt;/code&gt; and type &lt;code&gt;spark&lt;/code&gt;.  Type &lt;code&gt;spark -h&lt;/code&gt; for options.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tim@TimBook:~/memory_bank$ spark
Spark server(42611) listening on http://*:3000 in development mode
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Deployment&lt;/h3&gt;

&lt;p&gt;To deploy this, copy it to your linux server.  My favorite way is to push the code to github, and then clone it on the server.  This way you have backup of the code and two-way synchronization.&lt;/p&gt;

&lt;h4&gt;Add a Connect Config File&lt;/h4&gt;

&lt;p&gt;I like to specify a config file instead of using command-line args in the &lt;code&gt;spark&lt;/code&gt; command. Create a &lt;code&gt;config.js&lt;/code&gt; file like this:&lt;/p&gt;

&lt;p&gt;&lt;deploying-node-with-spark/config.js&gt;&lt;/p&gt;

&lt;p&gt;You don't want this config file on your development environment.  The easiest way is to create a &lt;code&gt;.gitignore&lt;/code&gt; file and remove &lt;code&gt;config.js&lt;/code&gt; from version control.&lt;/p&gt;

&lt;h4&gt;Add an Upstart Config File&lt;/h4&gt;

&lt;p&gt;Then go to &lt;code&gt;/etc/init&lt;/code&gt; and create an upstart config file.  In this file you want to set up the environment for spark to run and tell it to start your server using spark.&lt;/p&gt;

&lt;p&gt;&lt;deploying-node-with-spark/memory_bank.conf&gt;&lt;/p&gt;

&lt;p&gt;Save this file at &lt;code&gt;/etc/init/memory_bank.conf&lt;/code&gt; and set it as executable.  Now you can start your node server using upstart commands.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo start memory_bank
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all went well you should see a message stating it started successfully and give you the pid.  Now hit your server on the port you specified and see your app.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt; - If you didn't design a front-end in &lt;code&gt;/public&lt;/code&gt; you'll just see the blank index.html page.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Ivy, Spark, and Connect are a powerful combination that has worked great for me.  They are also useful on their own.&lt;/p&gt;

&lt;p&gt;If you want to use Spark for a raw tcp server, go ahead, Spark works for &lt;em&gt;any&lt;/em&gt; &lt;code&gt;net.Server&lt;/code&gt; or &lt;code&gt;http.Server&lt;/code&gt; instance as long as it's exported as &lt;code&gt;app.js&lt;/code&gt;.  Connect even allows for embedding an &lt;code&gt;http.Server&lt;/code&gt; instance as a last middleware layer.&lt;/p&gt;

&lt;p&gt;I've set up a few sites this way on more than one server and I find it very useful.  I hope this article fits your use case as well, or at least gets you in the right direction.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Why use &quot;closure&quot;?</title><link>https://howtonode.org/why-use-closure</link><comments>https://howtonode.org/why-use-closure#disqus_thread</comments><pubDate>Wed, 30 Jun 2010 14:15:53 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/why-use-closure</guid><description>&lt;p&gt;One of the greatest features of the JavaScript language is &lt;a href=&quot;http://en.wikipedia.org/wiki/Closure_&quot; title=&quot;computer_science&quot;&gt;closure&lt;/a&gt;.  I've discussed this concept some in the &quot;&lt;a href=&quot;/what-is-this&quot;&gt;What is This?&lt;/a&gt;&quot; article.  There I was explaining scope and context.  Today I wish to explain about some practical uses of a closure in event based programming as well as compare it to other methods like object orientation to preserve state across event calls.&lt;/p&gt;

&lt;h2&gt;What is a closure&lt;/h2&gt;

&lt;p&gt;Again from wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In computer science, a closure is a first-class function with free variables that are bound in the lexical environment. Such a function is said to be &quot;closed over&quot; its free variables. A closure is defined within the scope of its free variables, and the extent of those variables is at least as long as the lifetime of the closure itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or the way I understand it intuitively:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A closure is a function defined within another scope that has access to all the variables within the outer scope.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Using closure to hide state&lt;/h2&gt;

&lt;p&gt;Imagine this piece of code:&lt;/p&gt;

&lt;p&gt;&lt;why-use-closure/greet_plain.js*&gt;&lt;/p&gt;

&lt;p&gt;We're manually passing the internal state around so that the other functions can get ahold of it. I mean, it works and is really simple, but assuming you never need the generated message string outside of the &lt;code&gt;greet&lt;/code&gt; function, what's the point of making the user of the API handle internal data for you.  Also what if later on the &lt;code&gt;greet&lt;/code&gt; function needed some other data, you would have to change everything to pass along more variables.&lt;/p&gt;

&lt;p&gt;Clearly there must be a better way.&lt;/p&gt;

&lt;p&gt;My favorite use of closure is to  call a function that generates another function or group of functions but hides all the state in private variables within the closure:&lt;/p&gt;

&lt;p&gt;&lt;why-use-closure/greeter.js*&gt;&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;greet&lt;/code&gt; function is nested within the &lt;code&gt;greeter&lt;/code&gt; function.  This means it's within the lexical scope of &lt;code&gt;greeter&lt;/code&gt; and thus according to the rules of closure has access to the local variables of &lt;code&gt;greeter&lt;/code&gt; including &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;age&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Using a closure instead of objects&lt;/h2&gt;

&lt;p&gt;Many people who come to JavaScript are experienced programmers who come from other languages where classes and instances are the common way to handle this encapsulation.  JavaScript has something similar in the form of constructor functions and function prototypes.&lt;/p&gt;

&lt;h3&gt;Classical OO in JavaScript&lt;/h3&gt;

&lt;p&gt;Consider the following class, it uses a classical constructor with function prototypes to work like a class from other languages.&lt;/p&gt;

&lt;p&gt;Since you're using the object itself as the place to store state, all references have to be prefixed with &lt;code&gt;this&lt;/code&gt;.  It's impossible to hide any variables since everything that accessible to your methods is also publicly readable, writable, and even deletable.  Also if you have a function nested inside of anything then &lt;code&gt;this&lt;/code&gt; will change on you unless it's explicitly passed through or preserved with a closure. (see the &lt;code&gt;slowGreet&lt;/code&gt; method)&lt;/p&gt;

&lt;p&gt;Define the class like this:&lt;/p&gt;

&lt;p&gt;&lt;why-use-closure/personclass.js&gt;&lt;/p&gt;

&lt;p&gt;And use it like this: &lt;/p&gt;

&lt;p&gt;&lt;why-use-closure/useclass.js&gt;&lt;/p&gt;

&lt;p&gt;Nice clean OO code right?  The good thing is that you get to write your methods outside of the constructor instead of nested inside it.  This is a very comfortable pattern and is used by a lot of successful JavaScript projects.&lt;/p&gt;

&lt;h3&gt;Object factories using closures&lt;/h3&gt;

&lt;p&gt;This is how I would write this class without using &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;prototype&lt;/code&gt;.  I'll create a factory function that creates a closure and exposes parts of it as public methods.  Externally it looks a lot like the class based version, but internally it's 100% a closure and there isn't a &lt;code&gt;this&lt;/code&gt; or &lt;code&gt;new&lt;/code&gt; in sight.&lt;/p&gt;

&lt;p&gt;Define the factory like this:&lt;/p&gt;

&lt;p&gt;&lt;why-use-closure/personfactory.js&gt;&lt;/p&gt;

&lt;p&gt;And use it like this:&lt;/p&gt;

&lt;p&gt;&lt;why-use-closure/usefactory.js&gt;&lt;/p&gt;

&lt;p&gt;I like it!  One word of caution though.  While this method is quite easy to use, it doesn't perform well when you're creating large numbers of instances.  Each instance will create its own version of every function in the object.&lt;/p&gt;

&lt;h2&gt;Closures for events and callbacks&lt;/h2&gt;

&lt;p&gt;This is where closures are the most useful.  In fact, this is the reason that Ryan Dahl (The creator of node.js) used JavaScript in the first place.  C doesn't have closures and it makes non-blocking code difficult to write in C.&lt;/p&gt;

&lt;p&gt;The simplest example (which we just saw earlier) is &lt;code&gt;setTimeout&lt;/code&gt;.  This is a non-blocking function call.  The code in the passed in callback won't get called till after the timeout happens.  This will be on a completely new stack and the only way to get data into it is through lexical scope and a closure.&lt;/p&gt;

&lt;p&gt;Imagine this code snippet:&lt;/p&gt;

&lt;p&gt;&lt;why-use-closure/settimeout.js&gt;&lt;/p&gt;

&lt;p&gt;This won't work, &lt;code&gt;message&lt;/code&gt; will be undefined since it's a local variable to &lt;code&gt;setAlarm&lt;/code&gt; and doesn't exist outside that function.  Instead we need to define the &lt;code&gt;handle&lt;/code&gt; function inside of the &lt;code&gt;setAlarm&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;why-use-closure/settimeout2.js&gt;&lt;/p&gt;

&lt;p&gt;As explained in the &quot;&lt;a href=&quot;/what-is-this&quot;&gt;What is This?&lt;/a&gt;&quot; article, &lt;code&gt;this&lt;/code&gt; is especially painful when dealing with setting callbacks.  This is because specifying a method of an object as the callback function will cause the function by itself to be the callback, not the object associated with it.&lt;/p&gt;

&lt;p&gt;&lt;why-use-closure/eventobj.js&gt;&lt;/p&gt;

&lt;p&gt;Interesting thing about JavaScript is that functions are first-class values.  The whole &lt;code&gt;this&lt;/code&gt; context helps in designing classical OO API's, but you have to remember that it's only assigned on function call, it's not something tied to the function itself.  Variables from the closure, however are part of the function itself, no matter how it's called.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Just Connect it Already</title><link>https://howtonode.org/connect-it</link><comments>https://howtonode.org/connect-it#disqus_thread</comments><pubDate>Mon, 07 Jun 2010 14:22:52 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/connect-it</guid><description>&lt;p&gt;Now that the core APIs of node are really starting to stabilize, I'm moving my attention to helping stabilize the framework scene.  One of the things I found really neat from Ruby was the &lt;a href=&quot;http://rack.rubyforge.org/&quot;&gt;Rack&lt;/a&gt; server interface.  It allowed any server that followed the spec to host any app that followed the spec.  Also (and this is the important part for node) is allowed for generic middleware libraries to do common tasks and functions in a very aspect oriented manner.&lt;/p&gt;

&lt;p&gt;My employer, &lt;a href=&quot;http://sencha.com/&quot;&gt;Sencha&lt;/a&gt;, has sponsored &lt;a href=&quot;http://github.com/visionmedia&quot;&gt;TJ Holowaychuk&lt;/a&gt; and I to write a middleware system for node called &lt;a href=&quot;http://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt; in an effort to foster common development in the node community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; This article has been updated to use the new connect middleware API.&lt;/p&gt;

&lt;h2&gt;So What's New?&lt;/h2&gt;

&lt;p&gt;Actually there isn't a lot new here.  But then again, there was nothing new about node either.  Node uses non-blocking IO for fast scalable servers.  That's been known about for years among the C community.  It uses event based, single thread javascript for logic.  That's exactly what the browser has. Add these together and we all see the huge splash it's made.  It's the unique combination of some simple but complimentary ideas that really make these projects zing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt; tries to abstract and repackage node as little as possible.  As a result, the API is fairly node specific, but there aren't a lot of leaky abstractions dripping all over the place.  It's fairly solid considering the short time it's been in development so far.  &lt;a href=&quot;http://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt; adds one new unique aspect to node's HTTP server and that's the idea of layers.&lt;/p&gt;

&lt;h2&gt;The Integration Problem&lt;/h2&gt;

&lt;p&gt;In a normal node HTTP server you usually see code like this.&lt;/p&gt;

&lt;p&gt;&lt;connect-it/node-http.js&gt;&lt;/p&gt;

&lt;p&gt;And all requests will be served:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: text/plain
Connection: close
Transfer-Encoding: Identity

Hello Connect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works great for when you want fast synthetic benchmarks or always want to return the same response for every HTTP request.  In most apps, however, this isn't the case.  You want some form of request routing.  Also you'll want nice enhancements like response body gzipping, smart caching, request logging, pretty error handlers, etc...&lt;/p&gt;

&lt;p&gt;Implementing all these things over and over for each project is a royal pain since they are somewhat non-trivial and usually a project in and of themselves.  So ideally the node community has a collection of modules that we can use in common to solve these common tasks.  The only problem is that there is no accepted spec to follow.  All these libraries have their own style and way to integrate.  This is great for innovation, terrible for someone trying to just get work done and quickly.&lt;/p&gt;

&lt;h2&gt;Layers to the Rescue&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/connect-it/onion.jpg&quot; style=&quot;float:right;margin: 0 0 10px 10px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So taking the ideas from &lt;a href=&quot;http://rack.rubyforge.org/&quot;&gt;Rack&lt;/a&gt; and &lt;a href=&quot;http://github.com/isaacs/ejsgi&quot;&gt;ejsgi&lt;/a&gt;, we introduce the idea of layers to the code handling the HTTP request and response.  An app is structured like an onion.  Every request enters the onion at the outside and traverses layer by layer till it hits something that handles it and generates a response.  In &lt;a href=&quot;http://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt; terms, these are called filters and providers.  Once a layer provides a response, the path happens in reverse.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt; framework simply takes the initial &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt; objects that come from node's http callback and pass them layer by layer to the configured middleware modules in an application.&lt;/p&gt;

&lt;p&gt;The example from above, converted to a &lt;a href=&quot;http://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt; app looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;connect-it/connect-http.js&gt;&lt;/p&gt;

&lt;p&gt;And request will output this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: text/plain
Content-Length: 13
Connection: close

Hello Connect
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Walkthrough Writing Layers and an Application&lt;/h2&gt;

&lt;p&gt;Let's go through a simple app from the top down.  It will serve JavaScript files from a folder, cache the result in ram, and log the request and responses.  We'll implement our middleware layers from scratch to understand how they work.  There are better versions of these built-in.&lt;/p&gt;

&lt;p&gt;&lt;connect-it/app.js&gt;&lt;/p&gt;

&lt;p&gt;An app is just a call to &lt;code&gt;Connect.createServer&lt;/code&gt; with several handlers in a row.&lt;/p&gt;

&lt;p&gt;All Connect layers are simply node modules that export a &lt;code&gt;setup&lt;/code&gt; function that returns a &lt;code&gt;handle&lt;/code&gt; function.  The setup function is called at server startup and you can pass in configuration parameters to it.  Then on each request, you have the option at this point to either: A) Serve a response using the &lt;code&gt;res&lt;/code&gt; parameter. or B) Pass on control to the next layer in the chain using the &lt;code&gt;next&lt;/code&gt; parameter.  Since you have raw access to the node request and response objects and the full JavaScript language, the possibilities are endless.&lt;/p&gt;

&lt;h3&gt;Serve Some Files&lt;/h3&gt;

&lt;p&gt;Most apps will want to serve some static resources, so let's write a middleware that serves javascript files based on the request url.&lt;/p&gt;

&lt;p&gt;&lt;connect-it/serve-js.js&gt;&lt;/p&gt;

&lt;p&gt;Here we are using the built-in node library &lt;code&gt;'fs'&lt;/code&gt; to read the requested file from the hard-drive.  Then we're using the Connect provided helper &lt;code&gt;simpleBody&lt;/code&gt; on the http response object.  Nothing fancy or complicated here.&lt;/p&gt;

&lt;h3&gt;Log It&lt;/h3&gt;

&lt;p&gt;Whenever there is a problem with a server, it's really great to have a log-file somewhere to trace what went wrong.  This log module will output a line when a request comes in through the layer, and then another on the way back out.&lt;/p&gt;

&lt;p&gt;&lt;connect-it/log-it.js&gt;&lt;/p&gt;

&lt;p&gt;The setup function is a great place to setup variables used by the middleware across requests.  In this case we're initializing the counter for the logger.&lt;/p&gt;

&lt;p&gt;In the handler we are using a wrapping idiom to hook into the call to &lt;code&gt;writeHead&lt;/code&gt;.  In JavaScript functions are values just like anything else.  So a great way to wrap functions is to store a reference to the original implementation in a closure variable.  Replace the function with a new one, and in the first line of the new function, put the old function definition back.  Then on the last line of the replacement function call the original.  This is a simple and efficient way to hook into existing object methods since they just look for properties by name and not references to actual function objects.&lt;/p&gt;

&lt;p&gt;The standalone &lt;code&gt;console.log&lt;/code&gt; call will be called at the beginning of each request cycle, and the nested &lt;code&gt;console.log&lt;/code&gt; will be called on the way out by means of the nested &lt;code&gt;writeHead&lt;/code&gt; function.&lt;/p&gt;

&lt;h2&gt;Built-in Middleware&lt;/h2&gt;

&lt;p&gt;Connect comes with several built-in middleware layers for easy use.  A much more robust version of this example could be written using the built-in modules.&lt;/p&gt;

&lt;p&gt;&lt;connect-it/app2.js&gt;&lt;/p&gt;

&lt;p&gt;This has proper error-handling, proper HTTP headers, and all sorts of other bells and whistles that are required from a production web server.&lt;/p&gt;

&lt;h2&gt;Future and Goals of Connect&lt;/h2&gt;

&lt;p&gt;Connect is currently in alpha state. We're looking for community feedback and hope to stabilize into a beta in the next week or so.  &lt;/p&gt;

&lt;p&gt;Also what's really needed is for some real frameworks and apps to be written using Connect as a base.  TJ is using it internally for a project at work and I plan to convert &lt;a href=&quot;http://github.com/creationix/wheat&quot;&gt;wheat&lt;/a&gt; (The engine to this blog) to use it.&lt;/p&gt;

&lt;p&gt;The true goal of Connect is to help the node community work better together.   Connect is the combined effort of some JavaScripters from the node community who want a base system to build world-class web frameworks from.&lt;/p&gt;

&lt;p&gt;There has been a lot of discussion on the topic of middleware and now is the time to write some code, use it, and do it.  The popularity of JavaScript itself is proof that what really succeeds is real-world implementations, not substance-less discussions on the very best way to do something. Like node, our goal is to make something simple, but correct, and let others build from there.&lt;/p&gt;

&lt;h3&gt;What you Should Do&lt;/h3&gt;

&lt;p&gt;Connect is cool, I gave two presentations on it in the past week at &lt;a href=&quot;http://www.slideshare.net/creationix/real-time-web-with-node&quot;&gt;txjs&lt;/a&gt; and &lt;a href=&quot;http://www.slideshare.net/creationix/node-powered-mobile&quot;&gt;swdc&lt;/a&gt; and people loved it. TJ and I have done all we can for now and need some community feedback in order to move on.  If you are interested in node and want to help shape the future of web frameworks please do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install node if you haven't already. (I suggest using &lt;a href=&quot;http://github.com/creationix/ivy&quot;&gt;ivy&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Clone Connect.&lt;/li&gt;
&lt;li&gt;Go through the examples in the code-base. (The &lt;code&gt;app.js&lt;/code&gt; file is launched with the &lt;code&gt;connect&lt;/code&gt; executable)&lt;/li&gt;
&lt;li&gt;Write your own code using Connect. (Or port your favorite node framework)&lt;/li&gt;
&lt;li&gt;Send feedback through &lt;a href=&quot;http://github.com/senchalabs/connect/issues&quot;&gt;github&lt;/a&gt; and the normal node community channels. (irc and mailing list)&lt;/li&gt;
&lt;li&gt;Tweet about it to spread the word. (This only works if everyone uses it)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Deploying Connect Apps&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&quot;/deploying-node-with-spark&quot;&gt;deploying-node-with-spark&lt;/a&gt; article for tips on how to set up a production server using &lt;a href=&quot;http://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt; and &lt;a href=&quot;http://github.com/senchalabs/spark&quot;&gt;Spark&lt;/a&gt;.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Creating Custom Modules</title><link>https://howtonode.org/creating-custom-modules</link><comments>https://howtonode.org/creating-custom-modules#disqus_thread</comments><pubDate>Tue, 18 May 2010 13:37:07 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/creating-custom-modules</guid><description>&lt;p&gt;Node implements &lt;a href=&quot;http://commonjs.org/specs/modules/1.0/&quot;&gt;CommonJS Modules 1.0&lt;/a&gt;. Node's &lt;a href=&quot;http://nodejs.org/api.html#modules-285&quot;&gt;full API doc.&lt;/a&gt; explains their use thoroughly, but can be a bit tricky to get started.&lt;/p&gt;

&lt;p&gt;This tutorial explains the why and how you can use Node's module system to help structure your application.&lt;/p&gt;

&lt;h2&gt;Creating a Module&lt;/h2&gt;

&lt;p&gt;A module is just a javascript file.  Put some JS in a file and BAM! you have a module.  Good show!&lt;/p&gt;

&lt;p&gt;&lt;creating-custom-modules/simplest-module-ever.js&gt;&lt;/p&gt;

&lt;h2&gt;Um, so why is there a tutorial?&lt;/h2&gt;

&lt;p&gt;Unfortunately, you won't be able to do anything with it just yet.&lt;/p&gt;

&lt;p&gt;&lt;creating-custom-modules/simplest-module-ever-test.js&gt;&lt;/p&gt;

&lt;p&gt;There's a good reason, and it has to do with playing well with others.  One of the biggest problems in JavaScript is name collisions.  Here's an example: You get one script that makes a cool date picker and another that does a day-by-day schedule and they both define a drawCalendar() function and now it all breaks and how the heck are you going to fix it?  This happens because both names are declared in what's called the global name space.&lt;/p&gt;

&lt;p&gt;You know how I said that a module is just a javascript file? Well, that's true, but it is evaluated in a special way.  When Node loads your javascript file it creates a new scope, so your date picker plugin can't mess with my schedule plugin.  When you are in your module, you can't see the outside world; you can just do your own thing or require other modules.  As a result, you don't have to worry about clashing with other people's stuff.&lt;/p&gt;

&lt;h2&gt;If you can't add to the global name space, then how do you share your code?&lt;/h2&gt;

&lt;p&gt;Inside your javascript file, there is a special object. When Node creates the new context for your module, it sprinkles some objects in there like a little salt and pepper.  The &lt;a href=&quot;https://nodejs.org/api/globals.html&quot;&gt;official Global Objects API&lt;/a&gt; hints at the answer, but seeing is much simpler.&lt;/p&gt;

&lt;p&gt;&lt;creating-custom-modules/simplest-module-ever-complete.js&gt;&lt;/p&gt;

&lt;p&gt;And now this will work the way we want.&lt;/p&gt;

&lt;p&gt;&lt;creating-custom-modules/simplest-module-ever-complete-test.js&gt;&lt;/p&gt;

&lt;h2&gt;Using Parts of Modules&lt;/h2&gt;

&lt;p&gt;The basic example on the &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.JS Home Page&lt;/a&gt; shows you how to import whole modules.&lt;/p&gt;

&lt;p&gt;When you want to use a port of a Module you use the require function like usual, but only save a reference to a member of the returned exports object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var inspect = require('sys').inspect;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a local variable, 'inspect' and assigns it to the 'inspect' property of the sys module.&lt;/p&gt;

&lt;p&gt;So now you can&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;inspect({Hello:&quot;World&quot;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is like &lt;code&gt;sys.inspect({Hello:&quot;World&quot;})&lt;/code&gt; without having to type &lt;code&gt;sys.inspect&lt;/code&gt; all the time.&lt;/p&gt;

&lt;p&gt;Normal JavaScript function binding rules apply, so if you have any weirdness that you can't figure out, just import the whole module and use it like usual until you &lt;a href=&quot;http://www.reactive.io/tips/2009/04/28/binding-scope-in-javascript/&quot;&gt;Learn more about JavaScript Binding&lt;/a&gt;&lt;/p&gt;</description><author>aaron.blohowiak@gmail.com (Aaron Blohowiak)</author></item><item><title>Volcano Wheat</title><link>https://howtonode.org/volcano-wheat</link><comments>https://howtonode.org/volcano-wheat#disqus_thread</comments><pubDate>Fri, 16 Apr 2010 13:37:07 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/volcano-wheat</guid><description>&lt;p&gt;Announcing the release of a new engine for howtonode.org, &lt;a href=&quot;http://github.com/creationix/wheat&quot;&gt;Wheat&lt;/a&gt;!  Also in honor of those stuck in Europe trying to get to &lt;a href=&quot;http://jsconf.us/2010/&quot;&gt;jsconf&lt;/a&gt;, the background is a photo of the icelandic volcano.&lt;/p&gt;

&lt;h2&gt;Volcano&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;volcano-wheat/volcano.jpg&quot; alt=&quot;volcano&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;German air traffic control says Munich airport is being closed - completing a shutdown of the country's international airports due to drifting ash from an Icelandic volcano.&lt;/p&gt;

&lt;p&gt;Munich's planned closure at 8 p.m. Friday came hours after that of the other 15 international airports, including Frankfurt. Flights were halted in northern cities including Berlin and Hamburg Thursday night. (AP)&lt;/p&gt;

&lt;p&gt;This means that several people who were attending JSConf had their flights canceled.&lt;/p&gt;

&lt;h2&gt;Wheat&lt;/h2&gt;

&lt;p&gt;As you may have noticed, the site looks completely different.  It works completely different under the hood as well.  Instead of pre-generating static html using &lt;a href=&quot;http://github.com/creationix/node-blog&quot;&gt;node-blog&lt;/a&gt;, it runs on a node-powered web server using &lt;a href=&quot;http://github.com/creationix/wheat&quot;&gt;wheat&lt;/a&gt;.  The actual files don't exist anywhere in the file-system.  Wheat instead implements a mini virtual filesystem that can read local bare git repositories and serve files from them git the &quot;&lt;code&gt;git show&lt;/code&gt;&quot; command.&lt;/p&gt;

&lt;p&gt;Thanks to some tips from the &lt;a href=&quot;http://github.com/&quot;&gt;github&lt;/a&gt; guys I was able to implement a caching system that is very efficient and responsive.  In synthetic benchmarks, most pages render at a rate around 2000 requests/second using a pure node server.&lt;/p&gt;

&lt;p&gt;When authoring an article, you can run wheat locally on your machine, and it will overlay the local files in your working tree on top of the files in the git repo.  So testing an article is as simple as saving the markdown file and hitting refresh in the browser.&lt;/p&gt;

&lt;p&gt;Once an article is ready, you only have to push to your git repo on your server and the head cache will pick up the changes within 100ms.  In my setup I have a git post-update hook that re-pushes the changes to GitHub so that the contents are more accessible to the community.&lt;/p&gt;

&lt;p&gt;&lt;volcano-wheat/test.js*&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it supports pulling in external code snippets and running them in a node sandbox.  This will help keep syntax errors and code samples that are just plain wrong at bay.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;volcano-wheat/graph.dot&quot; alt=&quot;graph&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also graphviz graphs are now rendered on the fly.  Like this graph that explains the possible ways to end up or not end up at JSConf 2010.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>The Step of the Conductor</title><link>https://howtonode.org/step-of-conductor</link><comments>https://howtonode.org/step-of-conductor#disqus_thread</comments><pubDate>Mon, 12 Apr 2010 13:27:27 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/step-of-conductor</guid><description>&lt;p&gt;There have been several async management libraries proposed and written.  I'm guilty of at least three of them.  The reason for this proliferation of code is that they're all trying to solve a very real problem with writing non-trivial applications that make heavy use of async callbacks.&lt;/p&gt;

&lt;h2&gt;Parallel and Serial&lt;/h2&gt;

&lt;p&gt;Most of the libraries to date help solve two main common patterns of function use.  They are parallel execution and serial execution.  In parallel execution you fire off several asynchronous functions and want a common callback to be called then they all finish.  The serial pattern is when you have a chain of steps that can't execute till the previous one is done.  Combining these two patterns gives some pretty flexible uses of async functions without excessive boilerplate or nesting.&lt;/p&gt;

&lt;h3&gt;Step&lt;/h3&gt;

&lt;p&gt;A very small library that I've been using for these simple cases is based on the idea from Will Conant's &lt;a href=&quot;http://github.com/willconant/flow-js&quot;&gt;flow-js&lt;/a&gt;.  I simplified the idea down to it's core and made some little assumptions to make it easier to use with node's error handling pattern.  I call it &lt;a href=&quot;http://github.com/creationix/experiments/blob/master/step.js&quot;&gt;step&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Here is a snippet of using &lt;code&gt;Step&lt;/code&gt; in the &lt;a href=&quot;http://github.com/creationix/wheat&quot;&gt;wheat&lt;/a&gt; blogging engine I'm working on:&lt;/p&gt;

&lt;p&gt;&lt;step-of-conductor/step1.js&gt;&lt;/p&gt;

&lt;p&gt;In this example, I pass three steps as functions to the &lt;code&gt;Step&lt;/code&gt; helper.  The first two end in a call to an asynchronous function.  I pass the value &lt;code&gt;this&lt;/code&gt; as the callback.  This hooks's into &lt;code&gt;Step&lt;/code&gt;'s system so that it know to call the next step when the first is done.  The parameters given to the callback are passed through to the next step.  Notice that I created a closure variable &lt;code&gt;props&lt;/code&gt;.  This is so that the third step has access to the props defined in the second step, but not passed through by the &lt;code&gt;loadAuthor&lt;/code&gt; call.  The third step then does some final processing and calls the main callback to the outer function.&lt;/p&gt;

&lt;p&gt;In essence &lt;code&gt;loadArticle&lt;/code&gt; is a composite asynchronous function that had two other asynchronous function calls mixed with other synchronous logic within it.  &lt;/p&gt;

&lt;p&gt;How about an example that makes use of the parallel feature of &lt;code&gt;Step&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;step-of-conductor/step2.js&gt;&lt;/p&gt;

&lt;p&gt;This example is similar, but with the new addition of the &lt;code&gt;this.parallel&lt;/code&gt; function.  This parallel function generates a new callback when called and sets an internal counter in the &lt;code&gt;Step&lt;/code&gt; system.  Though it's hard to see with this example, the arguments to parseFileContents are first a single &lt;code&gt;err&lt;/code&gt; and then the second argument to each of the &lt;code&gt;loadAuthor&lt;/code&gt; callbacks.&lt;/p&gt;

&lt;p&gt;Perhaps this example will be more clear:&lt;/p&gt;

&lt;p&gt;&lt;step-of-conductor/step3.js&gt;&lt;/p&gt;

&lt;p&gt;This is the route handler for the front page of the blog.  It needs data from two different async calls and can't render the main template till they're loaded.  Then after the main template is rendered, the layout can be rendered.  Both &lt;code&gt;Git.getTags&lt;/code&gt; and &lt;code&gt;loadAuthors&lt;/code&gt; output two arguments, but their errors arguments are compressed into a single &lt;code&gt;err&lt;/code&gt;.  If both emitted errors that the latter would overwrite the first.&lt;/p&gt;

&lt;h2&gt;More Advanced Patterns&lt;/h2&gt;

&lt;p&gt;You'll notice in these patterns that there is a fair bit of hacks to fit the cases where the logic isn't exactly parallel or serial.  The closure variables are a kind of limited scope global.  The repeated error handling code is redundant.  Wouldn't it be nice if we could specify which output went to what input and chain arbitrary flows?&lt;/p&gt;

&lt;h2&gt;Conductor is born!&lt;/h2&gt;

&lt;p&gt;The other night, while talking with &lt;a href=&quot;http://github.com/tmpvar&quot;&gt;tmpvar&lt;/a&gt;(Elijah Insua), we decided it would be great to make a system that could calculate arbitrary control flows when given a set of dependencies.  A few productive hours later &lt;a href=&quot;http://github.com/creationix/conductor&quot;&gt;conductor&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;Instead of shoe-horning a problem into a preset pattern to make it easier on the computer, why don't we just explain the problem to the computer and let it figure out how to handle it for us?&lt;/p&gt;

&lt;h3&gt;Loading an Article&lt;/h3&gt;

&lt;p&gt;The example from above that uses &lt;code&gt;Step&lt;/code&gt; could be rewritten to use &lt;code&gt;Conduct&lt;/code&gt; (the function exported by the &lt;a href=&quot;http://github.com/creationix/conductor&quot;&gt;conductor&lt;/a&gt; library):&lt;/p&gt;

&lt;p&gt;&lt;step-of-conductor/conductor1.js&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;step-of-conductor/example1.dot&quot; style=&quot;float:right;margin:0 0 10px 10px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first glance this looks like a classic case of over-engineering.  For this simple case you'd be right, but we're keeping it simple for purposes of explanation.&lt;/p&gt;

&lt;p&gt;There is much to explain about the &lt;a href=&quot;http://github.com/creationix/conductor&quot;&gt;conductor&lt;/a&gt; library, so in an effort to get this article out this year, I'll end here.  It's fully functionally, but need some serious documentation.  Look for more in a future article.&lt;/p&gt;

&lt;p&gt;The true power of conductor will be realized when &lt;a href=&quot;http://github.com/tmpvar&quot;&gt;tmpvar&lt;/a&gt; finishes his visual interface to it.  For now, read the commented code and have fun.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So which is better and why do I have three async libraries of my own.  Well I think that's just a testament to the fact that there is no one library that fits all use cases perfectly. Also I've started to dive into the world of node Streams and this opens a whole new can of works.  Expect future articles about node streams now that node v0.1.90 is out!&lt;/p&gt;

&lt;p&gt;I tend to use Step mostly in my projects because it fits well with my style.  For some fun working examples of Step check out the source to my new blogging engine &lt;a href=&quot;http://github.com/creationix/wheat&quot;&gt;Wheat&lt;/a&gt;.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Hello Node!</title><link>https://howtonode.org/hello-node</link><comments>https://howtonode.org/hello-node#disqus_thread</comments><pubDate>Mon, 22 Mar 2010 10:55:41 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/hello-node</guid><description>&lt;p&gt;In programming literature it has become the standard to create a hello world program as the first example.  This article will go through a few simple hello world type examples with everything from simple terminal output to an http server that uses an external framework for some semantic sugar.&lt;/p&gt;

&lt;p&gt;Then we'll shift gears and go through a real example that teaches enough to get you up on your feet writing your own web application using node.JS.&lt;/p&gt;

&lt;h2&gt;Hello World Examples&lt;/h2&gt;

&lt;p&gt;Here are four simple hello world examples. The comments in the code explain how the code works and the text around it explain what it does and how to test it.&lt;/p&gt;

&lt;h2&gt;Hello Console&lt;/h2&gt;

&lt;p&gt;This example is about as plain as it can get. It prints the words &quot;Hello World&quot; to the terminal.&lt;/p&gt;

&lt;p&gt;&lt;hello-node/hello-console.js*&gt;&lt;/p&gt;

&lt;p&gt;You can run this by putting it in a file called &quot;hello-console.js&quot; and running it with &lt;code&gt;node hello-console.js&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Hello HTTP&lt;/h2&gt;

&lt;p&gt;I'd guess that while it's not the only use case for node.JS, most people are using it as a web application platform.  So the next example will be a simple HTTP server that responds to every request with the plain text message &quot;Hello World&quot;&lt;/p&gt;

&lt;p&gt;&lt;hello-node/hello-http.js&gt;&lt;/p&gt;

&lt;h2&gt;Hello TCP&lt;/h2&gt;

&lt;p&gt;Node also makes an excellent TCP server, and here is an example that responds to all TCP connections with the message &quot;Hello World&quot; and then closes the connection.&lt;/p&gt;

&lt;p&gt;&lt;hello-node/hello-tcp.js&gt;&lt;/p&gt;

&lt;h2&gt;Hello Router&lt;/h2&gt;

&lt;p&gt;Often you won't be using the node built-in libraries because they are designed to be very low level.  This makes node quick, nimble, and easy to maintain, but is usually not enough to get started on a real world application.  My first node framework is &lt;code&gt;node-router&lt;/code&gt;.  This example shows an HTTP server that responds with &quot;Hello World&quot; to all requests to &quot;/&quot; and responds with a 404 error to everything else.&lt;/p&gt;

&lt;p&gt;&lt;hello-node/hello-router.js&gt;&lt;/p&gt;

&lt;p&gt;In order to test this, you will need to install the &lt;code&gt;node-router&lt;/code&gt; library.  There are two ways to do this.  You can either install it into a path that node recognizes (I create a symlink into ~/.node_libraries) or put the &lt;code&gt;node-router.js&lt;/code&gt; file in your application and reference it locally.  See the &lt;a href=&quot;http://nodejs.org/api/modules.html&quot;&gt;node docs on modules&lt;/a&gt; for more details on how modules work.&lt;/p&gt;

&lt;h1&gt;Installing Libraries&lt;/h1&gt;

&lt;p&gt;I'll install the following libraries that are common to my projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/creationix/node-router&quot;&gt;node-router&lt;/a&gt; - Wraps the built-in http library with many convenience functions like request routing and message body decoding.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/creationix/haml-js&quot;&gt;haml-js&lt;/a&gt; - Template engine that compiles HAML templates into HTML&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/creationix/proto&quot;&gt;proto&lt;/a&gt; - Baby library that adds some useful stuff to Object.prototype&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can install these however you please, but here is how I'd do it.  The following code will clone the four libraries and install them into your local node library search path:&lt;/p&gt;

&lt;p&gt;&lt;hello-node/install.sh&gt;&lt;/p&gt;

&lt;p&gt;That's it for now, this article was going to explain more, but it seems it got lost and fell through the cracks.  Hopefully this will help you get started working with node.JS, it's a blast!.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Facebook Connect with Node</title><link>https://howtonode.org/facebook-connect</link><comments>https://howtonode.org/facebook-connect#disqus_thread</comments><pubDate>Thu, 18 Mar 2010 17:00:00 -0500</pubDate><guid isPermaLink="true">https://howtonode.org/facebook-connect</guid><description>&lt;p&gt;A big part of building a new web application is repurposing common patterns, one such pattern is the ability for users to sign in and out. One way of solving this quickly is by using Facebook Connect. &lt;/p&gt;

&lt;h2&gt;Background&lt;/h2&gt;

&lt;p&gt;Unlike some APIs, the Facebook API is very Javascript friendly, but unfortunately it can be very time consuming to go through the maze of misdirected Facebook documentation. So in order to make Facebook integration quick and easy, I've wrapped a lot of under-the-hood code into a plugin called &lt;a href=&quot;http://github.com/dominiek/node-facebook&quot;&gt;node-facebook&lt;/a&gt;. This plugin also provides examples and routines to get your Facebook Canvas application running quickly with Node, however, this article will focus on the FB Connect part.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Facebook's developer tools are increasingly going into the direction of more Javascript on the client-side. I also have a strong preference of offloading certain logic to the client-side. This article will also attempt to follow &lt;a href=&quot;http://synaptify.com/?p=613702&quot;&gt;that direction&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Communication&lt;/h2&gt;

&lt;p&gt;As you can see in this totally unnecessary diagram, most of the integration takes place on the client-side:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://github.com/dominiek/node-facebook/raw/master/doc/communication.png&quot; alt=&quot;Awesome Diagram&quot; title=&quot;Awesome Diagram&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: For this article I've been using NodeJS version 0.1.31 and Express version 0.7.1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You need to install both &lt;a href=&quot;http://nodejs.org&quot;&gt;NodeJS&lt;/a&gt; and the &lt;a href=&quot;http://github.com/visionmedia/express&quot;&gt;Express Web Framework&lt;/a&gt;. Assuming you've installed NodeJS, you can easily include express into your Git project by adding a submodule:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p lib/support
git submodule add git://github.com/visionmedia/express.git lib/support/express
cd lib/support/express
git submodule init
git submodule update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, you need to include &lt;a href=&quot;http://github.com/brainfucker/hashlib&quot;&gt;Hashlib&lt;/a&gt; into your project and compile it. Hashlib is a library that provides cryptographic routines like MD5:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add git://github.com/brainfucker/hashlib.git lib/support/hashlib
cd lib/support/hashlib
make
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;1. Registering your Facebook Application&lt;/h2&gt;

&lt;p&gt;In order to use Facebook Connect, you need to &lt;a href=&quot;http://facebook.com/developer&quot;&gt;register a new Facebook application&lt;/a&gt; and set the FB Connect URL to the root of your application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://github.com/dominiek/node-facebook/raw/master/doc/register_application.png&quot; alt=&quot;Setting your FB Connect URL&quot; title=&quot;Setting your FB Connect URL&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;2. Setting up your Project&lt;/h2&gt;

&lt;p&gt;For Facebook integration you need to place these three files into your project folder:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/dominiek/node-facebook/raw/master/lib/facebook.js&quot;&gt;facebook.js&lt;/a&gt; - plugin for the Express framework - to be placed in /lib&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/dominiek/node-facebook/raw/master/lib/jquery.facebook.js&quot;&gt;jquery.facebook.js&lt;/a&gt; - a simple jQuery plugin to interface with the &lt;a href=&quot;http://wiki.developers.facebook.com/index.php/JavaScript_Client_Library&quot;&gt;Facebook JS library&lt;/a&gt; - to be placed in /public/javascripts&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/dominiek/node-facebook/raw/master/examples/fb_iframe/public/xd_receiver.htm&quot;&gt;xd_receiver.htm&lt;/a&gt; - used by Facebook for opening up a &lt;a href=&quot;http://wiki.developers.facebook.com/index.php/Cross_Domain_Communication_Channel&quot;&gt;Cross-domain Communication Channel&lt;/a&gt; - to be placed in /public&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After adding the dependencies and placing these files, your directory structure should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myproject
|-- app.js /* new file */
|-- lib
|   |-- support
|   |   |-- express
|   |   `-- hashlib
|   |-- facebook.js
`-- public
    |-- index.html /* new file */
    |-- xd_receiver.htm
    `-- javascript
        `-- jquery.facebook.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make our application work, we only need to implement two files: index.html and app.js. That's right, we're only using AJAX calls and static files.&lt;/p&gt;

&lt;h2&gt;3. In the Browser&lt;/h2&gt;

&lt;p&gt;The provided jQuery plugin provides the following functions that we'll be using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fbInit&lt;/strong&gt; - initialize the JS lib and set up the cross-communication channel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fbConnect&lt;/strong&gt; - invoke the connect procedure and to synchronize sessions and profile information with our backend&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fbLogout&lt;/strong&gt; - logout from both the Facebook Application and our NodeJS application&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fbIsAuthenticated&lt;/strong&gt; - check whether a user is logged in or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First we start out with a simple skeleton that loads jQuery and the Facebook JS library. Please note that you need the div named &lt;em&gt;fb-root&lt;/em&gt; right after the body tag for Facebook's lib to work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
 &amp;lt;head&amp;gt; 
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;/javascripts/jquery.facebook.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;div id=&quot;fb-root&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://static.ak.connect.facebook.com/js/api_lib/v0.4/FeatureLoader.js.php&quot;&amp;gt;&amp;lt;/script&amp;gt;

  &amp;lt;/body&amp;gt; 
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let's implement a basic UI:&lt;/p&gt;

&lt;p&gt;&lt;facebook-connect/index.html&gt;&lt;/p&gt;

&lt;h2&gt;4. On the Server&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://github.com/visionmedia/express&quot;&gt;Express&lt;/a&gt; plugin is initialized like any other plugin in the environment configuration routine, but takes your Facebook API key and Secret as mandatory initialization arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use(require('facebook').Facebook, {
  apiKey: 'FACEBOOK_API_KEY', 
  apiSecret: 'FACEBOOK_API_SECRET'
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to implement 3 AJAX actions to make jquery.facebook.js work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET /fbSession&lt;/strong&gt; - Is the current user logged in? Or is there a cookie/param present I can use to authenticate?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST /fbSession&lt;/strong&gt; - Update additional information about the user (name, picture, etc)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST /fbLogout&lt;/strong&gt; - Called after logout from the Facebook Application took place&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example Express application that uses no persistent storage:&lt;/p&gt;

&lt;p&gt;&lt;facebook-connect/app.js&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The verification of Facebook data by the server-side is done by using the Application Secret and the signature that's sent along with the data. First, all parameters and cookies are put together in one string and then the Application Secret is appended to it. The MD5 hash of this string should match the signature that's included. &lt;a href=&quot;http://wiki.developers.facebook.com/index.php/Verifying_The_Signature&quot;&gt;more about verifying the signature&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In any subsequently added action, you can access the Facebook Session simply like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get('/hello', function () {
  var fbSession = this.fbSession()
  return 'Hello ' + ' user ' + fbSession.userId + '!';
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;6. Further Development&lt;/h2&gt;

&lt;p&gt;In this article we went into the direction of putting a lot of UI flow and controller logic into the browser. This can be quite counter-intuitive. As a Rails-programmer and former RJS lover, I can attest to that. However, while there are still remaining issues like SEO and accessibility, this approach allows the server to really focus on data modelling/routing and has numerous scaling benefits.&lt;/p&gt;

&lt;p&gt;All examples in this article and more can be found on the &lt;a href=&quot;http://github.com/dominiek/node-facebook&quot;&gt;node-facebook repository&lt;/a&gt; I created. If you run into any obstacles, feel free to &lt;a href=&quot;http://dominiek.com/&quot;&gt;contact me&lt;/a&gt; or fork the code. I hope to soon write a similar plugin for Twitter's OAUTH based login.&lt;/p&gt;

&lt;h2&gt;Appendix A: Facebook Troubleshooting Checklist&lt;/h2&gt;

&lt;p&gt;Debugging Facebook Application problems can be a real pain in the neck, here is a simple checklist distilled from many frustrating mind-cycles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are you sure xd_receiver.htm is in place and being accessed?&lt;/li&gt;
&lt;li&gt;Are you sure the &lt;div id=&quot;root&quot;&gt;&lt;/div&gt; element is present in the body?&lt;/li&gt;
&lt;li&gt;If you are using Safari with iFrames, there are some &lt;a href=&quot;http://saizai.livejournal.com/897522.html&quot;&gt;cookie hacks&lt;/a&gt; you need to do&lt;/li&gt;
&lt;li&gt;Are cookies being set successfully after FB connect?&lt;/li&gt;
&lt;li&gt;Are you sure you're using the correct API keys?&lt;/li&gt;
&lt;/ul&gt;</description><author>info@dominiek.com (Dominiek ter Heide)</author></item><item><title>What is &quot;this&quot;?</title><link>https://howtonode.org/what-is-this</link><comments>https://howtonode.org/what-is-this#disqus_thread</comments><pubDate>Mon, 08 Mar 2010 12:59:10 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/what-is-this</guid><description>&lt;p&gt;Most people that learn JavaScript are coming from a background in another language.  This brings with it a view of how the world works that may be different from how it really works in JavaScript.  For this and other reasons, JavaScript is often misunderstood.  It's not entirely our fault, the language was designed to work like one thing (scheme-like), but look like another (c-like).  This article will describe lexical scope and the &quot;&lt;code&gt;this&lt;/code&gt;&quot; variable and how to control them rather than be controlled by them when in coding JavaScript.&lt;/p&gt;

&lt;h2&gt;It's all about where you are.&lt;/h2&gt;

&lt;p&gt;In all programming languages, there is this idea of current scope and current context.  In JavaScript we have a lexical scope and a current &quot;&lt;code&gt;this&lt;/code&gt;&quot; context.&lt;/p&gt;

&lt;p&gt;In JavaScript all new scopes are created through &quot;&lt;code&gt;function&lt;/code&gt;&quot; definitions.  But contrary to other c-like languages, this is the &lt;em&gt;only&lt;/em&gt; way to make a new scope.  For loops don't do it, if blocks don't do it, plain curly braces assuredly don't do it.  This simplicity is both a blessing and a curse.  First let's have a couple of examples to explain creating scopes.&lt;/p&gt;

&lt;p&gt;This is an example of global scope:&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/global.js*&gt;&lt;/p&gt;

&lt;p&gt;This is an example of local scope:&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/local.js*&gt;&lt;/p&gt;

&lt;h3&gt;Lexical Scope&lt;/h3&gt;

&lt;p&gt;Lexical scope is the key to making closures work.  Here's a quote from wikipedia about closures and lexical scope:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In computer science, a closure is a first-class function with free variables that are bound in the lexical environment. Such a function is said to be &quot;closed over&quot; its free variables. A closure is defined within the scope of its free variables, and the extent of those variables is at least as long as the lifetime of the closure itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what does all that mean?  Here's an example:&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/lexical.js*&gt;&lt;/p&gt;

&lt;p&gt;Here we see that local variables in an inner scope can shadow variables by the same name in the outer scope.  But from the outside, variables in the inside don't exist.  Lexical scope is 100% based on the physical location of the variables in the nesting in the code.  It doesn't matter what path you might take to get to the inner function.  That's how closures are able to make inner variables usable.&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/closure.js*&gt;&lt;/p&gt;

&lt;p&gt;The variables &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; are local to the &lt;code&gt;myModule&lt;/code&gt; function, but when we call &lt;code&gt;greeter&lt;/code&gt; from the global scope, it doesn't throw an error.  This is because the &lt;code&gt;greet&lt;/code&gt; function has &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; in its lexical scope and so they're accessible as if they were local variables.  Basically the way variable lookup works is that it goes up scope by scope looking for a variable by the requested name.&lt;/p&gt;

&lt;h3&gt;The context of &quot;&lt;code&gt;this&lt;/code&gt;&quot;&lt;/h3&gt;

&lt;p&gt;In addition to the lexical scope.  JavaScript adds another layer of locality through the special keyword &quot;&lt;code&gt;this&lt;/code&gt;&quot;.  This keyword looks and acts like any other javascript variable except that you can't modify it.  It acts as a reference to the context object, and as an object, you can get to its properties through normal dot or bracket notation. The magic is that the value of &quot;&lt;code&gt;this&lt;/code&gt;&quot; changes depending on what context your executing in.  In most cases, the context is the receiver of the message.  For example:&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/this.js#person*&gt;&lt;/p&gt;

&lt;p&gt;Note that I was able to access &lt;code&gt;Person.name&lt;/code&gt; and &lt;code&gt;Person.age&lt;/code&gt; from within &lt;code&gt;Person.greeting&lt;/code&gt;.  &lt;/p&gt;

&lt;h3&gt;&quot;&lt;code&gt;this&lt;/code&gt;&quot; is where it bites&lt;/h3&gt;

&lt;p&gt;The previous code almost looks like objects from other languages.  But that's where it bites you.  As the author of the &lt;code&gt;Person&lt;/code&gt; module, you have no assurance that &quot;&lt;code&gt;this&lt;/code&gt;&quot; will be the same as &quot;&lt;code&gt;Person&lt;/code&gt;&quot;.  For example, what if I wanted to store the greeting function somewhere else:&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/this.js#standalone*&gt;&lt;/p&gt;

&lt;p&gt;The problem here is that &quot;&lt;code&gt;this&lt;/code&gt;&quot; in the body of the greeting function is now the global object and not the &lt;code&gt;Person&lt;/code&gt; object.  How about one more example just for fun:&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/this.js#dog*&gt;&lt;/p&gt;

&lt;p&gt;The greeting function in Dog and the function in Person are &lt;strong&gt;the same&lt;/strong&gt; function.  They're both references to the same object in memory.  But depending on where it's called from, can change the value of &quot;&lt;code&gt;this&lt;/code&gt;&quot;.  Basically &quot;&lt;code&gt;this&lt;/code&gt;&quot; is whatever object comes before the dot in the call.  That's why &lt;code&gt;Dog.greeting()&lt;/code&gt; uses &lt;code&gt;Dog&lt;/code&gt; as &quot;&lt;code&gt;this&lt;/code&gt;&quot; and &lt;code&gt;Person.greeting()&lt;/code&gt; uses &lt;code&gt;Person&lt;/code&gt;.  When there is nothing before the function call, then the global object is used for &quot;&lt;code&gt;this&lt;/code&gt;&quot;.&lt;/p&gt;

&lt;h3&gt;Taming &quot;&lt;code&gt;this&lt;/code&gt;&quot;&lt;/h3&gt;

&lt;p&gt;JavaScript comes with a couple of handy-dandy functions on &lt;code&gt;Function.prototype&lt;/code&gt; called &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;.  They work about the same, but take arguments differently.  Going on from the previous examples, let's make a new object that doesn't even have a &lt;code&gt;greeting&lt;/code&gt; function, but can still be used by it.&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/this.js#alien*&gt;&lt;/p&gt;

&lt;p&gt;What we're saying here is to call the Person.greeting function, but inject the object &lt;code&gt;Alien&lt;/code&gt; as the &quot;&lt;code&gt;this&lt;/code&gt;&quot; value.  We could have used &lt;code&gt;apply&lt;/code&gt; just the same for this example since there are no extra arguments.&lt;/p&gt;

&lt;p&gt;Let's make a generic function that can work with any object that has &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties:&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/this.js#make-older*&gt;&lt;/p&gt;

&lt;p&gt;This function just adds years to any &quot;&lt;code&gt;this&lt;/code&gt;&quot; object and optionally replaces the name.  It's not tied to any particular object. (In fact any function not using variables from outer scopes is independent) Here is how we would use it with either &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/this.js#use-it*&gt;&lt;/p&gt;

&lt;p&gt;The difference is that each extra argument to &lt;code&gt;call&lt;/code&gt; is an argument passed to the function.  But with apply, there are only two arguments.  They are the &quot;&lt;code&gt;this&lt;/code&gt;&quot; object and an array of the parameters to pass to the function.&lt;/p&gt;

&lt;h3&gt;Binding &quot;&lt;code&gt;this&lt;/code&gt;&quot;&lt;/h3&gt;

&lt;p&gt;Sometimes we really like our nice OOP style code and want to force JS to act that way.  We don't like &quot;&lt;code&gt;this&lt;/code&gt;&quot; changing on us depending on how we're calling it all the time.  The most common place where it bites me is in an event based system that takes callbacks as arguments.  Here is a simple example from jQuery.&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/jquery.js#cart&gt;&lt;/p&gt;

&lt;p&gt;While this looks ok, it's waiting for disaster.  Even though we have &lt;code&gt;Cart.onClick&lt;/code&gt;, we're not calling the &lt;code&gt;onClick&lt;/code&gt; function yet.  the jQuery code will accept is as some parameter and at that point it has no way of knowing that &lt;code&gt;onClick&lt;/code&gt; came from the &lt;code&gt;Cart&lt;/code&gt; object.  Your &quot;&lt;code&gt;this&lt;/code&gt;&quot; won't be what you expect when it finally gets called.&lt;/p&gt;

&lt;p&gt;Let's combine our knowledge of closures and lexical scope and make &quot;&lt;code&gt;this&lt;/code&gt;&quot; scope act like it does in most OOP languages.&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/jquery.js#bad&gt;&lt;/p&gt;

&lt;p&gt;We created a little closure that then calls &lt;code&gt;Cart.onClick()&lt;/code&gt;.  The problem with this (besides being long and ugly) is that is doesn't pass through any function parameters or return values.  We can fix that some.&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/jquery.js#better&gt;&lt;/p&gt;

&lt;p&gt;This works, but it's even harder to read and understand.  If you don't already know, &quot;&lt;code&gt;arguments&lt;/code&gt;&quot; is another special keyword that is an array-like object that contains the arguments that were passed to the current inner-most function.&lt;/p&gt;

&lt;p&gt;If Cart was a globally accessible singleton object we could just use the variable &lt;code&gt;Cart&lt;/code&gt; directly instead of relying on &quot;&lt;code&gt;this&lt;/code&gt;&quot;, but that's often not the case when you have &quot;classes&quot; of objects sharing common functionality.&lt;/p&gt;

&lt;p&gt;Wouldn't it be easier to somehow modify &lt;code&gt;Cart.onClick&lt;/code&gt; so that &quot;&lt;code&gt;this&lt;/code&gt;&quot; was always Cart from within it?&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/jquery.js#bind&gt;&lt;/p&gt;

&lt;p&gt;There are various ways of doing this and in fact it's often not the right solution.  If you're just trying to make JavaScript act like language X then this is a great little tool, but it's better to just learn the semantics of JavaScript.&lt;/p&gt;

&lt;p&gt;Here we've just created a closure that has the scope embedded.  Then we replace Cart.onClick with the bound closure and use the apply magic to pass through any arguments and return value automatically.&lt;/p&gt;

&lt;h2&gt;Var statements&lt;/h2&gt;

&lt;p&gt;The var statement is really just a keyword to specify which nested scope a variable applies to.  In fact, if you never used &lt;code&gt;var&lt;/code&gt;, then all your variables would be global and walk all over each other.&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/var.js#globals*&gt;&lt;/p&gt;

&lt;p&gt;This is especially dangerous in things like for loops:&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/var.js#loops*&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;i&lt;/code&gt; variable in both loops is the &lt;strong&gt;same&lt;/strong&gt; variable and so the inner loop will break the outer loop and give the wrong answer.  Also if I had not put var statements before the two &lt;code&gt;n&lt;/code&gt; variables, then they would walk over each other and give a wrong answer too.&lt;/p&gt;

&lt;p&gt;There is one word of caution for &lt;code&gt;var&lt;/code&gt; users.  It doesn't matter where in the function body you put the &lt;code&gt;var&lt;/code&gt; word.  It only matters which function body you put it in.  And its scope is inner to function parameters. For example:&lt;/p&gt;

&lt;p&gt;&lt;what-is-this/var.js#onevar*&gt;&lt;/p&gt;

&lt;p&gt;This is why &lt;a href=&quot;http://www.jslint.com/&quot;&gt;jslint&lt;/a&gt; tells you to put all your var statements at the top of a function.  I've actually had this one bite me because there was a page of code between the top of the function and the &lt;code&gt;var&lt;/code&gt; statement.  I couldn't figure out why my variable I was passing in got set to &lt;code&gt;undefined&lt;/code&gt; before the first line of the function body.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There some universal rules that will go a long way to understanding scope in JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The only way to create a new scope is through the &lt;code&gt;function&lt;/code&gt; keyword.  Nothing else, not even &lt;code&gt;for ... in&lt;/code&gt; blocks create new scopes.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;var&lt;/code&gt; statement declares a variable as local to the current scope and the &lt;strong&gt;entire&lt;/strong&gt; current scope, not just from the &lt;code&gt;var&lt;/code&gt; statement onward.  These local variables shadow any existing variables from outer scopes.&lt;/li&gt;
&lt;li&gt;All variables except &quot;&lt;code&gt;this&lt;/code&gt;&quot; and &quot;&lt;code&gt;arguments&lt;/code&gt;&quot; follow lexical scope.  Their meaning is defined by the &lt;strong&gt;physical location&lt;/strong&gt; in the code.&lt;/li&gt;
&lt;li&gt;The variables &quot;&lt;code&gt;this&lt;/code&gt;&quot; and &quot;&lt;code&gt;arguments&lt;/code&gt;&quot; change at &lt;strong&gt;every&lt;/strong&gt; nesting level.  If you want to preserve them in a closure, then you need to first create a reference to their value through another variable that follows lexical scope.&lt;/li&gt;
&lt;li&gt;The value of &quot;&lt;code&gt;this&lt;/code&gt;&quot; is defined by &lt;strong&gt;how&lt;/strong&gt; the function is called.  You can control this through use of &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;call&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are exceptions to these rules, but only when messing with things like function decompilation, &lt;code&gt;eval&lt;/code&gt;, and the &lt;code&gt;with&lt;/code&gt; keyword.  Even then you're still following the rules, just not in the way you'd expect. Function decompilation + &lt;code&gt;eval&lt;/code&gt; transplants a function into a new lexical scope. And &lt;code&gt;with&lt;/code&gt; can be used to make things like &lt;code&gt;this.name&lt;/code&gt; appear as local lexical variables but work like &quot;&lt;code&gt;this&lt;/code&gt;&quot; properties.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Tasks and Prompts -- Implementing Simple Work Queues</title><link>https://howtonode.org/tasks-and-prompts</link><comments>https://howtonode.org/tasks-and-prompts#disqus_thread</comments><pubDate>Sat, 27 Feb 2010 18:50:22 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/tasks-and-prompts</guid><description>&lt;p&gt;Sometimes all you really need is orderly execution not blocking I/O to get the job done.  Tasks and prompts is a light weight implementation of the work queue design pattern.&lt;/p&gt;

&lt;h2&gt;Implementing Simple Work Queues&lt;/h2&gt;

&lt;p&gt;The other day I was converting a couple Bash installer scripts to node scripts. I recognized a familiar design pattern -- the work queue. Here's the requirements for a typical work queue approach -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tasks are queued, first in first out (i.e. tracked)&lt;/li&gt;
&lt;li&gt;tasks once started continue without further intervention&lt;/li&gt;
&lt;li&gt;tasks are independent (i.e. task A does not depend on task B or visa versa)&lt;/li&gt;
&lt;li&gt;tasks are execute once&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;My requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;tasks fired in sequence without concern for when they complete&lt;/li&gt;
&lt;li&gt;some tasks required a prompt and response before firing&lt;/li&gt;
&lt;li&gt;I wanted to queue tasks and prompts before running the work queue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A simple JavaScript array works fine as a first in first out queue (i.e. shift() pops the zeroth position off). An object's properties can keep track of what text I wanted to displayed; the callback to be fired; and if I need to show a prompt or get a response when firing a callback. tasks-and-prompts.js is a simple example of doing that:&lt;/p&gt;

&lt;p&gt;&lt;tasks-and-prompts/tasks-and-prompts.js&gt;&lt;/p&gt;

&lt;h2&gt;Explanations&lt;/h2&gt;

&lt;p&gt;In this simple example I prompt the user to answer a question then count to three. Pretty trivial but it's an implantation of a the work queue pattern. That pattern is common in installation or management scripts.  The only problem with the example above is that it isn't setup as a node module ... wait I did that already! See &lt;a href=&quot;http://github.com/rsdoiel/nshtools&quot;&gt;github.com/rsdoiel/nshtools&lt;/a&gt;. nshtools.js includes a more elaborate implementation and with features like command line option processing and high level file commands like cp and mv. The github wiki and the README.md file for nshtools have some more short examples for your enjoyment.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;</description><author>rsdoiel@gmail.com (R. S. Doiel)</author></item><item><title>Node + Redis = Fun</title><link>https://howtonode.org/node-redis-fun</link><comments>https://howtonode.org/node-redis-fun#disqus_thread</comments><pubDate>Tue, 23 Feb 2010 09:50:20 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/node-redis-fun</guid><description>&lt;p&gt;node brings asynchronous, evented I/O to the server. Redis gives you a blazing fast database with support for strings, lists and sets. Both Redis and Node.js follow certain patterns, Redis for data-storage, and node for event based programming. I hope to give an introduction to both in this article. By the time we are done, we will have built a &lt;a href=&quot;http://en.wikipedia.org/wiki/Pastebin&quot;&gt;Pastebin&lt;/a&gt; service.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;I will assume that the reader is comfortable with Javascript, including using events and passing around functions.&lt;/p&gt;

&lt;p&gt;Before we get down to the code, here is the software you will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.org/&quot;&gt;node&lt;/a&gt; ( we will use &lt;a href=&quot;http://github.com/ry/node/downloads&quot;&gt;v0.2.0&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/redis/&quot;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/fictorial/redis-node-client/&quot;&gt;redis-node-client&lt;/a&gt; - to connect to Redis from node. Already bundled within snip.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/gjritter/nerve/&quot;&gt;nerve&lt;/a&gt; - A micro-framework to handle routing. Use the bundled version which works with node v0.1.91.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://documentcloud.github.com/underscore/&quot;&gt;underscore.js&lt;/a&gt; - A collection of useful javascript functions, we will use only one.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt; - Python program to syntax highlight code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, here is how our code is organized.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;snip
|- deps/
   |- redis-node-client/
   |- nerve/
   |- underscore.js
|- run
|- snip.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;A note on the node module system&lt;/h2&gt;

&lt;p&gt;Node modules are used by importing them into the current scope using &lt;code&gt;require()&lt;/code&gt;. The &lt;code&gt;NODE_PATH&lt;/code&gt; environment variable is used to search for modules. When you have lots of dependencies, it gets boring to keep entering the full paths in the requires all the time. So rather than directly invoking&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node &amp;lt;script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to test our application, we will be using this shell script, so that we can directly do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require( 'nerve' )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and have it work&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env sh
export SNIP_PATH=$(dirname `readlink -f $0`)

export NODE_PATH=\
$NODE_PATH\
:$SNIP_PATH\
:$SNIP_PATH/deps/redis-node-client/lib\
:$SNIP_PATH/deps/nerve/lib\
:$SNIP_PATH/deps/ #underscore.js

node &quot;$@&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The Big Picture&lt;/h2&gt;

&lt;p&gt;Here is how our application works&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You visit the http://localhost:8000/&lt;/li&gt;
&lt;li&gt;Post your code snippet, and choose the language&lt;/li&gt;
&lt;li&gt;Get a unique url http://localhost:8000/&lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Database Schema&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;See the &lt;a href=&quot;http://code.google.com/p/redis/wiki/CommandReference&quot;&gt;full list of Redis commands&lt;/a&gt;. redis-node-client will abstract the actual communication.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So how do we represent our data ( snippets ) so that we can do all the things we want to do?&lt;/p&gt;

&lt;p&gt;Relational databases have rows and columns, where columns identify various parts of the data. But key-value stores, including Redis, don't have that. The solution is to encode the column in the key itself. So for each snippet we will have a key snippet:&lt;code&gt;id&lt;/code&gt;. So how do we prevent two snippets from having the same &lt;code&gt;id&lt;/code&gt;? In MySQL you would probably set the &lt;code&gt;id&lt;/code&gt; column of the &lt;code&gt;snippets&lt;/code&gt; table to &lt;code&gt;PRIMARY KEY AUTO_INCREMENT&lt;/code&gt;. We will similarly use a key &lt;em&gt;nextid&lt;/em&gt; which is a simple integer, to keep track of snippets. We will use Redis's &lt;em&gt;atomic&lt;/em&gt; operation &lt;code&gt;INCR&lt;/code&gt; to get an id:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INCR nextid
Now you can use the new returned id, which will be unique
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The snippet itself is stored as a JSON map. The inbuilt functions &lt;code&gt;JSON.stringify&lt;/code&gt; and &lt;code&gt;JSON.parse&lt;/code&gt; are used to convert to and fro.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  'language' : '&amp;lt;language&amp;gt;',
  'snippet' : '&amp;lt;Actual data&amp;gt;',
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Redis allows values to be upto 1GB in size, so we don't have to worry about that.&lt;/p&gt;

&lt;h2&gt;First code&lt;/h2&gt;

&lt;p&gt;First lets get nerve started so that we get something which works. nerve accepts a list of routes, based or regular expressions, and calls the associated function. For the first run lets just display the string 'Hello World'. Add the following to snip.js:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nerve.create( [
  [ /.*/, function( req, res ) { res.respond( &quot;Hello World&quot; ); } ]
]).listen( 8000 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;./run snip.js&lt;/code&gt; and point your browser to http://localhost:8000. Its as simple as that. &lt;code&gt;/.*/&lt;/code&gt; means match any URL and invoke this function. Each function is passed two argIts as simple as that. &lt;code&gt;/.*/&lt;/code&gt; means match any URL and invoke this function. Each function is passed two arguments, &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt;. &lt;code&gt;request&lt;/code&gt; will have lots of information about the client request, like headers and form data which we are interested in. &lt;code&gt;response&lt;/code&gt; is used to send content back to the client. &lt;code&gt;respond.respond(data)&lt;/code&gt; sends all the data to the browser and closes the connection.&lt;/p&gt;

&lt;p&gt;Node relies on asynchronous I/O and so we will often be dealing with streaming data. The lower level methods &lt;code&gt;respond.sendHeader()&lt;/code&gt;, &lt;code&gt;respond.write()&lt;/code&gt; and &lt;code&gt;response.close()&lt;/code&gt; will allow us to apply streaming. This will be used when we Syntax-highlight code.&lt;/p&gt;

&lt;h2&gt;Adding Snippets&lt;/h2&gt;

&lt;p&gt;Before we can do anything, we need some data, so let's create the form. Since it's pretty simple, we'll just put it as a string. Usually you would store all these &lt;em&gt;views&lt;/em&gt; in files and stream them over the connection.&lt;/p&gt;

&lt;p&gt;A particularly nasty part of our code is the list of languages, generated by &lt;a href=&quot;http://gist.github.com/310877&quot;&gt;getLanguageList&lt;/a&gt;, which I haven't included here, but is present in the code. Ideally you wouldn't have this &lt;em&gt;data&lt;/em&gt; in your &lt;em&gt;code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So this is a part of &lt;code&gt;snip.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;node-redis-fun/snip.js#formHtml&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var addSnippet = function() {}
var showSnippet = function() {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;node-redis-fun/snip.js#create&gt;&lt;/p&gt;

&lt;h3&gt;Handling post data&lt;/h3&gt;

&lt;p&gt;Each &lt;code&gt;nerve&lt;/code&gt; handler function receives two arguments, the first is a &lt;a href=&quot;http://nodejs.org/api.html#_http&quot;&gt;http.ServerRequest&lt;/a&gt; object and the second is a &lt;a href=&quot;http://nodejs.org/api.html#_http&quot;&gt;http.ServerResponse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;POST data is sent in the body of the Request. Since the data is streamed we have to add a listener function to collect all the data into a buffer. The Request will &lt;em&gt;emit&lt;/em&gt; a &lt;code&gt;end&lt;/code&gt; signal when all data has been received, so we know when to stop. Once we have all the data, we want to parse it and use it. To make this generic we pass &lt;code&gt;getPostParams&lt;/code&gt; a &lt;a href=&quot;http://howtonode.org/control-flow&quot;&gt;callback&lt;/a&gt; function, which it will call with the results of the query.&lt;/p&gt;

&lt;p&gt;We can parse the form data using the querystring module, so that our function becomes:&lt;/p&gt;

&lt;p&gt;&lt;node-redis-fun/snip.js#getPostParams&gt;&lt;/p&gt;

&lt;p&gt;Now lets just get &lt;code&gt;addSnippet()&lt;/code&gt; to echo the form data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var addSnippet = function( req, res ) {
  getPostParams(req, function( obj ) {
    res.respond( sys.inspect( obj ) );
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you try posting some code you should see the object literal being echoed back.&lt;/p&gt;

&lt;h3&gt;Store the snippet&lt;/h3&gt;

&lt;p&gt;Instead of echoing back the POST data, lets now store it in Redis, thus finishing half the implementation of the pastebin. We have to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get a unique id for the URL&lt;/li&gt;
&lt;li&gt;Store the data&lt;/li&gt;
&lt;li&gt;When both succeed, display the URL to the user.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Again, fitting with node's asynchronous model, we will have to use a sequence of callbacks. Remember that each function introduces a scope with its own &lt;em&gt;this&lt;/em&gt; reference, so make sure you save any this references in outer scopes as some other variable:&lt;/p&gt;

&lt;p&gt;&lt;node-redis-fun/snip.js#addSnippet&gt;&lt;/p&gt;

&lt;p&gt;The SET operation sets a key to the string value. We use JSON.stringify to get a nice string representation of the request object. Finally once the save is successful we notify the user. That's it, your snippet is saved and ready to show, which brings us to...&lt;/p&gt;

&lt;h3&gt;Syntax highlighting&lt;/h3&gt;

&lt;p&gt;Since &lt;code&gt;pygmentize&lt;/code&gt; is an external program we are going to spawn a child process and pass it various options. Pygmentize will wait on stdin and write out to stdout. So we are going to do something similar to pipes in shells.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pygmentize [options] &amp;lt; redis data &amp;gt; browser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It would have been even cooler if redis-node-client supported streaming the data rather than buffering it, but you can't have everything... . Anyway this is how we call pygmentize:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// for now just assume we magically
// got the snippet JSON parsed into obj

// get the language short code
// not that languages is an array of
// [&quot;shortcode&quot;, &quot;name&quot;] elements and filter
// returns a *list* so we need the 0th element.
var shortcode = languages.filter( function(el) {
  return el[0] == obj.language;
}) [0][0];


var pyg = cp.spawn( &quot;pygmentize&quot;,
                  [ &quot;-l&quot;, shortcode,
                    &quot;-f&quot;, &quot;html&quot;,
                    &quot;-O&quot;, &quot;full,style=pastie&quot;,
                    &quot;-P&quot;, &quot;title=Snippet #&quot; + id ] );
pyg.stdout.on( &quot;data&quot;, function( coloured ) {
  if( coloured )
    res.write( coloured );
} );

pyg.on( 'exit', function() {
  res.end();
});

pyg.stdin.write( obj.code );
pyg.stdin.end();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first half is pretty self explanatory. We add a
listener &lt;code&gt;data&lt;/code&gt; to watch for data on the child's &lt;em&gt;stdout&lt;/em&gt;. Then we send the plain code to pygmentize via its &lt;em&gt;stdin&lt;/em&gt;. It is necessary to close the stream otherwise pygmentize will keep waiting for data and won't generate output. We incrementally write out data as it is received. &lt;code&gt;coloured&lt;/code&gt; will be null when done.&lt;/p&gt;

&lt;p&gt;To get the actual snippet to fetch, we are going to
get nerve to pass us the id. In routing&lt;/p&gt;

&lt;p&gt;&lt;node-redis-fun/snip.js#create&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;([0-9]+)&lt;/code&gt; &lt;em&gt;match group&lt;/em&gt; will be extracted by
nerve and passed to the handler as the third argument.
With that in place we are ready to show the output.&lt;/p&gt;

&lt;p&gt;&lt;node-redis-fun/snip.js#showSnippet&gt;&lt;/p&gt;

&lt;p&gt;The Redis related code is pretty similar to &lt;code&gt;addSnippet()&lt;/code&gt;. In case the key doesn't exist, we will get a null. So we use &lt;code&gt;sendHeader()&lt;/code&gt; to send a &lt;em&gt;404 Page Not Found&lt;/em&gt;, and stop. Otherwise we send a healthy 200, tell the browser to expect HTML and then stream the data. Start the server, visit &lt;code&gt;/&amp;lt;id&amp;gt;&lt;/code&gt; and get your freshly highlighted code!&lt;/p&gt;

&lt;h2&gt;I want more&lt;/h2&gt;

&lt;p&gt;Extend the simple pastebin to allow expiry (HINT: The Redis EXPIRE command), allow people to edit the bin and keep a diff history or more. One big improvement would be to cache the pygmentize results as that could really slow down a popular site with a large number of requests per second.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://howtonode.org&quot;&gt;How To Node&lt;/a&gt; has more great articles about writing other web apps. Tinker around with writing JavaScript bindings for C/C++ libraries or go build  a Asynchronous, Distributed Googolplexbazillion search engine.&lt;/p&gt;

&lt;p&gt;Full code for this article can be found at &lt;a href=&quot;http://bitbucket.org/nikhilm/snip&quot;&gt;Bitbucket&lt;/a&gt;&lt;/p&gt;</description><author>nsm.nikhil@gmail.com (Nikhil Marathe)</author></item><item><title>&quot;Do&quot; it fast!</title><link>https://howtonode.org/do-it-fast</link><comments>https://howtonode.org/do-it-fast#disqus_thread</comments><pubDate>Mon, 22 Feb 2010 10:52:08 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/do-it-fast</guid><description>&lt;p&gt;Now with the release of &lt;a href=&quot;http://groups.google.com/group/nodejs/browse_thread/thread/e6cc6f04cd0ddf14&quot;&gt;Node v0.1.30&lt;/a&gt; there is even more need for a library like &lt;a href=&quot;http://github.com/creationix/do&quot;&gt;Do&lt;/a&gt;.  While working with the node community to decide on the best alternative to node promises, we decided that it's best left to library developers.  So as of this morning, node no longer ships with promises, but uses a simple callback interface for all async functions.&lt;/p&gt;

&lt;p&gt;I took my async library that I've been developing throughout the Control Flow series and made it into a real library called &lt;a href=&quot;http://github.com/creationix/do&quot;&gt;Do&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Node callback interface&lt;/h2&gt;

&lt;p&gt;All async functions in node now use a simple callback based interface:&lt;/p&gt;

&lt;p&gt;&lt;do-it-fast/async.js&gt;&lt;/p&gt;

&lt;p&gt;That is, after the arguments, there is a callback function expected.  This callback function will be given the error if there was one, and if not, the result after that.&lt;/p&gt;

&lt;p&gt;Creating an async function that exports this interface is simple too:&lt;/p&gt;

&lt;p&gt;&lt;do-it-fast/plain_callbacks.js&gt;&lt;/p&gt;

&lt;p&gt;These callbacks are fast, simple, and to-the-point.  However, your code can get pretty hairy when you start expanding beyond these trivial examples.  These simple callback based functions can't be used with aggregate utilities, they can't be implicitly chained or grouped either.&lt;/p&gt;

&lt;h2&gt;We can &lt;code&gt;Do&lt;/code&gt; better.&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Do&lt;/code&gt; is a library that adds higher level abstraction and continuables.  What I mean by a continuable is explained by the following:&lt;/p&gt;

&lt;h3&gt;Continuables&lt;/h3&gt;

&lt;p&gt;&lt;do-it-fast/divide.js#define&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Do&lt;/code&gt; expects async functions to not require the callback in the initial invocation, but instead return a continuable which can then be called with the &lt;code&gt;callback&lt;/code&gt; and &lt;code&gt;errback&lt;/code&gt;.  This is done by manually currying the function. The &quot;continuable&quot; is the function returned by the outer function.  The body of the function won't be executed until you finish the application by attaching a callback.&lt;/p&gt;

&lt;p&gt;&lt;do-it-fast/divide.js#use&gt;&lt;/p&gt;

&lt;p&gt;This style is extremely simple, and is fairly powerful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The initial function can have variable arguments.&lt;/li&gt;
&lt;li&gt;The continuable itself is portable until it's invoked by attaching callbacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Why is this better than plain-ol-callbacks?&lt;/h3&gt;

&lt;p&gt;Well, let's convert the &lt;code&gt;safeRead&lt;/code&gt; example from above to continuables:&lt;/p&gt;

&lt;p&gt;&lt;do-it-fast/continuable_based.js&gt;&lt;/p&gt;

&lt;p&gt;You'll notice that this is a lot shorter and you don't have to constantly check for the error argument or pad your success results with a &lt;code&gt;null&lt;/code&gt; argument.  Also since we're passing through the success case as is, we can use the outer &lt;code&gt;callback&lt;/code&gt; as the inner &lt;code&gt;callback&lt;/code&gt;.  In most cases you won't do this for success, but you will for &lt;code&gt;errback&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;What about the rest of &lt;code&gt;Do&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;The real power of &lt;code&gt;Do&lt;/code&gt; and continuables comes when you're dealing with several async functions as once.  Let's take our example from the &lt;a href=&quot;http://howtonode.org/control-flow-part-iii&quot;&gt;third control flow article&lt;/a&gt; and convert it to use the new &lt;code&gt;Do&lt;/code&gt; library:&lt;/p&gt;

&lt;h2&gt;How to &lt;code&gt;Do&lt;/code&gt; (API)&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Do&lt;/code&gt; library makes doing higher-level abstractions easy.  All of these helpers are themselves continuables so you can attach callbacks by calling the returned, curried function.&lt;/p&gt;

&lt;h3&gt;Do.parallel(actions) {...}&lt;/h3&gt;

&lt;p&gt;Takes an array of actions and runs them all in parallel. You can either pass in an array of actions, or several actions as function arguments.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you pass in an array, then the output will be an array of all the results&lt;/li&gt;
&lt;li&gt;If you pass in separate arguments, then the output will have several arguments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;do-it-fast/parallel-example.js&gt;&lt;/p&gt;

&lt;h3&gt;Do.chain(actions) {...}&lt;/h3&gt;

&lt;p&gt;Chains together several actions feeding the output of the first to the input of the second and the final output to the continuables callback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;do-it-fast/chain-example.js&gt;&lt;/p&gt;

&lt;h3&gt;Do.map(array, fn) {...}&lt;/h3&gt;

&lt;p&gt;Takes an array and does an array map over it using the async callback &lt;code&gt;fn&lt;/code&gt;. The signature of &lt;code&gt;fn&lt;/code&gt; is &lt;code&gt;function fn(item, callback, errback)&lt;/code&gt; or any regular continuable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;do-it-fast/map-example.js&gt;&lt;/p&gt;

&lt;h3&gt;Do.filter(array, fn) {...}&lt;/h3&gt;

&lt;p&gt;Takes an array and does an array filter over it using the async callback &lt;code&gt;fn&lt;/code&gt;. The signature of &lt;code&gt;fn&lt;/code&gt; is &lt;code&gt;function fn(item, callback, errback)&lt;/code&gt; or any regular continuable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;do-it-fast/filter-example.js&gt;&lt;/p&gt;

&lt;h3&gt;Do.filterMap(array, fn) {...}&lt;/h3&gt;

&lt;p&gt;Takes an array and does a combined filter and map over it.  If the result
of an item is undefined, then it's filtered out, otherwise it's mapped in.
The signature of &lt;code&gt;fn&lt;/code&gt; is &lt;code&gt;function fn(item, callback, errback)&lt;/code&gt; or any regular continuable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;do-it-fast/filtermap-example.js&gt;&lt;/p&gt;

&lt;h2&gt;Using with node libraries&lt;/h2&gt;

&lt;p&gt;Do has a super nifty &lt;code&gt;Do.convert&lt;/code&gt; function that takes a library and converts it to use Do style continuables.  For example, if you wanted to use &lt;code&gt;fs.readFile&lt;/code&gt; and &lt;code&gt;fs.writeFile&lt;/code&gt;, then you would do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = Do.convert(require('fs'), ['readFile', 'writeFile']);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do will give you a copy of &lt;code&gt;fs&lt;/code&gt; that has &lt;code&gt;readFile&lt;/code&gt; and &lt;code&gt;writeFile&lt;/code&gt; converted to Do style.  It's that easy!&lt;/p&gt;

&lt;h2&gt;For library writers&lt;/h2&gt;

&lt;p&gt;All async functions in node follow a common interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;method(arg1, arg2, arg3, ..., callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;callback&lt;/code&gt; is of the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;callback(err, result1, result2, ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is done to keep node simple and to allow for interoperability between the various async abstractions like Do continuables and CommonJS promises.&lt;/p&gt;

&lt;p&gt;If you're writing a library, make sure to export all your async functions following the node interface.  Then anyone using your library can know what format to expect.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>NodeJS for everyday things</title><link>https://howtonode.org/node-for-everyday-things</link><comments>https://howtonode.org/node-for-everyday-things#disqus_thread</comments><pubDate>Fri, 19 Feb 2010 16:20:20 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/node-for-everyday-things</guid><description>&lt;p&gt;Everyday things:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Those little programs you write quickly to get something done like counting pages in a text document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Page counting&lt;/h2&gt;

&lt;p&gt;Recently I was writing an essay and I needed to calculate a page count. My text editor was great at giving me a word count. I used the result and divided it by 350 to ball park my page count. This became problematic because I'm lousy at doing math in my head. Next I decided to chain some Unix commands together to do the job. I played with Bash, Unix's wc and cut commands I came up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env bash
let x=$(wc -w $1 | cut -d\  -f 1)/350
echo &quot;Page count for $1 is $x&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was nice. It was short. It worked but I wanted to procrastinate a little more. I started thinking about the lack of nuance in this approach. What was wc really counting? How was it handling punctuation and new lines? I could have tracked down the source code for wc but that seemed a little excessive. I pondered on - process the file with sed before piping it to wc; wrap it in a function for processing multiple files; keep a running total and pipe stats into an SQLite database. I found myself running down the rabbit and out to the sea. It is truly impressive what you can conjure up from the Unix command line and build into a nice little complicated shell script. Sometimes it is easier to visualize something in one language. I thought of Node.&lt;/p&gt;

&lt;p&gt;The page count problems are basically a simple analysis of text with some accounting. Could I quickly write a program using node to do something so mundane? Yes and it was surprisingly straight forward. I fired up node-repl and started playing around before typing up this:&lt;/p&gt;

&lt;p&gt;&lt;node-for-everyday-things/word-count.js&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pagecount&lt;/code&gt; reports the plain text version of this essay is 636 words or 1.82 pages including the source code examples. It's a little longer than my shell script. On the other hand it is easier to read and with a little modification I can embed it as a web service or put it into a web page.&lt;/p&gt;</description><author>rsdoiel@gmail.com (R. S. Doiel)</author></item><item><title>Blog rolling with mongoDB, express and Node.js</title><link>https://howtonode.org/express-mongodb</link><comments>https://howtonode.org/express-mongodb#disqus_thread</comments><pubDate>Thu, 18 Feb 2010 15:28:42 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/express-mongodb</guid><description>&lt;blockquote&gt;
  &lt;p&gt;Article and Code updated by &lt;a href=&quot;http://loarabia.tumblr.com&quot;&gt;loarabia (Larry Olson)&lt;/a&gt;.
  Article and Code updated by Toby Clemson&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article I hope to take you through the steps required to get a fully-functional (albeit feature-light) persistent blogging system running on top of &lt;a href=&quot;http://nodejs.org&quot;&gt;node&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The technology stack that we'll be using will be &lt;a href=&quot;http://nodejs.org&quot;&gt;node&lt;/a&gt; + &lt;a href=&quot;http://github.com/visionmedia/express&quot;&gt;express&lt;/a&gt; + &lt;a href=&quot;http://www.mongodb.org&quot;&gt;mongoDB&lt;/a&gt; all of which are exciting, fast and highly scalable. You'll also get to use &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; and &lt;a href=&quot;http://learnboost.github.com/stylus/&quot;&gt;stylus&lt;/a&gt; for driving the templated views and styling! We will be using &lt;a href=&quot;http://npmjs.org/&quot;&gt;npm&lt;/a&gt; to ease the package management and installation issues.&lt;/p&gt;

&lt;p&gt;This article will be fairly in-depth so you may want to get yourself a rather large mug of whatever beverage you prefer before you settle down :)&lt;/p&gt;

&lt;h2&gt;Getting Started / Pre-Requisites.&lt;/h2&gt;

&lt;h3&gt;mongoDB&lt;/h3&gt;

&lt;p&gt;Installation is as simple as downloading the &lt;a href=&quot;http://www.mongodb.org/downloads&quot;&gt;installer from here&lt;/a&gt;. For this tutorial I've been using v1.8.2 on MacOSX but any recent version should work. Once installed you can just execute 'mongod' to have a local instance up and running.&lt;/p&gt;

&lt;h3&gt;node.js&lt;/h3&gt;

&lt;p&gt;I'll assume that you already have an installed version of node.js (why else would you be looking at a how-to?! ;) ) However as &lt;a href=&quot;http://nodejs.org&quot;&gt;node&lt;/a&gt; is subject to a reasonably high rate of change for the purposes of this article everything has been written to run against the &lt;a href=&quot;http://github.com/joyent/node/tree/v0.4.10&quot;&gt;'v0.4.10' tag&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;npm&lt;/h3&gt;

&lt;p&gt;The original version of this article required various dependencies to be installed by hand from github repositories, package management has moved on within node.js since that time and we will use this to our advantage by following the instructions on how to install the &lt;a href=&quot;http://npmjs.org/&quot;&gt;npm&lt;/a&gt;.
Once npm is installed you should be able to execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm search
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From your console and see a list of &lt;a href=&quot;http://nodejs.org&quot;&gt;node&lt;/a&gt; packages that can be installed, if you cannot then it would be a good plan to figure out why not before proceeding.&lt;/p&gt;

&lt;h2&gt;Getting hold of express&lt;/h2&gt;

&lt;p&gt;Installing express on your system is as easy as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// You may need to run this under sudo
npm install express -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can begin with the process of writing our blog, let the good times (blog)roll.&lt;/p&gt;

&lt;h2&gt;Defining our application&lt;/h2&gt;

&lt;p&gt;We're going to build a very simple blogging application (perhaps we'll build on this in a future article?). It is going to support the reading of blog articles, posting of blog articles and commenting on them. There will be no security, authentication or authorization. Hopefully this will demonstrate enough of the technology stack to let you move forward quickly.&lt;/p&gt;

&lt;h3&gt;The data types&lt;/h3&gt;

&lt;p&gt;Because we're dealing with a &lt;a href=&quot;http://en.wikipedia.org/wiki/Document-oriented_database&quot;&gt;document orientated&lt;/a&gt; database rather than a &lt;a href=&quot;http://en.wikipedia.org/wiki/Relational_database_management_system&quot;&gt;relational&lt;/a&gt; database we don't need to worry about what 'tables' we will need to persist this data to the database or the relationships between records within those tables. In fact we only have 1 datatype in the application at all, the article:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  _id: 0,
  title: '',
  body: '',
  comments: [{
    person: '',
    comment: '',
    created_at: new Date()
  }],
  created_at: new Date()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are plenty of other document configurations we could've used. For example,
there's no notion of an article's authors and the 'created_at' field could
probably be omitted as the default 'Primary Key factory' that mongodb-native
uses generates time-based object ids. However, this datatype provides a good
foundation and we'll use a 'proper' date for simplicity.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It should be noted that one oft-reported issue with mongoDB is the size of the data on the disk. As we're dealing with a &lt;a href=&quot;http://en.wikipedia.org/wiki/Document-oriented_database&quot;&gt;document orientated&lt;/a&gt; database each and every record stores all the field-names with the data so there is no re-use. This means that it can often be more space-efficient to have properties such as 't', or 'b' rather than 'title' or 'body', however for fear of confusion I would avoid this unless truly required!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;The operations&lt;/h3&gt;

&lt;p&gt;There is a discrete set of operations (or things we want to achieve) that fall within the scope of this article, they are (in the order that we will tackle them):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new article.&lt;/li&gt;
&lt;li&gt;Show the list of all the articles.&lt;/li&gt;
&lt;li&gt;Show an individual article and its comments.&lt;/li&gt;
&lt;li&gt;Comment on an article&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we know what we're trying to achieve lets try and achieve that goal in a step-by-step fashion.&lt;/p&gt;

&lt;h3&gt;From small acorns do giant oak trees grow&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Well alright, fairly small blogging apps can grow!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In express a 'normal' application consists of a call to &lt;code&gt;configure&lt;/code&gt;, followed by a series of method calls that declare &lt;code&gt;routes&lt;/code&gt; and what happens to requests that match the route followed by a call to &lt;code&gt;listen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thus one of the simplest express applications could be written as follows:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/simple-express.js&gt;&lt;/p&gt;

&lt;p&gt;The above code declares a single &lt;code&gt;route&lt;/code&gt; that operates on &lt;code&gt;GET&lt;/code&gt; requests to the address &lt;code&gt;/&lt;/code&gt; from the browser and will just return a simple (non-HTML) text string and a response code of 200 to the client.&lt;/p&gt;

&lt;p&gt;Now, this is one of the simplest bits of application code one can write but
express is a framework which can automatically build out an application
template for you including picking a styling and templating engine.&lt;/p&gt;

&lt;p&gt;By executing the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir blog
cd blog
express -c stylus
npm install -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will have:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Made the blog directory for your project (might be a good idea to put this under source control)&lt;/li&gt;
&lt;li&gt;Asked express to generate an application using the jade template engine and the stylus css engine (jade is the default html template engine)&lt;/li&gt;
&lt;li&gt;Asked npm to download and locally install any dependencies required by this express application.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you were to now take simple-express.js an put it into the blog folder as 'app.js' you should be able to execute it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you browse to &lt;a href=&quot;http://localhost:3000&quot;&gt;localhost:3000&lt;/a&gt; you should see that old favourite 'Hello World!'. This file is the starting point of the blogging application and we shall build on it now :)&lt;/p&gt;

&lt;h2&gt;A chapter in which we build on our humble beginnings&lt;/h2&gt;

&lt;p&gt;Now that we have a fully working web server we should probably look at doing something with it. In this section we will learn how to use &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; to render our data and create forms to post the data back to the server, initially we will store this in memory.&lt;/p&gt;

&lt;p&gt;The layout of express applications is fairly familiar and is usually of the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;express                 /* The top level folder containing our app  */
|-- app.js              /* The application code itself              */
|-- lib                 /* Third-party dependencies                 */
|-- public              /* Publicly accessible resources            */
|   |-- images
|   `-- javascripts
|   `-- stylesheets 
`-- views               /* The templates for the 'views'            */
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Of providers and data&lt;/h3&gt;

&lt;p&gt;Because the intention of this article is to show how one might use a persistent approach in node.js we shall start with an abstraction: provider. These 'providers' are going to responsible for returning and updating the data. Initially we'll create a dummy in-memory version just to bootstrap us up and running, but then we'll move over to using a real persistence layer without changing the calling code.&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/articleprovider-memory.js&gt;&lt;/p&gt;

&lt;p&gt;If the above code is saved to a file named &lt;code&gt;articleprovider-memory.js&lt;/code&gt; in the same folder as the &lt;code&gt;app.js&lt;/code&gt; we created earlier and &lt;code&gt;app.js&lt;/code&gt; is modified to look as follows:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/app-simple.js&gt;&lt;/p&gt;

&lt;p&gt;If the app is re-run and you browse to &lt;a href=&quot;http://localhost:3000&quot;&gt;localhost:3000&lt;/a&gt; you will see the object structure of 3 blog posts that the memory provider starts off with, magic!&lt;/p&gt;

&lt;h3&gt;A view to a kill&lt;/h3&gt;

&lt;p&gt;Now we have a way of reading and storing data (patience, memory is only the beginning!) we'll want a way of displaying and creating the data properly. Initially we'll start by just providing an index view of all the blog articles. 
Fortunately the &lt;code&gt;express&lt;/code&gt; command we executed earlier to bootstrap our blogging application has already constructed a layout and an index page for us to use.  The layout file is Ok as it is, but we need to adjust the index page to look as follows: (be very careful about the indentation, that first lines should be up against the left-hand margin!):&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/views/index.jade&gt;&lt;/p&gt;

&lt;p&gt;Next change your &lt;code&gt;get('/')&lt;/code&gt; routing rule in your &lt;code&gt;app.js&lt;/code&gt; to be as follows:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/2/app.js#root&gt;&lt;/p&gt;

&lt;p&gt;Now you should be able to restart the server and browser to &lt;a href=&quot;http://localhost:3000&quot;&gt;localhost:3000&lt;/a&gt;. Et voila! We'll not win any design awards, but you should now see a list of 3 very 'functional' blog postings (don't worry we'll come back to the style in a moment).&lt;/p&gt;

&lt;p&gt;There are two important things to note that we've just done;&lt;/p&gt;

&lt;p&gt;The first is the change to our application's routing rules. What we've done is say that for any browser requests that come in to the route ('/') we should ask the data provider for all the articles it knows about (a future improvement might be 'the most recent 10 posts etc.') and to 'render' those returned articles using the &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; template &lt;code&gt;index.jade&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second is the usage of a 'layout' &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; file &lt;code&gt;layout.jade&lt;/code&gt;. This file will be used whenever a call to 'render' is made (unless over-ridden in that particular call) and provides a simple mechanism for common style across all page requests.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you're familiar with &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; then you may want to skip this section, otherwise please read-on! &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; is yet-another templating language, however this one is driven by the rule that 'Markup should be beautiful'. It provides a lightweight syntax for declaring markup with a bare minimum of typed characters.&lt;/p&gt;
  
  &lt;p&gt;Reading a &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; template is simple. The hierarchy of elements is expressed as indentation on the left hand-side; that is, everything that starts in a given column shares the same parent. Each line of &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; represents either a new element in the (eventual) HTML document or a function within &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; (which offers conditions and loops etc). Effectively &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; takes a JSON object and binds it to any &lt;code&gt;literal&lt;/code&gt; text in the &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; template, applies the rules that define &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; and then processes the resulting bag of stuff to produce a well-formed and valid HTML document of the specified DOCTYPE. (Yay!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As is probably obvious we need a little styling to be applied here, fortunately we can see that the default layout requests a stylesheet already:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/views/layout.jade&gt;&lt;/p&gt;

&lt;p&gt;Not only that, but the default stylesheet has already been populated for us in `public/styesheets/style.styl', however sadly the contents don't fully meet our requirements so lets change that file to look more like this:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/public/stylesheets/style.styl&gt;&lt;/p&gt;

&lt;p&gt;Again after restarting your app and browsing to &lt;a href=&quot;http://localhost:3000&quot;&gt;localhost:3000&lt;/a&gt; you should see the posts, with a little more style (admittedly not much more!).&lt;/p&gt;

&lt;p&gt;Something to notice here:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Stylus is to CSS as jade is to HTML. However reading stylus can be a little more complex as the hierarchy that is being described is really individual selectors. Lines that start at the same column are rules. Rules are applied to the hierarchy that they're found under, for example in the above stylus example, the bottom most line of stylus &lt;code&gt;background-color #ffa&lt;/code&gt; is equivalent to the CSS &lt;code&gt;#articles .article .body {background-color: #ffa;}&lt;/code&gt; this equivalence is due to the position of the start of this line relative to its parent lines :) (Easy really!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Great, so how do I make my first post?&lt;/h3&gt;

&lt;p&gt;Now we can view a list of blog posts it would be nice to have a simple form for making new posts and being re-directed back to the new list. To achieve this we'll need a new view (to let us create a post) and two new routes (one to accept the post data, the other to return the form).&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/views/blog_new.jade&gt;&lt;/p&gt;

&lt;p&gt;Add two new routes to app.js&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/2/app.js#blog&gt;&lt;/p&gt;

&lt;p&gt;Upon restarting your app if you browse to &lt;a href=&quot;http://localhost:3000/blog/new&quot;&gt;new post&lt;/a&gt; you will be able to create new blog articles, awesome! Looking at the post route we can see that upon successfully saving we redirect back to the index page where all the articles are displayed.&lt;/p&gt;

&lt;p&gt;If I've lost you along the way you can get a zip of this fully working (but non-persisting) blog here: &lt;a href=&quot;http://github.com/creationix/howtonode.org/tree/master/articles/express-mongodb/express-mongodb-1.zip&quot;&gt;Checkpoint 1&lt;/a&gt;. (please be aware that upon extracting the zip file you will need to re-perform the &lt;code&gt;npm install -d&lt;/code&gt; command within the folder to install the project dependencies.)&lt;/p&gt;

&lt;h3&gt;Adding permanent persistence to the mix&lt;/h3&gt;

&lt;p&gt;I promised that by the end of this article we'd be persisting our data across restarts of node, I've not yet delivered on this promise but now I will ..hopefully ;)&lt;/p&gt;

&lt;p&gt;To do this we need to install a dependency on &lt;a href=&quot;http://github.com/christkv/node-mongodb-native&quot;&gt;node-mongodb-native&lt;/a&gt;, which will allow our burgeoning application to access &lt;a href=&quot;http://www.mongodb.org&quot;&gt;mongoDB&lt;/a&gt;. Once again our friend npm comes to the rescue.  The dependencies of node applications can be expressed with a small JSON file in the root of the application &lt;code&gt;package.json&lt;/code&gt; the &lt;code&gt;npm&lt;/code&gt; tool understands how to read this file and install the dependencies on our behalf! (Yay! Go Tools!)&lt;/p&gt;

&lt;p&gt;To add a dependency on &lt;a href=&quot;http://www.mongodb.org&quot;&gt;mongoDB&lt;/a&gt; you need to make your &lt;code&gt;package.json&lt;/code&gt; look as follows:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/package.json&gt;&lt;/p&gt;

&lt;p&gt;Once you have saved the file you then just need to execute the following command to have &lt;code&gt;npm&lt;/code&gt; talk to the internet-tubes, download and then install the nodejs client for mongoDB.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to replace our old memory based data provider with one thats capable of using mongodb:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/articleprovider-mongodb.js&gt;&lt;/p&gt;

&lt;p&gt;We will also require a minor change to &lt;code&gt;app.js&lt;/code&gt; to use this new replacement provider.                                                                 &lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/app.js&gt;&lt;/p&gt;

&lt;p&gt;As you can see we had to make only the smallest of changes to move away from a temporary in-memory JSON store to the fully persistent and highly scalable mongoDB store.&lt;/p&gt;

&lt;p&gt;Let us pause for a second to take a look at two of the methods we've just written to access &lt;a href=&quot;http://www.mongodb.org&quot;&gt;mongoDB&lt;/a&gt;, it is perhaps not immediately obvious what is happening as there are a &lt;em&gt;lot&lt;/em&gt; of different things going on:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/articleprovider-mongodb-final.js#getCollection&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Declares the &lt;code&gt;getCollection&lt;/code&gt; method on the provider's &lt;code&gt;prototype&lt;/code&gt;. This method only accepts one mandatory argument, a function that will be called back with the the results upon completion (or error in the case of an error.)  This approach is a common idiom in &lt;a href=&quot;http://nodejs.org&quot;&gt;node&lt;/a&gt; but can be confusing to look at initially.&lt;/li&gt;
&lt;li&gt;In mongoDB there are no tables as such, (hence schema-less) but there are &lt;code&gt;collections&lt;/code&gt;. A &lt;code&gt;collection&lt;/code&gt; is a logical grouping of similar documents, but there are very few constraints on what types of document is put in these &lt;code&gt;collections&lt;/code&gt;. For our purpose we will have a single &lt;code&gt;collection&lt;/code&gt; called &lt;code&gt;articles&lt;/code&gt;. By calling &lt;code&gt;collection&lt;/code&gt; on the &lt;code&gt;db&lt;/code&gt; object and passing in our collection name &lt;code&gt;articles&lt;/code&gt; and a callback to deal with the response mongoDb will quietly create the collection from scratch and return it if there wasn't a collection of that name already or it will just return a reference to an existing collection. (This behaviour can actually be controlled by configuring mongoDB to be &lt;code&gt;strict&lt;/code&gt;.)&lt;/li&gt;
&lt;li&gt;If an error is passed back then we need to propagate it back to the previously passed callback.&lt;/li&gt;
&lt;li&gt;Otherwise pass the collection that came from &lt;a href=&quot;http://www.mongodb.org&quot;&gt;mongoDB&lt;/a&gt; back to the previously passed callback.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/articleprovider-mongodb-final.js#findById&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Declares the &lt;code&gt;findById&lt;/code&gt; method on the provider's &lt;code&gt;prototype&lt;/code&gt;. This method is going to take in one argument the &lt;code&gt;id&lt;/code&gt; of the article we wish to retrieve and a callback that will receive the data.&lt;/li&gt;
&lt;li&gt;We call the previously defined method &lt;code&gt;getCollection&lt;/code&gt; to retrieve our collection of records from the &lt;a href=&quot;http://www.mongodb.org&quot;&gt;mongoDB&lt;/a&gt; server, this method is asynchronous so we have to pass in the callback that will be called when it completes.&lt;/li&gt;
&lt;li&gt;If there was an error we give up here and pass it back to the callback.&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;else&lt;/code&gt; keyword, if I need to explain this I'm very impressed you've made it this far before falling asleep :)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;article_collection&lt;/code&gt; that is passed in the callback from the previous call to &lt;code&gt;getCollection(...)&lt;/code&gt; (think &lt;code&gt;FROM clause&lt;/code&gt;) exposes various methods for manipulating the data stored inside of the database. Here we've chosen to use &lt;code&gt;findOne&lt;/code&gt; which when given some criteria to search on will return the sole record that matches those criteria, but there are others such as &lt;code&gt;find&lt;/code&gt; which returns a &lt;code&gt;cursor&lt;/code&gt; that can be iterated over etc.
5a. This line also contains the &lt;code&gt;specification&lt;/code&gt; argument (think &lt;code&gt;criteria&lt;/code&gt; or &lt;code&gt;WHERE clause&lt;/code&gt;) used by the &lt;code&gt;findOne&lt;/code&gt; method, here we're using the passed in &lt;code&gt;id&lt;/code&gt; (which is a hexadecimal string ultimately coming from the browser so needs to be converted to the real type that our &lt;code&gt;_id&lt;/code&gt; fields are being stored as.) It basically states 'Find me the document in the collection who has a property named &lt;code&gt;_id&lt;/code&gt; and a value equivalent to an &lt;code&gt;ObjectId&lt;/code&gt; constructed with the passed in hexadecimal string.&lt;/li&gt;
&lt;li&gt;If there was an error we give up here and pass it back to the callback.&lt;/li&gt;
&lt;li&gt;Now we have the record we searched for in the database we pass it back to the callback we originally passed into the  (in our case this callback would do the page rendering.)&lt;/li&gt;
&lt;li&gt;,9,10 &amp;amp; 11. Meh! some brackets and stuff :)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope this explains a little better what is now going on inside our new provider code.&lt;/p&gt;

&lt;h2&gt;Adding comments&lt;/h2&gt;

&lt;p&gt;We're about halfway through the set of (4) operations we defined earlier but you'll be pleased to know that we've completed the majority of the work, everything from here on in is just minor improvements :)&lt;/p&gt;

&lt;p&gt;Just to re-cap over we've done so far:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new article.&lt;/li&gt;
&lt;li&gt;Show the list of all the articles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and we still need to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Show an individual article and its comments.&lt;/li&gt;
&lt;li&gt;Comment on an article.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, lets crack on!&lt;/p&gt;

&lt;h3&gt;Showing an individual article and its comments&lt;/h3&gt;

&lt;p&gt;Displaying an individual article isn't much different to displaying one of the articles within the list of articles that we've already done, so we'll pinch some of that template. In addition to displaying the title and body though we will also want to render all the existing comments and provide a form for readers to add their own comment.&lt;/p&gt;

&lt;p&gt;We'll also need a new route to allow the article to be referenced by a URL and we'll need to tweak the rendered list so our titles on the list can now be hyperlinks to the real article's own page.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One thing that we should touch on here is &lt;a href=&quot;http://en.wikipedia.org/wiki/Surrogate_key&quot;&gt;surrogate&lt;/a&gt; vs &lt;a href=&quot;http://en.wikipedia.org/wiki/Natural_key&quot;&gt;natural&lt;/a&gt; keys. It seems that with &lt;a href=&quot;http://en.wikipedia.org/wiki/Document-oriented_database&quot;&gt;document orientated&lt;/a&gt; databases it is encouraged where possible to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Natural_key&quot;&gt;natural&lt;/a&gt; keys however in this case we've not got any sensible one to use (&lt;em&gt;unless you fancy title to be unique enough you crazy fool&lt;/em&gt;.)&lt;/p&gt;
  
  &lt;p&gt;Normally this wouldn't be that much of an issue as &lt;a href=&quot;http://en.wikipedia.org/wiki/Surrogate_key&quot;&gt;surrogate&lt;/a&gt; keys are usually fairly sane things like auto-incremented integers, unfortunately the &lt;em&gt;default&lt;/em&gt; primary key provider that we're using generates universally unique (and universally opaque) binary objects / large numbers in byte arrays. These 'numbers' don't really translate well into HTML so we need to use some utility methods on the &lt;code&gt;ObjectId&lt;/code&gt; class to translate to and from a hex-string into the id that can located on the database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We need to update the index page's view:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/views/index-final.jade&gt;&lt;/p&gt;

&lt;p&gt;The page that shows a single blog entry:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/views/blog_show-final.jade&gt;&lt;/p&gt;

&lt;p&gt;The stylesheet that renders these pages:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/public/stylesheets/style-final.styl&gt;&lt;/p&gt;

&lt;p&gt;We also need to add a new rule to &lt;code&gt;app.js&lt;/code&gt; for serving these view requests:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/app-final.js#getBlogs&gt;&lt;/p&gt;

&lt;p&gt;Now if you browse to &lt;a href=&quot;http://localhost:3000&quot;&gt;localhost:3000&lt;/a&gt; the previous articles you added (click &lt;a href=&quot;http://localhost:3000/blog/new&quot;&gt;new post&lt;/a&gt; to create a new one if you have none) should now be visible (apologies for the lack of style once again!) The titles of these articles are now hyperlinks to individual pages that display the article in all itself original glory, comments and all (but alas no comments have been added so far.)&lt;/p&gt;

&lt;h3&gt;Comment on an article&lt;/h3&gt;

&lt;p&gt;Commenting on an article is a simple extension upon everything we've already gone through, the only minor complexity is in the style of 'update' we use on the back-end.&lt;/p&gt;

&lt;p&gt;Transactions are largely non-existent in mongoDB but there are several approaches to achieving atomicity in certain scenarios. For comment addition we're going to use a &lt;code&gt;$push&lt;/code&gt; update that allows us to add an element to the end of an array property of an existing document atomically    (which is absolutely perfect for our needs!)&lt;/p&gt;

&lt;p&gt;All the views/stylesheet changes we need were made in the last set of changes but we need to add in a new route to handle the POST:&lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/app-final.js#addComment&gt;&lt;/p&gt;

&lt;p&gt;and a method to our provider to make the change on the persistent store:                                                                           &lt;/p&gt;

&lt;p&gt;&lt;express-mongodb/articleprovider-mongodb-final.js#addCommentToArticle&gt;&lt;/p&gt;

&lt;p&gt;After restarting and browsing to a blog article (any one will do) you should now be able to add comments to your articles ad-infinitum. How easy was that?&lt;/p&gt;

&lt;p&gt;If you've made it to this point without any issues then congratulations! Otherwise this &lt;a href=&quot;http://github.com/creationix/howtonode.org/tree/master/articles/express-mongodb/express-mongodb-2.zip&quot;&gt;Checkpoint 2&lt;/a&gt; archive should contain all the code as I have it now!&lt;/p&gt;

&lt;h2&gt;Where next&lt;/h2&gt;

&lt;p&gt;Clearly this blogging application is very rough and ready (there is no style to speak of for starters) but there are several clear directions that it could take, depending on feedback I'll either leave these as exercises for the reader or provide additional tutorials over time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markup language support (HTML, Markdown etc. in the posts and comments)&lt;/li&gt;
&lt;li&gt;Security, authentication etc.&lt;/li&gt;
&lt;li&gt;An administrative interface&lt;/li&gt;
&lt;li&gt;Multiple blog-support.&lt;/li&gt;
&lt;li&gt;Decent styling &amp;lt;g&amp;gt; (inc. themes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this helps at least someone out there get to grips with how you might start actually writing web apps with &lt;a href=&quot;http://nodejs.org&quot;&gt;node&lt;/a&gt;, &lt;a href=&quot;http://github.com/visionmedia/express&quot;&gt;express&lt;/a&gt; and &lt;a href=&quot;http://www.mongodb.org&quot;&gt;mongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good luck! :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fin&lt;/strong&gt;.&lt;/p&gt;</description><author>ciaranj@gmail.com (Ciaran Jessup)</author></item><item><title>Control Flow in Node Part III</title><link>https://howtonode.org/control-flow-part-iii</link><comments>https://howtonode.org/control-flow-part-iii#disqus_thread</comments><pubDate>Mon, 15 Feb 2010 09:21:11 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/control-flow-part-iii</guid><description>&lt;p&gt;While working on my quest to make async programming easier, or at least bearable, I discovered that often in programming you work with a set of data and want to do things on all the items in that set at once.&lt;/p&gt;

&lt;p&gt;This article will explain a way to do async &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; functions where the callback to &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt; is an async operation itself.  I will compare the simple task of reading all the files in a directory into memory in both sync and async style programming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; This article has been heavily updated to use callbacks and new node APIs.  See the past revisions in the panel to the right for the original Promise/Continuable based article.&lt;/p&gt;

&lt;h2&gt;The Blocking Way&lt;/h2&gt;

&lt;p&gt;In a synchronous programming language where I/O is blocking, this task is very straightforward and can be done in node as long as you understand the consequences.  Node exposes &lt;code&gt;Sync&lt;/code&gt; versions of many of it's I/O functions for the special cases where you don't care about performance and would rather have the much easier coding style (like server startup).&lt;/p&gt;

&lt;p&gt;For this example we will need three methods from the &lt;code&gt;fs&lt;/code&gt; package.  We need &lt;code&gt;readdir&lt;/code&gt; to get a listing of files in a directory, &lt;code&gt;stat&lt;/code&gt; to test the results (we only want files, not directories), and &lt;code&gt;readFile&lt;/code&gt; to read the contents to memory.&lt;/p&gt;

&lt;p&gt;Solving the problem is very straightforward using sync style coding:&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-iii/sync-loaddir.js&gt;&lt;/p&gt;

&lt;p&gt;Since the commands are sync we are able to use the built in &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; from &lt;code&gt;Array.prototype&lt;/code&gt; on the array returned by &lt;code&gt;fs.readdirSync&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is extremely easy to code, but has dangerous side effects.  The program waits while waiting for the blocking &lt;code&gt;fs&lt;/code&gt; operations to finish.  Since CPUs are very fast compared to other hardware (like hard-drives), then the cpu is wasted when it could be busy working on requests for another client if this was part of a hot running event loop.&lt;/p&gt;

&lt;p&gt;Obviously this is not optimal.  Nothing is done in parallel.  Many CPU cycles are wasted.&lt;/p&gt;

&lt;h2&gt;The Non-Blocking Way&lt;/h2&gt;

&lt;p&gt;They say that in computer science there is always a give and take when comparing different algorithms.  The pro to synchronous coding style is that it's very easy to read and write.  The con is that it's very inefficient.  That's why most programming languages need threads to achieve any level of concurrency, but node is able to do quite a bit on a single threaded platform.&lt;/p&gt;

&lt;p&gt;(Yes I'm aware of coroutines, but in JavaScript where everything is so mutable, they don't work well and are about the same as multi-threading complexity wise. See &lt;a href=&quot;http://groups.google.com/group/nodejs/search?group=nodejs&amp;amp;q=wait&quot;&gt;the archives&lt;/a&gt; for information on Node's experiment with this idea)&lt;/p&gt;

&lt;p&gt;To make the comparison simple, I'll do the same thing, but using non-blocking apis and callbacks. An initial implementation of our &lt;code&gt;loaddir&lt;/code&gt; function would be this:&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-iii/async-loaddir.js&gt;&lt;/p&gt;

&lt;p&gt;Yikes! That is almost four times as long and indented several times deeper.  I know it's a trade-off, but at this point I'm thinking I'll return to &lt;a href=&quot;http://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt; with &lt;a href=&quot;http://unicorn.bogomips.org/&quot;&gt;clusters of servers&lt;/a&gt; on the backend to handle concurrency.&lt;/p&gt;

&lt;h3&gt;Map and Filter Helpers for Async Code&lt;/h3&gt;

&lt;p&gt;Since map and filter are common tasks in programming and that's what we really want here, let's write some helpers to make this beast of code a little smaller.&lt;/p&gt;

&lt;p&gt;Here is a &lt;code&gt;map&lt;/code&gt; helper. It takes an array, a filter function, and a callback.  The filter function itself it an async function that takes a callback.&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-iii/helpers.js#map&gt;&lt;/p&gt;

&lt;p&gt;And here is a filter helper.  It works the same, but removes items that don't pass the filter.&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-iii/helpers.js#filter&gt;&lt;/p&gt;

&lt;p&gt;Now with our helpers, let's try the async version again to see how much shorter we can make it:&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-iii/async-loaddir2.js&gt;&lt;/p&gt;

&lt;p&gt;That code is much shorter and easier to read.  Since &lt;code&gt;fs.readFile&lt;/code&gt; and our &lt;code&gt;callback&lt;/code&gt; are themselves async functions following the node convention, we can use them directly as the second and third arguments to the &lt;code&gt;helpers.map&lt;/code&gt; call.  There is benefit in this common pattern.&lt;/p&gt;

&lt;p&gt;Also, now that the code is executing in parallel, we can issue a stat call for all the files in a directory at once and then collect the results as they come in.  But with this version, not a single &lt;code&gt;readFile&lt;/code&gt; can execute until all the &lt;code&gt;stat&lt;/code&gt; calls finish.  In an ideal world, the program would start reading the file as soon as it knows it's a file and not a directory.&lt;/p&gt;

&lt;h3&gt;Combined Filter and Map Helper&lt;/h3&gt;

&lt;p&gt;Often you will want to filter and then map on the same data set.  Let's make a combined &lt;code&gt;filterMap&lt;/code&gt; helper and see how it helps:&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-iii/helpers.js#filtermap&gt;&lt;/p&gt;

&lt;p&gt;Now with this combined helper, let's write a truly parallel &lt;code&gt;loaddir&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-iii/async-loaddir3.js&gt;&lt;/p&gt;

&lt;p&gt;Here we will issue all the &lt;code&gt;stat&lt;/code&gt; commands at once, and as they come back, check to see if it's a file and if so, then fire off the &lt;code&gt;readFile&lt;/code&gt; command right away.  If not we'll output the result of &lt;code&gt;undefined&lt;/code&gt; signifying to &lt;code&gt;filter_map&lt;/code&gt; that we're not interested in that entry.  When the &lt;code&gt;readFile&lt;/code&gt; command comes back we'll send the file contents to the helper.  When all the items have either sent &lt;code&gt;undefined&lt;/code&gt; or some text, then the helper knows it's done and gives us the result.&lt;/p&gt;

&lt;h2&gt;Conclusion and Source Code&lt;/h2&gt;

&lt;p&gt;While it is a tradeoff in code complexity vs performance, with a little thinking and some good libraries, we can make async programming manageable enough to be understandable while taking full advantage of the parallel nature of non-blocking IO in node.&lt;/p&gt;

&lt;p&gt;All source code used in these examples is linked to on the right side of the page or in the upper-right corner of the code snippets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UDATE&lt;/strong&gt; I've since made a general purpose callback library called &lt;a href=&quot;/step-of-conductor&quot;&gt;Step&lt;/a&gt;.  While it doesn't include map and filter helpers, it does have the more useful parallel and group helpers.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Prototypal Inheritance</title><link>https://howtonode.org/prototypical-inheritance</link><comments>https://howtonode.org/prototypical-inheritance#disqus_thread</comments><pubDate>Tue, 09 Feb 2010 13:44:09 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/prototypical-inheritance</guid><description>&lt;p&gt;In almost all modern programming languages we use the concept of Object Oriented Programming (OOP) to help manage the complexity of today's software.  The biggest challenge in modern software is in fact managing the complexity of it.&lt;/p&gt;

&lt;p&gt;Most languages do this with a variant OOP called Classical OOP.  This is the one you see in Java, C#, C++, PHP, Ruby, and Python.  It has the idea that classes should be separate from instances.  Classes hold behavior and instances hold data.&lt;/p&gt;

&lt;p&gt;While this is a great abstraction, I would like to experiment with other ideas.  Prototypal inheritance gets rid of the distinction between class and instance, between constructor and method.  It's just objects with inherited and local properties.&lt;/p&gt;

&lt;h2&gt;So what does JavaScript have?&lt;/h2&gt;

&lt;p&gt;From what I hear (I wasn't there at the time), JavaScript was initially a prototypal inheritance system.  It was super simple like the rest of the language.  But then Netscape decided to make it be more like Java and added the idea of constructors to the language. Hence pseudo classes were born.&lt;/p&gt;

&lt;h3&gt;Classical OOP&lt;/h3&gt;

&lt;p&gt;&lt;prototypal-inheritance/classical.js*&gt;&lt;/p&gt;

&lt;p&gt;Here we have a class like object &lt;code&gt;Person&lt;/code&gt;.  Actually it's just a regular JavaScript function, but that's how it works, there are no real classes.  There are many ways to emulate classical OOP, but the most straightforward and the one designed into the language is this pattern.  Only functions can have prototypes and prototypes hold instance methods.  Then instances are &lt;code&gt;new&lt;/code&gt; instances of the function which is now dubbed a constructor.&lt;/p&gt;

&lt;h3&gt;Prototypal OOP&lt;/h3&gt;

&lt;p&gt;I don't like the &lt;code&gt;new&lt;/code&gt; keyword, it overloads the meaning of functions and is dangerous.  If we were to say &lt;code&gt;frank = Person(&quot;Frank&quot;)&lt;/code&gt;, then &lt;code&gt;this&lt;/code&gt; inside the function would now be the global &lt;code&gt;this&lt;/code&gt; object, not the new instance! The constructor would be overriding all sorts of global variables inadvertently.  Also bad things happen if you &lt;code&gt;return&lt;/code&gt; from a constructor function.&lt;/p&gt;

&lt;p&gt;Instead try this on for size:&lt;/p&gt;

&lt;p&gt;&lt;prototypal-inheritance/prototypal.js#intro-to-style*&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object.create&lt;/code&gt; is new to JavaScript (it's part of &lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-262.htm&quot;&gt;ES5&lt;/a&gt;), but &lt;a href=&quot;http://wiki.github.com/ry/node/ecma-5mozilla-features-implemented-in-v8&quot;&gt;node supports it&lt;/a&gt; so we can safely use it.  This creates a new object that inherits from another object.  &lt;code&gt;Object.create&lt;/code&gt; actually can set properties right away, but the syntax is rather verbose:&lt;/p&gt;

&lt;p&gt;&lt;prototypal-inheritance/prototypal.js#object-create*&gt;&lt;/p&gt;

&lt;p&gt;There is more you can set, but &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;enumerable&lt;/code&gt; are the interesting ones.  What &lt;code&gt;enumerable&lt;/code&gt; does is tell operators like &lt;code&gt;for ... in&lt;/code&gt; if they should enumerate over that key.  When you set a property directly, it's enumerable property is set to &lt;code&gt;true&lt;/code&gt; automatically.  &lt;code&gt;Object.create&lt;/code&gt; actually defaults to false, so we could write this as:&lt;/p&gt;

&lt;p&gt;&lt;prototypal-inheritance/prototypal.js#object-create-ii*&gt;&lt;/p&gt;

&lt;p&gt;Just make sure you understand that most functions like &lt;code&gt;sys.inspect&lt;/code&gt; and &lt;code&gt;JSON.stringify&lt;/code&gt; won't show the name property of frank now that it's hidden.  If you pass &lt;code&gt;true&lt;/code&gt; as the second argument to &lt;code&gt;sys.inspect&lt;/code&gt;, it will show hidden properties using &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;prototypal-inheritance/prototypal.js#object-create-iii*&gt;&lt;/p&gt;

&lt;h2&gt;Using &lt;code&gt;Object.spawn&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;While Object.create is nice, it's still too verbose for my taste.  On my projects I made a new function called &lt;code&gt;Object.spawn&lt;/code&gt;.  Here is the source for reference:&lt;/p&gt;

&lt;p&gt;&lt;prototypal-inheritance/spawn.js#object-spawn*&gt;&lt;/p&gt;

&lt;p&gt;Then you can create hierarchies of objects easily:&lt;/p&gt;

&lt;p&gt;&lt;prototypal-inheritance/spawn.js#animals*&gt;&lt;/p&gt;

&lt;h2&gt;Using &lt;code&gt;Object.prototype.spawn&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Now that node supports &lt;code&gt;Object.defineProperty&lt;/code&gt;, we can add methods to &lt;code&gt;Object.prototype&lt;/code&gt; that are not enumerable and thus don't break stuff.&lt;/p&gt;

&lt;p&gt;&lt;prototypal-inheritance/spawn.js#proto-spawn*&gt;&lt;/p&gt;

&lt;p&gt;Which is used as:&lt;/p&gt;

&lt;p&gt;&lt;prototypal-inheritance/spawn.js#animals2*&gt;&lt;/p&gt;

&lt;h2&gt;Where do we go from here?&lt;/h2&gt;

&lt;p&gt;I'm not sure if this is a good idea or not.  You give up a lot by not having constructor functions that initialize state of objects.  It could be baked into the &lt;code&gt;Object.spawn&lt;/code&gt; method, but then you're dealing more with classical OOP emulations.&lt;/p&gt;

&lt;p&gt;I plan on using this technique with some upcoming projects. I'm not sure what will come of it.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Using HAML templates in JavaScript</title><link>https://howtonode.org/haml-for-javascript</link><comments>https://howtonode.org/haml-for-javascript#disqus_thread</comments><pubDate>Sat, 06 Feb 2010 23:06:39 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/haml-for-javascript</guid><description>&lt;p&gt;One of my favorite libraries when I was doing &lt;a href=&quot;http://ruby-lang.org/&quot;&gt;ruby&lt;/a&gt; development was the HTML templating language &lt;a href=&quot;http://haml-lang.com/&quot;&gt;HAML&lt;/a&gt;.  For those of you who haven't yet been enlightened, it's an alternate syntax for XML that results in a &lt;strong&gt;lot&lt;/strong&gt; less code to write the same thing.&lt;/p&gt;

&lt;p&gt;When I switched to primarily JavaScript, I missed HAML so much I wrote two ports of it.  One is called &lt;a href=&quot;http://github.com/creationix/jquery-haml&quot;&gt;jquery-haml&lt;/a&gt;.  It's a dom-building library with some really advanced DOM integration tricks.  The other is &lt;a href=&quot;http://github.com/creationix/haml-js&quot;&gt;haml-js&lt;/a&gt;.  It's a text-to-text compiler that translates HAML code to HTML, perfect for node based websites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; This article was left as is mostly, current development resides in &lt;a href=&quot;http://jade-lang.com&quot;&gt;jade&lt;/a&gt; and &lt;a href=&quot;http://github.com/creationix/grain&quot;&gt;grain&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Using &lt;code&gt;haml-js&lt;/code&gt; in a node website&lt;/h2&gt;

&lt;p&gt;Using &lt;a href=&quot;http://github.com/creationix/haml-js&quot;&gt;haml-js&lt;/a&gt; is pretty straightforward.  First, you install &lt;code&gt;haml-js&lt;/code&gt; as a library for use in node.  The full docs are &lt;a href=&quot;http://nodejs.org/api.html#_modules&quot;&gt;here&lt;/a&gt;, but I'll show how I set up my node libraries.&lt;/p&gt;

&lt;h3&gt;Installing &lt;code&gt;haml-js&lt;/code&gt; in node&lt;/h3&gt;

&lt;p&gt;There wasn't a standard package manager for node when this was written, but it's not hard to install a package once you've done it a time or two.  I like to use git for all GitHub based libraries so that I can update any library by issuing a pull command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tim@TimBook:~$ mkdir Code
tim@TimBook:~$ cd Code/
tim@TimBook:~/Code$ git clone git://github.com/creationix/haml-js.git
Initialized empty Git repository in /Users/tim/Code/haml-js/.git/
remote: Counting objects: 311, done.
remote: Compressing objects: 100% (278/278), done.
remote: Total 311 (delta 161), reused 0 (delta 0)
Receiving objects: 100% (311/311), 47.73 KiB, done.
Resolving deltas: 100% (161/161), done.
tim@TimBook:~$ mkdir ~/.node_libraries
tim@TimBook:~$ cd ~/.node_libraries
tim@TimBook:~/.node_libraries$ ln -s ~/Code/haml-js/lib/* ./
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically I made a folder for code clones, another one for node libraries, and linked the two up so node can find the code.&lt;/p&gt;

&lt;h2&gt;Checking the install&lt;/h2&gt;

&lt;p&gt;To test if it's installed, open a &lt;code&gt;node&lt;/code&gt; terminal and try to &lt;code&gt;require&lt;/code&gt; it. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tim@TimBook:~$ node
Type '.help' for options.
node&amp;gt; var Haml = require('haml');
node&amp;gt; Haml.render('.classy Hello World')
'&amp;lt;div class=&quot;classy&quot;&amp;gt;Hello World&amp;lt;/div&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, it's working!  If this is not working for you, the &lt;a href=&quot;http://groups.google.com/group/nodejs&quot;&gt;node mailing list&lt;/a&gt; is a really friendly place if you need help getting this setup.&lt;/p&gt;

&lt;h2&gt;A simple HAML based site&lt;/h2&gt;

&lt;p&gt;As you saw in the last section, you can test it from a &lt;code&gt;node&lt;/code&gt; session, but let's make a whole program with partials, loops and conditionals just for fun.&lt;/p&gt;

&lt;p&gt;Note that I'm using blocking I/O for these examples to simplify the examples and focus on the haml.  If you were to use this code in the request loop of a running server, be sure you converted it to use the non-blocking versions.&lt;/p&gt;

&lt;h3&gt;Layout template&lt;/h3&gt;

&lt;p&gt;First let's make our layout template, we'll save it as &lt;code&gt;layout.haml&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;haml-for-javascript/layout.haml&gt;&lt;/p&gt;

&lt;h3&gt;Start of Program&lt;/h3&gt;

&lt;p&gt;Now we'll write a short node program to render it:&lt;/p&gt;

&lt;p&gt;&lt;haml-for-javascript/step1.js&gt;&lt;/p&gt;

&lt;p&gt;This program will output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Hello Node&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Subpage&lt;/h3&gt;

&lt;p&gt;Usually you'll want another template for your actual pages and just share the common layout between them.   So we'll make an actual page with a little logic in it and save it as &lt;code&gt;users.haml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;haml-for-javascript/users.haml&gt;&lt;/p&gt;

&lt;p&gt;There are two branches in this template.  If the users list is empty, then a static message will be shown; if not, then each user will be shown as a list item.&lt;/p&gt;

&lt;p&gt;Here is how we modify the code to use this page:&lt;/p&gt;

&lt;p&gt;&lt;haml-for-javascript/step2.js&gt;&lt;/p&gt;

&lt;p&gt;And here is the output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;System Users&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Users&amp;lt;/h1&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;Tim&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Sally&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;George&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;James&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Partials&lt;/h3&gt;

&lt;p&gt;Ok, now that we know how to make layout templates by passing the result of one template as a variable to another, let's learn how to do partials.  Partials are pieces of templates that are shared between several pages.&lt;/p&gt;

&lt;p&gt;Here is the data we want to render:&lt;/p&gt;

&lt;p&gt;&lt;haml-for-javascript/data.js&gt;&lt;/p&gt;

&lt;p&gt;First we'll make a partial to render each link by itself and save it as &lt;code&gt;link.haml&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;haml-for-javascript/link.haml&gt;&lt;/p&gt;

&lt;p&gt;Then we'll make a page to render the links and save it as &lt;code&gt;links.haml&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;haml-for-javascript/links.haml&gt;&lt;/p&gt;

&lt;p&gt;Since partials aren't built into &lt;a href=&quot;http://github.com/creationix/haml-js&quot;&gt;haml-js&lt;/a&gt;, then we'll have to implement it in our framework.  But don't worry, it's not hard.  First we want to load and compile the templates. And this time we'll do it right using non-blocking I/O.  This code snippet will load the three haml files and compile them.  Once all three finish, the next step is called.&lt;/p&gt;

&lt;p&gt;&lt;haml-for-javascript/step3.js#setup&gt;&lt;/p&gt;

&lt;p&gt;Now we can make a render function that knows how to load the saved, compiled templates:&lt;/p&gt;

&lt;p&gt;&lt;haml-for-javascript/step3.js#render&gt;&lt;/p&gt;

&lt;p&gt;We're all set to define the &lt;code&gt;render_page&lt;/code&gt; function referenced in the parallel loading part:&lt;/p&gt;

&lt;p&gt;&lt;haml-for-javascript/step3.js#renderpage&gt;&lt;/p&gt;

&lt;h3&gt;Source Code&lt;/h3&gt;

&lt;p&gt;You can find the [source code][] of the examples in the panel to the right.&lt;/p&gt;

&lt;p&gt;Also, this blog itself is powered by &lt;code&gt;haml-js&lt;/code&gt;.  You can see the &lt;a href=&quot;http://github.com/creationix/howtonode.org/tree/master/skin/&quot;&gt;templates here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Using jquery-haml&lt;/h2&gt;

&lt;p&gt;My other HAML project, &lt;a href=&quot;http://github.com/creationix/jquery-haml&quot;&gt;jquery-haml&lt;/a&gt;, is a different beast altogether.  Instead of parsing real HAML syntax and generating HTML text, it takes a JSON structure and dom-builds from it.  There is nothing stopping you from using the text-to-text &lt;code&gt;haml-js&lt;/code&gt; in a browser and inserting it into the DOM using &lt;code&gt;innerHTML&lt;/code&gt;, but you can't get at the nodes as they're created because it's all done behind closed doors by the browser.&lt;/p&gt;

&lt;p&gt;Here is a simple example of the &lt;code&gt;jquery-haml&lt;/code&gt; syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&quot;.profile&quot;,
  [&quot;.left.column&quot;,
    [&quot;#date&quot;, print_date() ],
    [&quot;#address&quot;, curent_user.address ]
  ],
  [&quot;.right.column&quot;,
    [&quot;#email&quot;, current_user.email ],
    [&quot;#bio&quot;, current_user.bio ]
  ]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is nothing special here except we've taken the HAML syntax and fit it into proper JSON syntax.&lt;/p&gt;

&lt;p&gt;How about this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&quot;%div&quot;, {style: &quot;width:260px; margin:15px;&quot;, $:{
  slider: [{value: 60}]
}}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a div element, sets the style on it, and then calls &lt;code&gt;$.fn.slider&lt;/code&gt; on it!  We didn't have to give it a unique id and then search for it later with something like &lt;code&gt;$(&quot;#my_id&quot;).slider({value: 60})&lt;/code&gt;, the dom-builder library did it for us right after creating the node.&lt;/p&gt;

&lt;p&gt;A full depth tutorial on this library could go on for pages, but this should be enough to whet your appetite.  See the source of the &lt;a href=&quot;http://static.creationix.com/jquery-haml/examples&quot;&gt;sample page&lt;/a&gt; for some more ideas.  But since this is more of an easy macro system for programmatically dom-building, then you have full control over every step.  I've written entire apps using just nested &lt;code&gt;jquery-haml&lt;/code&gt; expressions and closures for data storage.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Deploying Node.js With Upstart and Monit</title><link>https://howtonode.org/deploying-node-upstart-monit</link><comments>https://howtonode.org/deploying-node-upstart-monit#disqus_thread</comments><pubDate>Fri, 05 Feb 2010 15:03:12 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/deploying-node-upstart-monit</guid><description>&lt;p&gt;&lt;strong&gt;So you like Node.js? You want to deploy it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If I heard two &quot;Yes&quot;'s, then you are in the some boat as me, and being in that boat feels really really vulnerable. Like the kind of vulnerable you would feel if you were trapped in a cage with lions. And here is why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If Node.js decides to crash, you are screwed.&lt;/li&gt;
&lt;li&gt;If the above isn't enough for you, then you may need to reconsider.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two well-known technologies that can save us from this mess, and you'd better believe we're going to use them!&lt;/p&gt;

&lt;h2&gt;Problems&lt;/h2&gt;

&lt;p&gt;The first problem we will get thrown by, is the fact that we cannot run Node.js as a daemon. A daemon, for the unaware, is a child process that spawns from a process, leaving the parent to die. Tragic story I know, but this allows things to run in the background. But why is this a problem? Well if &lt;a href=&quot;http://static01.vanzonneveld.net:8080/techblog/article/run_nodejs_as_a_service_on_ubuntu_karmic/&quot;&gt;Kevin's blog post&lt;/a&gt; isn't enough for you, it essentially allows one to separate node from any form of interface, meaning terminal doesn't have stay open all day. I highly recommend you pause now and read Kevin's material, as it will expand more on daemonizing the node process.&lt;/p&gt;

&lt;h2&gt;upstart&lt;/h2&gt;

&lt;p&gt;As Kevin stated in his blog, the first tool we are going to look at is &lt;a href=&quot;http://upstart.ubuntu.com/&quot;&gt;upstart&lt;/a&gt;, which will allow us to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run Node.js as a daemon&lt;/li&gt;
&lt;li&gt;Provide an easy set of commands for stop / starting our Node.js application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most linux distributions that have a decent package manager which will allow you to install &lt;a href=&quot;http://upstart.ubuntu.com/&quot;&gt;upstart&lt;/a&gt; the easy way. On debian systems this is usually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!sh
sudo apt-get install upstart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you're running the latest Ubuntu, you've got it built in already.&lt;/p&gt;

&lt;p&gt;Otherwise you will need to configure and compile from source, and this blog post will not go off topic! So we resume...&lt;/p&gt;

&lt;p&gt;We now will want to configure &lt;a href=&quot;http://upstart.ubuntu.com/&quot;&gt;upstart&lt;/a&gt;, and I am shamelessly borrowing Kevin's example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!upstart
description &quot;node.js server&quot;
author      &quot;joe&quot;

start on startup
stop on shutdown

script
    export HOME=&quot;/root&quot;

    echo $$ &amp;gt; /var/run/yourprogram.pid
    exec sudo -u username /usr/local/bin/node /where/yourprogram.js &amp;gt;&amp;gt; /var/log/yourprogram.sys.log 2&amp;gt;&amp;amp;1
end script

pre-start script
    # Date format same as (new Date()).toISOString() for consistency
    echo &quot;[`date -u +%Y-%m-%dT%T.%3NZ`] (sys) Starting&quot; &amp;gt;&amp;gt; /var/log/yourprogram.sys.log
end script

pre-stop script
    rm /var/run/yourprogram.pid
    echo &quot;[`date -u +%Y-%m-%dT%T.%3NZ`] (sys) Stopping&quot; &amp;gt;&amp;gt; /var/log/yourprogram.sys.log
end script
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will need to replace &lt;code&gt;username&lt;/code&gt; with the user you want to run node as, &lt;code&gt;/where/yourprogram.js&lt;/code&gt; with the location of your application, &lt;code&gt;/var/run/yourprogram.pid&lt;/code&gt; with your program's pid file and &lt;code&gt;/var/log/yourprogram.sys.log&lt;/code&gt; with the location of your log file. You can then save this file to &lt;code&gt;/etc/init/yourprogram.conf&lt;/code&gt; for later use. (Dont't forget to make it executable!) If you are using an older linux distribution, you may need to save the file to &lt;code&gt;/etc/event.d/yourprogram&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using your program is now a cinch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!sh
start yourprogram
stop yourprogram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now node will automatically start at boot and log output to &lt;code&gt;/var/log/node.log&lt;/code&gt;. But I assumed you read all that on Kevin's blog, right? Moving on...&lt;/p&gt;

&lt;h2&gt;The real problem&lt;/h2&gt;

&lt;p&gt;Turning your application into a daemon isn't enough. A daemon can still crash, and those lions are getting awfully close. We need a tool that keeps an eye out for any falls our node instances may have. When something crashes our server, we need that tool to take evasive action. Also that tool should be capable of expanding its reach to any other services our app may need; such as databases and nginx instances. Thankfully this isn't taken lightly by most, and several helpful tools that fit our description do exist.&lt;/p&gt;

&lt;h2&gt;monit&lt;/h2&gt;

&lt;p&gt;Now that we have our application in a easy to manage form, we need to look at the real issue we are facing. What happens when Node.js crashes? Fortunately for us mortals someone has done most of the hard work for us, and blessed us with the &lt;a href=&quot;http://mmonit.com/monit/&quot;&gt;monit&lt;/a&gt; utility. Essentially monit is a monitoring tool, which you configure tests that will be evaluated at certain intervals. If one of the tests fails, then it will take action depending on the rules you assign to it.&lt;/p&gt;

&lt;p&gt;I'm not going to tell you how to install it, &lt;a href=&quot;http://mmonit.com/monit/&quot;&gt;their website&lt;/a&gt; has plenty on information for that, but here instead is an example config file designed for our upstart node daemon will made earlier:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!monit
set logfile /var/log/monit.log

check process nodejs with pidfile &quot;/var/run/yourprogram.pid&quot;
    start program = &quot;/sbin/start yourprogram&quot;
    stop program  = &quot;/sbin/stop yourprogram&quot;
    if failed port 8000 protocol HTTP
        request /
        with timeout 10 seconds
        then restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can save this in &lt;code&gt;/etc/monit/monitrc&lt;/code&gt;. Here is the break down:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set logfile /var/log/monit.log

check process nodejs with pidfile &quot;/var/run/yourprogram.pid&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will tell monit to log all output to &lt;code&gt;/var/log/monit.log&lt;/code&gt;, and it also gives our node instance a name and location. I am assuming monit will be running on the same machine as your node app, so we will need to listen on 127.0.0.1 . If you wanted to run monit on another box, you most certainly can, in fact I recommend have multiple instances of monit running in different locations. You just have to ensure that monit is listening on the correct IP address, otherwise monit is rendered useless.
The next part is the vital part, which defines how we will test for failures:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!monit
start program = &quot;/sbin/start yourprogram&quot;
stop program  = &quot;/sbin/stop yourprogram&quot;
if failed port 8000 protocol HTTP
    request /
    with timeout 10 seconds
    then restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first two lines should be self-explanatory, this defines how monit will start and stop your application. You will need to specify an absolute path to upstart's start and stop utilities, while suffixing your application name as an argument.&lt;/p&gt;

&lt;p&gt;The third line is the crux of monit's usefulness. If we were running our application on port 8000, serving through the HTTP protocol, then this would apply. Monit will perform an analysis on the specified port and protocol, and if its routines discover that something is not right, it will execute the next few lines. Monit has lots of different options for dealing with service failures, such as sending e-mails and restarting servers. In this case we are going to do a simple request to the root of the local domain, and if 10 seconds pass without the expected response, monit will restart the application.&lt;/p&gt;

&lt;p&gt;Now all that is left, is to start your application, then set monit off to do its tedious task of saving the world from crashing servers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!monit
sudo start yourprogram
monit -d 60 -c /etc/monit/monitrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the &lt;code&gt;-d 60&lt;/code&gt; flag tells monit to check against your configuration every 60 seconds. I recommend setting this to the same time as any response timeouts you may have installed. You have now passed monit 101! Easy, huh?&lt;/p&gt;

&lt;p&gt;Monit's useful-ness doesn't hit a brick wall there either, monit can be extended further to monitor the other services your web application relies upon. This may range from databases to nginx instances. Their website has many more examples and configurations, and even more again can be found littered over the internet.&lt;/p&gt;

&lt;h2&gt;Continuation&lt;/h2&gt;

&lt;p&gt;The next article I will write I'll explain how the awesomeness of node, can play nicely with the superb nginx server. This enables us hackers to create large scale load-balanced applications. Stay tuned...&lt;/p&gt;</description><author>tim@fostle.com (Tim Smart)</author></item><item><title>Control Flow in Node Part II</title><link>https://howtonode.org/control-flow-part-ii</link><comments>https://howtonode.org/control-flow-part-ii#disqus_thread</comments><pubDate>Thu, 04 Feb 2010 02:24:35 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/control-flow-part-ii</guid><description>&lt;p&gt;I had so much fun writing the last article on control flow, that I decided to play around with the feedback I received.  One thing in particular I want to talk about is the good work &lt;a href=&quot;http://inimino.org/~inimino/blog/fileio_first_release&quot;&gt;inimino&lt;/a&gt; is doing.&lt;/p&gt;

&lt;p&gt;Node has two constructs that are used currently to handle async return values, namely callbacks and event emitters.  You can read all about those on the &lt;a href=&quot;http://nodejs.org/&quot;&gt;nodejs.org&lt;/a&gt; website.  I'm going to talk about these and another way to manage asynchronous return values and streaming events.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; Promises were removed from node a while back, this article has been updated to show callbacks instead of promises.  For promises see &lt;a href=&quot;http://github.com/kriszyp/node-promise&quot;&gt;node-promise&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Why the distinction between Callback and EventEmitter?&lt;/h2&gt;

&lt;p&gt;In node there are two event handling techniques.  They are called callbacks, and EventEmitter.  Callbacks are for the async equivalent of a function.&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-ii/callback.js&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fs.readFile()&lt;/code&gt; takes a filename and &quot;&lt;em&gt;returns&lt;/em&gt;&quot; the contents of the file.  It doesn't actually return it, but passes it to the passed in callback function.&lt;/p&gt;

&lt;p&gt;Sometimes you want to listen for events that can happen several times.  For example in a web server, when processing a web request, the &lt;code&gt;data&lt;/code&gt; event is fired one or more times and then the &lt;code&gt;end&lt;/code&gt; event gets fired:&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-ii/http-body.js&gt;&lt;/p&gt;

&lt;p&gt;The difference is that with a callback you're either going to get an error or a result.  Never both, and never more than one event.  For cases where there are more than two events and/or they can be called multiple times, then you need the more powerful and flexible EventEmitters.&lt;/p&gt;

&lt;h2&gt;The Node.js Callback style&lt;/h2&gt;

&lt;p&gt;Node originally had promises instead of callbacks.  Read the older versions of this article for more information.  After much debate, node decided to drop Promises for simple callbacks.&lt;/p&gt;

&lt;p&gt;Any async function in node accepts a callback as it's last parameter.  Most the functions in the &lt;code&gt;'fs'&lt;/code&gt; module are like this.  Then that callback is going to get the error (if any) as the first parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// You call async functions like this.
someAsyncFunction(param1, param2, callback);

// And define your callback like this
function callback(err, result) {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;There could be another way&lt;/h2&gt;

&lt;p&gt;Promises worked well, but after reading about continuables from &lt;a href=&quot;http://inimino.org/~inimino/blog/fileio_first_release&quot;&gt;inimino&lt;/a&gt;, I was inspired to try another way.&lt;/p&gt;

&lt;p&gt;Remember our first example? Suppose that fs.readFile was used like this:&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-ii/continuable.js&gt;&lt;/p&gt;

&lt;p&gt;Instead of expecting a callback, it returns a function that's expecting two callback methods:  One for success and one for error.  I call this the &lt;code&gt;Do&lt;/code&gt; style, and you'll soon see why.&lt;/p&gt;

&lt;h2&gt;Making callback style actions&lt;/h2&gt;

&lt;p&gt;Often we will want to make custom functions that don't return a value right away.  Using this new style, let's make a &lt;code&gt;fileWrite&lt;/code&gt; function that looks like this (assuming that the fs functions were converted to this style too):&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-ii/file-write.js&gt;&lt;/p&gt;

&lt;p&gt;Notice how easy it is to chain the error messages back up to our caller.  Also this code is much shorter, and easier to read. (Than the original promise version, not the callback version)&lt;/p&gt;

&lt;p&gt;The key to making these actions is to, instead of creating a promise and returning, return a function that takes two callbacks and then call them directly when needed.&lt;/p&gt;

&lt;h2&gt;The Do library&lt;/h2&gt;

&lt;p&gt;I came up with a small library called &lt;code&gt;Do&lt;/code&gt; earlier today.  Actually it's not much, just a single function that does parallel actions much like the Combo Library from the last article.&lt;/p&gt;

&lt;h3&gt;Implementation&lt;/h3&gt;

&lt;p&gt;Here is the entire library:&lt;/p&gt;

&lt;p&gt;&lt;control-flow-part-ii/do.js&gt;&lt;/p&gt;

&lt;p&gt;But combined with the callback style actions, this can lead to some very powerful and concise code.&lt;/p&gt;

&lt;h3&gt;Single Action&lt;/h3&gt;

&lt;p&gt;Lets assume that we have a function &lt;code&gt;readFile&lt;/code&gt; that uses this new technique.  Here is how it's used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// A single async action with error handling
readFile('secretplans.txt')(function (secrets) {
  // Do something
}, function (error) {
  // Handle Error
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Parallel actions&lt;/h3&gt;

&lt;p&gt;Now let's combine that with the Do library:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Do.parallel([
    readFile('mylib.js'),
    readFile('secretplans.txt'),
])(function (source, secrets) {
  // Do something
}, function (error) {
  // Handle Error
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does two async actions in parallel and reports when both are done. Note that it only fires success if there are no errors.  If there is an error, then it passes it to the common error handler.&lt;/p&gt;

&lt;p&gt;You can also pass in an array of pre-made actions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var files = [&quot;one.txt&quot;, &quot;two.txt&quot;, &quot;three.txt&quot;];
var actions = files.map(function (filename) {
  return readFile(filename);
});

Do.parallel(actions)(function () {
  var contents = {},
      args = arguments;
  files.forEach(function (filename, index) {
    contents[filename] = args[index];
  });
  // Do something
});
// Let error thow exception.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sequential Actions&lt;/h3&gt;

&lt;p&gt;For serial actions, simply chain the action functions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;readFile('names.txt')(
  function upcase_slowly(string) { return function (next) {
    setTimeout(function () {
      next(string.toUpperCase());
    }, 100);
  }}
)(
  function save_data(string) { return function (next) {
    writeFile('names_up.txt', string)(next);
  }}
)(function () {
  // File was saved
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will read the file 'names.txt'.  When that's done it will call &lt;code&gt;upcase_slowly&lt;/code&gt;. When that's done it will pass the new string to &lt;code&gt;save_data&lt;/code&gt;, which wraps &lt;code&gt;writeFile&lt;/code&gt;.  When &lt;code&gt;writeFile&lt;/code&gt; is done our final callback will be invoked.&lt;/p&gt;

&lt;p&gt;Just for fun, here is the same example translated to the &lt;a href=&quot;http://github.com/creationix/jack&quot;&gt;Jack&lt;/a&gt; language (still in development).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;readFile names.txt
| fun string -&amp;gt; next -&amp;gt;
  timeout 100, fun -&amp;gt;
    next string.toUpperCase()
| fun string -&amp;gt; next -&amp;gt;
  writeFile 'names_up.txt', string | next
| fun -&amp;gt;
  # File was saved
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; I have since made a more powerful library that embraces node's native callback style called Step.  Read more on it's article &lt;a href=&quot;/step-of-conductor&quot;&gt;step-of-conductor&lt;/a&gt;.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Control Flow in Node</title><link>https://howtonode.org/control-flow</link><comments>https://howtonode.org/control-flow#disqus_thread</comments><pubDate>Wed, 03 Feb 2010 00:34:10 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/control-flow</guid><description>&lt;p&gt;One of the unique aspects of programming in an async framework like node is the ability to decide between which function will run in serial and which will run in parallel.  While there are no built-in methods for managing this in node, I'll discuss some of the tricks I came up with while writing the node-blog engine that generates this site.&lt;/p&gt;

&lt;h2&gt;Parallel vs Serial&lt;/h2&gt;

&lt;p&gt;Usually in an application you have steps that can't run until the result from a previous step is known.  In normal sequential programming this is easy because every statement waits till the previous one finishes.&lt;/p&gt;

&lt;p&gt;This is the case in Node too, except for functions that would otherwise perform blocking IO.  This includes things like scanning a directory, opening a file, reading from a file, querying a database, etc...&lt;/p&gt;

&lt;p&gt;For my blog engine I have a tree structure of files that need to be processed.  Here are the steps I need to accomplish:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get a list of articles.&lt;/li&gt;
&lt;li&gt;Read in and parse the articles.&lt;/li&gt;
&lt;li&gt;Get a list of authors.&lt;/li&gt;
&lt;li&gt;Read in and parse the authors.&lt;/li&gt;
&lt;li&gt;Get a list of HAML templates.&lt;/li&gt;
&lt;li&gt;Read in all the HAML templates.&lt;/li&gt;
&lt;li&gt;Get a list of static resource files.&lt;/li&gt;
&lt;li&gt;Read in the static files.&lt;/li&gt;
&lt;li&gt;Write article html pages.&lt;/li&gt;
&lt;li&gt;Write author pages.&lt;/li&gt;
&lt;li&gt;Write index page.&lt;/li&gt;
&lt;li&gt;Write feed page.&lt;/li&gt;
&lt;li&gt;Write static resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, there are several items that can be run independent of each other.  For example I can do all of the file reading at once without any problems, but I can't read any file until I've scanned the directory to know what files to read.  I can write all the files at the same time once their contents are calculated, but I won't know what to put in them until all the reads are done.&lt;/p&gt;

&lt;h2&gt;A counter for grouped parallel actions&lt;/h2&gt;

&lt;p&gt;For the simple case of scanning a directory and reading all the files into one object, we can employ a simple counter.&lt;/p&gt;

&lt;p&gt;&lt;control-flow/simple-scanner.js&gt;&lt;/p&gt;

&lt;p&gt;Nesting callbacks is a great way to ensure they run synchronously.  So inside the callback of &lt;code&gt;readdir&lt;/code&gt;, we set a countdown to the number of files to read.  Then we start a &lt;code&gt;readFile&lt;/code&gt; for each of the files.  These will run in parallel and finish in any arbitrary order.  The important thing is that we're decrementing the counter after each one finishes.  When the counter goes back to 0 we know that was the last file to read.&lt;/p&gt;

&lt;h2&gt;Passing callbacks to avoid excessive nesting&lt;/h2&gt;

&lt;p&gt;Now, if we wanted to execute more code now that we have the contents of the files, we would put it inside the inner-most nesting where the comment is.  This can become a problem real quick when a program has 7 levels of sequential actions.&lt;/p&gt;

&lt;p&gt;So let's modify the example to pass callbacks:&lt;/p&gt;

&lt;p&gt;&lt;control-flow/scanner-with-callback.js&gt;&lt;/p&gt;

&lt;p&gt;Now we have made a composite asynchronous function.  It takes some arguments (the path in this case), and calls a callback when everything inside is done.  All the logic inside it, and importantly the several levels of nesting are now compressed into a single unnested callback.&lt;/p&gt;

&lt;h2&gt;Combo library&lt;/h2&gt;

&lt;p&gt;I made a simple &lt;code&gt;Combo&lt;/code&gt; library the other day.  It basically wraps up the task of counting events and calling a callback when the last one finishes.  Also it preserves the original order of callbacks registered irrespective of their actual response time.&lt;/p&gt;

&lt;p&gt;&lt;control-flow/Combo.js&gt;&lt;/p&gt;

&lt;p&gt;Suppose you wanted to read some data from a database and read some more data from a file, and then do something else once the two were completed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Make a Combo object.
var both = new Combo(function (db_result, file_contents) {
  // Do something
});
// Fire off the database query
people.find({name: &quot;Tim&quot;, age: 27}, both.add());
// Fire off the file read
fs.readFile('famous_quotes.txt', both.add());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The database query and the file read will happen at the same time.  When they are both done, then the callback given to the &lt;code&gt;Combo&lt;/code&gt; constructor will get called.  The first argument will be the database result and the second will be the file contents.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The techniques taught here are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nest callbacks to get serial behavior.&lt;/li&gt;
&lt;li&gt;Collocate method calls to get parallel behavior.&lt;/li&gt;
&lt;li&gt;Use callbacks to untangle nested serial actions.&lt;/li&gt;
&lt;li&gt;Use counters to know when groups of parallel actions are finished.&lt;/li&gt;
&lt;li&gt;Use libraries like &lt;code&gt;Combo&lt;/code&gt; to ease the pain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a larger example of these patterns see the &lt;a href=&quot;http://github.com/creationix/node-blog/blob/master/build.js&quot;&gt;build.js&lt;/a&gt; file in the &lt;a href=&quot;http://github.com/creationix/node-blog&quot;&gt;node-blog&lt;/a&gt; engine.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item><item><title>Welcome to HowToNode.org</title><link>https://howtonode.org/welcome</link><comments>https://howtonode.org/welcome#disqus_thread</comments><pubDate>Tue, 02 Feb 2010 10:16:51 -0600</pubDate><guid isPermaLink="true">https://howtonode.org/welcome</guid><description>&lt;p&gt;&lt;strong&gt;How To Node&lt;/strong&gt; is a blog featuring projects and tutorials relating to the Node.js project.&lt;/p&gt;

&lt;p&gt;This article will describe how the blog works.  Teach a few node concepts and describe how to contribute new articles for others to enjoy.&lt;/p&gt;

&lt;h2&gt;Sample App - The node-blog engine.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; - This site now runs on another engine, but this article is still good as a general introduction to node.&lt;/p&gt;

&lt;p&gt;This entire site is hosted by an nginx server as static html files.  That's right, you can hit refresh as many times as you want and my node code won't know about it.  Think about it as super page caching.&lt;/p&gt;

&lt;p&gt;So where does node come in?  Well there is a small node app running on a high port listening for POST hooks from github.  Every time someone pushes changes to the repository that represents the source of this site, the running node app will regenerate all the static files.&lt;/p&gt;

&lt;p&gt;For full source-code to the engine please reference the &lt;a href=&quot;http://github.com/creationix/node-blog&quot;&gt;node-blog&lt;/a&gt; page at github.&lt;/p&gt;

&lt;p&gt;For the source to the articles and actual content, see the repository for &lt;a href=&quot;http://github.com/creationix/howtonode.org&quot;&gt;howtonode.org&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Node is different&lt;/h3&gt;

&lt;p&gt;Something you'll notice coming from other languages (especially PHP) is that &lt;a href=&quot;http://nodejs.org/&quot;&gt;node&lt;/a&gt; doesn't assume your code is running &lt;em&gt;in&lt;/em&gt; a web-server.  In fact it doesn't assume much at all.  This turns out to be a very good thing and we'll see why later.&lt;/p&gt;

&lt;p&gt;Also something that will be new is the fact that &lt;strong&gt;all&lt;/strong&gt; IO functions are non-blocking and asynchronous.  This allows node to be single threaded at the application layer, but perform very well. Especially for use cases where time is spent in IO wait.&lt;/p&gt;

&lt;h3&gt;HTTP Server - Github Hook&lt;/h3&gt;

&lt;p&gt;First we need a running http server to listen to POST hooks from &lt;a href=&quot;http://github.com/&quot;&gt;github&lt;/a&gt;.  This is pretty simple in &lt;a href=&quot;http://nodejs.org/&quot;&gt;node&lt;/a&gt; and requires that we run a small http server.&lt;/p&gt;

&lt;p&gt;We'll start with a small HTTP server.  Almost straight from the docs.&lt;/p&gt;

&lt;p&gt;&lt;welcome/server.js&gt;&lt;/p&gt;

&lt;p&gt;First we're loading a couple of external libraries.  Node is partially compatible with the CommonJS securable module system.  This means that library developers can write reusable JavaScript code and you can &lt;code&gt;require&lt;/code&gt; it into your project.  Loading &lt;code&gt;http&lt;/code&gt; allows us to start a standalone HTTP server.&lt;/p&gt;

&lt;p&gt;Bascically, this is the order of operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http&lt;/code&gt; is loaded and all execution stops until it's done.  &lt;code&gt;require&lt;/code&gt; is about the only blocking function in node.&lt;/li&gt;
&lt;li&gt;Then http.createServer is called and a function is passed to it.  It returns immediately&lt;/li&gt;
&lt;li&gt;Listen is called on the resultant server and returns immediately.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.log&lt;/code&gt; is called.  This is also async, so we don't wait for the text to actually appear on the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now what happens next starts to get tricky.  Node runs in a single thread of execution, but as soon as a block of synchronous code is done, the event loop runs the next event in the queue.  So what happens next depends on which IO was ready first.  Practically &lt;code&gt;listen&lt;/code&gt; and &lt;code&gt;puts&lt;/code&gt; both happen pretty quickly, so it doesn't usually matter. Se we'll assume that a message got printed to the console and an HTTP server is running port 8000.&lt;/p&gt;

&lt;p&gt;Whenever the server gets a web request, the function we passed in to createServer gets called.  The two arguments &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; stand for request and response.  Our function will also return right away since none of our functions are blocking, so we need these handles to reference the http request later on.  In the example the timeout will be scheduled and the function will end.  Later after the timeout has finished, the function inside it will be executed.  Now, with &lt;code&gt;res&lt;/code&gt; in our closure, we send a response to the waiting web browser and close the connection.  Note that we could sleep for 30 seconds and the HTTP server would still be accepting new connections from other clients.  This is the beauty of non-blocking IO.&lt;/p&gt;

&lt;p&gt;So to convert this to a Github POST hook, we'll keep it simple and assume all the logic is in another module.&lt;/p&gt;

&lt;p&gt;&lt;welcome/github-hook.js&gt;&lt;/p&gt;

&lt;p&gt;So whenever a request is received, we call the external &lt;code&gt;rebuild&lt;/code&gt; method.  The reason we pass in a callback instead of getting the return value is because the builder will need to do some of its own IO and can't return a meaningful response right away.  When it's done, we'll be notified and then pass on the output to the browser.&lt;/p&gt;

&lt;p&gt;In another article I'll explain how node-blog handles the parallel processing of the various source files and how it synchronizes the output into a single message to give back to the http server.&lt;/p&gt;

&lt;h2&gt;Contributing&lt;/h2&gt;

&lt;p&gt;This article is getting long enough, but it should be a good intro to node programming.  If you're already a node developer and would like to improve this article and/or write your own then please contribute.&lt;/p&gt;

&lt;p&gt;All you have to do is fork or clone the &lt;a href=&quot;http://github.com/creationix/howtonode.org&quot;&gt;howtonode.org&lt;/a&gt; repository and add your content.  If you want to preview the site locally then you can clone &lt;a href=&quot;http://github.com/creationix/node-blog&quot;&gt;node-blog&lt;/a&gt; and run a local instance.  This is not required as long as you trust the markdown conversion process.&lt;/p&gt;

&lt;p&gt;Add an author entry for yourself and write your article.  When done send any of the project contributors (&lt;a href=&quot;http://github.com/creationix&quot;&gt;creationix&lt;/a&gt; and &lt;a href=&quot;http://github.com/miksago&quot;&gt;miksago&lt;/a&gt; currently) either an email with a &lt;code&gt;git format-patch&lt;/code&gt; or send a github pull requst.  We'll pull it in and it will automatically go live.&lt;/p&gt;</description><author>tim@creationix.com (Tim Caswell)</author></item></channel></rss>